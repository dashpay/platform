---
name: "Build and push docker image"
description: "Build and push docker image by digest with Rust caching"
inputs:
  image_name:
    description: Name of image in Docker Hub, like `drive`
    required: true
  image_org:
    description: Docker Hub organization, like `dashpay`
    default: dashpay
  image_version:
    description: Docker image semver. Commit SHA if empty
  push_tags:
    description: Push tags to registry or digest only
    default: "false"
  target:
    description: "Target stage within Dockerfile: dapi, drive-abci, dashmate-helper, test-suite"
  platform:
    description: Platform to build for. i.e linux/amd64 or linux/arm64
    required: true
  dockerhub_username:
    description: User name to use when pushing images to Docker Hub
  dockerhub_token:
    description: Docker Hub token to use
  cache_mounts:
    description: Load cache mounts cache
    default: |
      cargo_registry_index
      cargo_registry_cache
      cargo_git
  cargo_profile:
    description: Cargo build profile, i.e release or dev
    default: dev
  bucket:
    description: S3 bucket to use for caching, must match runner define in `runs-on`
    default: multi-runner-cache-x1xibo9c
  region:
    description: S3 bucket region
    required: true
  aws_access_key_id:
    description: AWS access key ID
    required: true
  aws_secret_access_key:
    description: AWS secret access key
    required: true
outputs:
  digest:
    value: ${{ steps.docker_build.outputs.digest }}
    description: Docker image digest

runs:
  using: composite
  steps:
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}
      if: ${{ inputs.dockerhub_token != '' }}

    - name: Set up Docker BuildX
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760
        cleanup: false
        config-inline: |
          [worker.oci]
            gc = false

    - name: Load Docker mount cache
      uses: dcginfra/buildkit-cache-dance/inject@s5cmd
      if: ${{ inputs.cache_mounts != '' }}
      with:
        bucket: ${{ inputs.bucket }}
        mounts: ${{ inputs.cache_mounts }}

    - name: Set Docker tags and labels from image tag
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.image_org }}/${{ inputs.image_name }}
        tags: |
          type=semver,pattern={{version}},value=${{inputs.image_version}},enable=${{ inputs.image_version != '' }}
          type=sha,format=long,enable=${{ inputs.image_version == '' }}

    - name: Configure docker layer cache
      uses: ./.github/actions/s3-layer-cache-settings
      id: layer_cache_settings
      with:
        name: ${{ inputs.image_name }}
        bucket: ${{ inputs.bucket }}

    - name: Build and push Docker image ${{ inputs.image }}
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        target: ${{ inputs.target }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        tags: ${{ inputs.push_tags == 'true' && steps.docker_meta.outputs.tags || '' }}
        platforms: ${{ inputs.platform }}
        build-args: |
          CARGO_BUILD_PROFILE=${{ inputs.cargo_profile }}
          RUSTC_WRAPPER=sccache
          SCCACHE_BUCKET=${{ inputs.bucket }}
          SCCACHE_REGION=${{ inputs.region }}
          SCCACHE_S3_KEY_PREFIX=${{ runner.os }}/sccache
          AWS_ACCESS_KEY_ID=${{ inputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY=${{ inputs.aws_secret_access_key }}
        cache-from: ${{ steps.layer_cache_settings.outputs.cache_from }}
        cache-to: ${{ steps.layer_cache_settings.outputs.cache_to }}
        outputs: type=image,name=${{ inputs.image_org }}/${{ inputs.image_name }},push-by-digest=${{ inputs.push_tags != 'true' }},name-canonical=true,push=true

    - name: Save Docker mount cache
      uses: dcginfra/buildkit-cache-dance/extract@s5cmd
      if: ${{ inputs.cache_mounts != '' }}
      with:
        bucket: ${{ inputs.bucket }}
        mounts: ${{ inputs.cache_mounts }}
