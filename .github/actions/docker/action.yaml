---
name: "Build and push docker image"
description: "Build and push docker image by digest with Rust caching"
inputs:
  image_name:
    description: Name of image in Docker Hub, like `drive`
    required: true
  image_org:
    description: Docker Hub organization, like `dashpay`
    default: dashpay
  image_version:
    description: Docker image semver. Commit SHA if empty
  push_tags:
    description: Push tags to registry or digest only
    default: "false"
  target:
    description: "Target stage within Dockerfile: dapi, drive-abci, dashmate-helper, test-suite"
  platform:
    description: Platform to build for. i.e linux/amd64 or linux/arm64
    required: true
  dockerhub_username:
    description: User name to use when pushing images to Docker Hub
  dockerhub_token:
    description: Docker Hub token to use
  cargo_profile:
    description: Cargo build profile, i.e release or dev
    default: dev
  bucket:
    description: S3 bucket to use for caching (both sccache and layer cache)
    required: true
  region:
    description: S3 bucket region
    required: true
  endpoint:
    description: S3 endpoint to use for caching
    required: true
  cache_access_key_id:
    description: Access key ID for s3 cache
    required: true
  cache_secret_access_key:
    description: Secret access key for s3 cache
    required: true
  cache_to_name:
    description: "Save cache to name manifest (should be used only on default branch)"
    default: "false"
outputs:
  digest:
    value: ${{ steps.docker_build.outputs.digest }}
    description: Docker image digest

runs:
  using: composite

  steps:
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}
      if: ${{ inputs.dockerhub_token != '' }}

    - name: Set up Docker BuildX
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760
        cleanup: false
        buildkitd-config-inline: |
          [worker.oci]
            gc = false

    - name: Set Docker tags and labels from image tag
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.image_org }}/${{ inputs.image_name }}
        tags: |
          type=semver,pattern={{version}},value=${{inputs.image_version}},enable=${{ inputs.image_version != '' }}
          type=sha,format=long,enable=${{ inputs.image_version == '' }}

    - name: Configure docker layer cache
      uses: ./.github/actions/s3-layer-cache-settings
      id: layer_cache_settings
      with:
        name: ${{ inputs.image_name }}
        region: ${{ inputs.region }}
        bucket: ${{ inputs.bucket }}
        endpoint: ${{ inputs.endpoint }}
        cache_to_name: ${{ inputs.cache_to_name }}

    - name: Set HOME variable to github context
      shell: bash
      run: echo "HOME=$HOME" >> $GITHUB_ENV

    - name: Cargo cache for Docker
      uses: actions/cache@v4
      id: cargo-cache
      with:
        path: |
          ${{ env.HOME }}/cargo-cache-registry-index
          ${{ env.HOME }}/cargo-cache-registry-cache
          ${{ env.HOME }}/cargo-cache-git-db
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Inject cargo cache into docker
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      with:
        cache-map: |
          {
            "${{ env.HOME }}/cargo-cache-registry-index": {
              "target": "/root/.cargo/registry/index",
              "id": "cargo_registry_index"
            },
            "${{ env.HOME }}/cargo-cache-registry-cache": {
              "target": "/root/.cargo/registry/cache",
              "id": "cargo_registry_cache"
            },
            "${{ env.HOME }}/cargo-cache-git-db": {
              "target": "/root/.cargo/git/db",
              "id": "cargo_git"
            }
          }
        skip-extraction: ${{ steps.cargo-cache.outputs.cache-hit }}

    - name: Yarn unplugged cache for Docker
      uses: actions/cache@v4
      id: yarn-cache
      with:
        path: ${{ env.HOME }}/yarn-unplugged-cache
        key: ${{ inputs.platform }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ inputs.platform }}-yarn-unplugged-

    - name: Set arch
      id: arch
      uses: actions/github-script@v6
      with:
        result-encoding: "string"
        script: return '${{ inputs.platform }}'.replace('linux/', '');

    - name: Inject cargo cache into docker
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      with:
        cache-map: |
          {
            "${{ env.HOME }}/yarn-unplugged-cache": {
              "target": "/tmp/unplugged",
              "id": "unplugged_${{ steps.arch.outputs.result }}"
            }
          }
        skip-extraction: ${{ steps.yarn-cache.outputs.cache-hit }}

    - name: Setup sccache vars
      uses: ./.github/actions/sccache
      with:
        bucket: ${{ inputs.bucket }}
        region: ${{ inputs.region }}
        endpoint: ${{ inputs.endpoint }}
        access_key_id: ${{ inputs.cache_access_key_id }}
        secret_access_key: ${{ inputs.cache_secret_access_key }}
        install: false

    - name: Build and push Docker image ${{ inputs.image }}
      id: docker_build
      uses: docker/build-push-action@v6
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        target: ${{ inputs.target }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        push: ${{ inputs.push_tags }}
        tags: ${{ inputs.push_tags == 'true' && steps.docker_meta.outputs.tags || '' }}
        platforms: ${{ inputs.platform }}
        secret-files: |
          AWS=${{ env.HOME }}/.aws/credentials
        build-args: |
          CARGO_BUILD_PROFILE=${{ inputs.cargo_profile }}
          SCCACHE_BUCKET=${{ inputs.bucket }}
          SCCACHE_REGION=${{ inputs.region }}
          SCCACHE_ENDPOINT=${{ inputs.endpoint }}
          SCCACHE_S3_KEY_PREFIX=${{ runner.os }}/sccache/${{ runner.arch }}/linux-gnu
          AWS_PROFILE=sccache
        cache-from: ${{ steps.layer_cache_settings.outputs.cache_from }}
        cache-to: ${{ steps.layer_cache_settings.outputs.cache_to }}
        outputs: type=image,name=${{ inputs.image_org }}/${{ inputs.image_name }},push-by-digest=${{ inputs.push_tags != 'true' }},name-canonical=true,push=true
