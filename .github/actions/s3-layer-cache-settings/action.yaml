name: 'Get S3 Docker Layer Cache settings'
description: |
  This action generates string with s3-based cache configuration for docker buildx.
  It defines three manifests:
    - name and current commit to hit all builds for this commit (restart) with this name
    - name and head ref to hit all builds for this branch with this name
    - just name to hit all builds for this name

inputs:
  name:
    description: 'Cache key name will be used as a prefix for all docker image manifests'
    required: true
  head_ref:
    description: 'Head ref for an additional manifest to hit all builds for this head'
    default: ${{ github.head_ref }}
  region:
    description: S3 region
    default: eu-west-1
  bucket:
    description: S3 bucket name
    default: multi-runner-linux-x64-platform-cache-ui535z23
  prefix:
    description: S3 key prefix
    default: 'cache-layers/'
  mode:
    description: Cache mode
    default: max

outputs:
  cache_to:
    description: 'String with s3-based cache configuration for docker buildx cache-to option'
    value: ${{ steps.script.outputs.cache_to }}
  cache_from:
    description: 'String with s3-based cache configuration for docker buildx cache-from option'
    value: ${{ steps.script.outputs.cache_from }}

runs:
  using: composite
  steps:
    - uses: actions/github-script@v6
      id: script
      with:
        script: |
          const sanitizedHeadRef = '${{ inputs.head_ref }}'.replace(/[^a-zA-Z0-9]/g, '-');

          const manifestNames = [
            '${{ inputs.name }}_sha_${{ github.sha }}',
            `${{ inputs.name }}_tag_${ sanitizedHeadRef }`,
            '${{ inputs.name }}'
          ];

          const settings = {
            type: 's3',
            region: '${{ inputs.region }}',
            bucket: '${{ inputs.bucket }}',
            prefix: '${{ inputs.prefix }}',
            name: manifestNames.join(';'),
          };

          const settingsString = Object.entries(settings)
            .filter(([,value]) => value !== '')
            .map(([key, value]) => `${key}=${value}`)
            .join(',');

          core.setOutput('cache_from', settingsString);
          core.setOutput('cache_to', `${settingsString},mode=${{ inputs.mode }}`);
