name: Build docker images

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag (i.e. v0.22.3-pre.2)'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
    drive:
      name: Release Drive to Docker Hub
      runs-on: ubuntu-22.04
      steps:
        - name: Check out repo
          uses: actions/checkout@v3

        - name: Set up QEMU to run multi-arch builds
          uses: docker/setup-qemu-action@v2

        - name: Set up Docker BuildX
          uses: docker/setup-buildx-action@v2
          with:
            version: v0.9.1
            install: true
            driver-opts: image=moby/buildkit:buildx-stable-1

        - name: Login to DockerHub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Get tag
          uses: actions/github-script@v6
          id: tag
          with:
            result-encoding: string
            script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

        - name: Set suffix
          uses: actions/github-script@v6
          id: suffix
          with:
            result-encoding: string
            script: |
              const fullTag = '${{steps.tag.outputs.result}}';
              if (fullTag.includes('-')) {
                const [, fullSuffix] = fullTag.split('-');
                const [suffix] = fullSuffix.split('.');
                return `-${suffix}`;
              } else {
                return '';
              }

        - name: Set Docker tags and labels
          id: docker_meta
          uses: docker/metadata-action@v4
          with:
            images: dashpay/drive
            tags: |
              type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
              type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
              type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
              type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
            flavor: |
              suffix=${{ steps.suffix.outputs.result }},onlatest=true
              latest=${{ github.event_name == 'release' }}

        - name: Build and push Docker image ${{ inputs.image }}
          uses: docker/build-push-action@v4.0.0
          with:
            context: .
            file: ./packages/js-drive/Dockerfile
            tags: ${{ steps.docker_meta.outputs.tags }}
            labels: ${{ steps.docker_meta.outputs.labels }}
            builder: ${{ steps.buildx.outputs.name }}
            build-args: |
              SCCACHE_GHA_ENABLED=true
              ACTIONS_CACHE_URL=${{ env.ACTIONS_CACHE_URL }}
              ACTIONS_RUNTIME_TOKEN=${{ env.ACTIONS_RUNTIME_TOKEN }}
              CARGO_BUILD_PROFILE=debug
            platforms: linux/amd64,linux/arm64
            push: true
            cache-from: |
              type=gha
            # In practice, time spent preparing images is much lower than build.
            # We minimize cached info to leave more space for sccache cache.
            cache-to: |
              type=gha,mode=min

    dapi:
      name: Release DAPI to Docker Hub
      runs-on: ubuntu-22.04
      steps:
        - name: Check out repo
          uses: actions/checkout@v3

        - name: Set up QEMU to run multi-arch builds
          uses: docker/setup-qemu-action@v2

        - name: Set up Docker BuildX
          id: buildx
          uses: docker/setup-buildx-action@v2
          with:
            version: v0.9.1
            install: true
            driver-opts: image=moby/buildkit:buildx-stable-1

        - name: Login to DockerHub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Get tag
          uses: actions/github-script@v6
          id: tag
          with:
            result-encoding: string
            script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

        - name: Set suffix
          uses: actions/github-script@v6
          id: suffix
          with:
            result-encoding: string
            script: |
              const fullTag = '${{steps.tag.outputs.result}}';
              if (fullTag.includes('-')) {
                const [, fullSuffix] = fullTag.split('-');
                const [suffix] = fullSuffix.split('.');
                return `-${suffix}`;
              } else {
                return '';
              }

        - name: Set Docker tags and labels
          id: docker_meta
          uses: docker/metadata-action@v4
          with:
            images: dashpay/drive
            tags: |
              type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
              type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
              type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
              type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
            flavor: |
              suffix=${{ steps.suffix.outputs.result }},onlatest=true
              latest=${{ github.event_name == 'release' }}

        - name: Build and push Docker image ${{ inputs.image }}
          uses: docker/build-push-action@v4.0.0
          with:
            context: .
            file: ./packages/dapi/Dockerfile
            tags: ${{ steps.docker_meta.outputs.tags }}
            labels: ${{ steps.docker_meta.outputs.labels }}
            builder: ${{ steps.buildx.outputs.name }}
            build-args: |
              SCCACHE_GHA_ENABLED=true
              ACTIONS_CACHE_URL=${{ env.ACTIONS_CACHE_URL }}
              ACTIONS_RUNTIME_TOKEN=${{ env.ACTIONS_RUNTIME_TOKEN }}
              CARGO_BUILD_PROFILE=debug
            platforms: linux/amd64,linux/arm64
            push: true
            cache-from: |
              type=gha
            # In practice, time spent preparing images is much lower than build.
            # We minimize cached info to leave more space for sccache cache.
            cache-to: |
              type=gha,mode=min
