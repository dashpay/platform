name: Package JS Tests

on:
  workflow_call:
    inputs:
      package:
        description: The package name to run tests for
        type: string
        required: true
      start-local-network:
        description: Does the specified package require local network to run tests
        type: boolean
        default: false
        required: false
      skip-tests:
        description: Skip running tests
        type: boolean
        default: false
        required: false
      install-browsers:
        description: Install browsers
        type: boolean
        default: false
        required: false

jobs:
  lint:
    name: Linting
    runs-on: [ "self-hosted", "linux", "x64", "ubuntu-platform" ]
    timeout-minutes: 15
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "false"
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # Don't cache ./target, as it takes tons of space, use sccache instead.
          cache-targets: false
          # We set a shared key, as our cache is reusable between jobs
          shared-key: rust-cargo

      - name: Setup Rust compilation cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.1"

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build package and dependencies
        run: yarn build --filter "+${{ inputs.package }}"

      - name: Run ESLinter
        run: yarn workspace "${{ inputs.package }}" lint

  test:
    name: Tests
    runs-on: [ "self-hosted", "linux", "x64", "ubuntu-platform" ]
    timeout-minutes: 30
    if: ${{ !inputs.skip-tests }}
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "false"
    steps:
      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
        if: ${{ inputs.install-browsers }}
        with:
          firefox-version: 'latest'

      - name: Check out repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # Don't cache ./target, as it takes tons of space, use sccache instead.
          cache-targets: false
          # We set a shared key, as our cache is reusable between jobs
          shared-key: rust-cargo

      - name: Setup Rust compilation cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.1"

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build package and dependencies
        run: yarn build --filter "+${{ inputs.package }}"
        env:
          NODE_ENV: test

      # TODO: We build second time here, but with cache it must be quick
      - name: Build SDK
        run: yarn build --filter "+dash"
        if: ${{ inputs.start-local-network }}

      - name: Create necessary dotenv files
        run: |
          cp packages/dapi/.env.example packages/dapi/.env
          cp packages/js-drive/.env.example packages/js-drive/.env
        if: ${{ !inputs.start-local-network }}

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v2
        if: ${{ inputs.start-local-network }}

      - name: Enable docker cache mount
        uses: actions/cache@v3
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit

      - name: Load docker cache mount
        uses: dashevo/gh-action-cache-buildkit-state@master
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Setup local network
        run: yarn configure
        if: ${{ inputs.start-local-network }}

      - name: Start local network
        run: yarn start
        if: ${{ inputs.start-local-network }}

      - name: Run tests
        run: yarn test --filter "${{ inputs.package }}"

      - name: Show Docker logs
        if: ${{ failure() }}
        uses: jwalton/gh-docker-logs@v2
