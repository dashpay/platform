name: Package JS Tests

on:
  workflow_call:
    inputs:
      package:
        description: The package name to run tests for
        type: string
        required: true
      start-local-network:
        description: Does the specified package require local network to run tests
        type: boolean
        default: false
        required: false
      skip-tests:
        description: Skip running tests
        type: boolean
        default: false
        required: false
      install-browsers:
        description: Install browsers
        type: boolean
        default: false
        required: false

jobs:
  lint:
    name: Linting
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Node.JS
        uses: ./.github/actions/nodejs

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Build package and dependencies
        run: yarn build --filter "+${{ inputs.package }}"

      - name: Run ESLinter
        run: yarn workspace "${{ inputs.package }}" lint

  test:
    name: Tests
    runs-on: self-hosted
    timeout-minutes: 120
    if: ${{ !inputs.skip-tests }}
    steps:
      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
        if: ${{ inputs.install-browsers }}
        with:
          firefox-version: "latest"

      - name: Check out repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Node.JS
        uses: ./.github/actions/nodejs

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Build package and dependencies
        run: yarn build --filter "+${{ inputs.package }}"
        env:
          NODE_ENV: test

      # We build second time here, but with cache it must be quick
      - name: Build SDK
        run: yarn build --filter "+dash"
        if: ${{ inputs.start-local-network }}

      - name: Create necessary dotenv files
        run: |
          cp packages/dapi/.env.example packages/dapi/.env
        if: ${{ !inputs.start-local-network }}

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v2
        if: ${{ inputs.start-local-network }}
        with:
          install: true
          driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760
          config-inline: |
            [worker.oci]
              gc = true
              gckeepstorage = 40000 # 40 GB
              [[worker.oci.gcpolicy]]
                all = true
                keepBytes = 30000000000 # 30 GB
                keepDuration = 864000 # 10 days

      - name: Load Docker mount cache
        if: ${{ inputs.start-local-network }}
        uses: dcginfra/buildkit-cache-dance/inject@main
        with:
          mounts: |
            cargo_registry_index
            cargo_registry_cache
            cargo_git
            target_amd64
            target_wasm
            unplugged_amd64

      - name: Setup local network
        run: yarn configure
        if: ${{ inputs.start-local-network }}

      - name: Start local network
        if: ${{ inputs.start-local-network }}
        run: yarn start
        env:
          CACHE_DRIVE_ABCI_FROM: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/drive_${{ github.sha }};dashpay/drive_${{ github.head_ref }};dashpay/drive
          CACHE_DRIVE_ABCI_TO: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/drive_${{ github.sha }};dashpay/drive_${{ github.head_ref }};dashpay/drive,mode=max
          CACHE_DAPI_API_FROM: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/dapi_${{ github.sha }};dashpay/dapi_${{ github.head_ref }};dashpay/dapi
          CACHE_DAPI_API_TO: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/dapi_${{ github.sha }};dashpay/dapi_${{ github.head_ref }};dashpay/dapi,mode=max
          CACHE_DASHMATE_HELPER_FROM: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/dashmate-helper_${{ github.sha }};dashpay/dashmate-helper_${{ github.head_ref }};dashpay/dashmate-helper
          CACHE_DASHMATE_HELPER_TO: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/dashmate-helper_${{ github.sha }};dashpay/dashmate-helper_${{ github.head_ref }};dashpay/dashmate-helper,mode=max
          CACHE_ENVOY_FROM: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/envoy_${{ github.sha }};dashpay/envoy_${{ github.head_ref }};dashpay/envoy
          CACHE_ENVOY_TO: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/envoy_${{ github.sha }};dashpay/envoy_${{ github.head_ref }};dashpay/envoy,mode=max
          CACHE_DEPS_FROM: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/deps_${{ github.sha }};dashpay/deps_${{ github.head_ref }};dashpay/deps
          CACHE_DEPS_TO: type=s3,region=eu-west-1,bucket=platform-runner-cache,prefix=cache-layers/,name=dashpay/deps_${{ github.sha }};dashpay/deps_${{ github.head_ref }};dashpay/deps,mode=max

      - name: Store Docker mount cache
        if: ${{ inputs.start-local-network }}
        uses: dcginfra/buildkit-cache-dance/extract@main
        with:
          mounts: |
            cargo_registry_index
            cargo_registry_cache
            cargo_git
            target_amd64
            target_wasm
            unplugged_amd64

      - name: Run tests
        run: yarn test --filter "${{ inputs.package }}"

      - name: Show Docker logs
        if: ${{ failure() }}
        uses: jwalton/gh-docker-logs@v2
