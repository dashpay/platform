name: Test rs-sdk-ffi build

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'packages/rs-sdk-ffi/**'
      - 'packages/rs-sdk/**'
      - '.github/workflows/tests-rs-sdk-ffi-build.yml'
  push:
    branches:
      - master
      - 'v*-dev'
    paths:
      - 'packages/rs-sdk-ffi/**'
      - 'packages/rs-sdk/**'
      - '.github/workflows/tests-rs-sdk-ffi-build.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-ffi-ios:
    name: Build rs-sdk-ffi for iOS targets
    # macOS runners are required to access Apple SDKs (no osxcross here)
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-ios, aarch64-apple-ios-sim]
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          target: ${{ matrix.target }}

      - name: Add Rust target
        run: |
          rustup target add ${{ matrix.target }}

      - name: Install Protobuf (protoc)
        uses: arduino/setup-protoc@v2
        with:
          version: "32.0"

      - name: Verify protoc
        run: protoc --version

      - name: Build FFI library
        working-directory: packages/rs-sdk-ffi
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Verify build output
        run: |
          LIB=target/${{ matrix.target }}/release/librs_sdk_ffi.a
          if [ ! -f "$LIB" ]; then
            echo "Error: FFI library was not built for ${{ matrix.target }}"
            exit 1
          fi
          echo "FFI library successfully built for ${{ matrix.target }}"
          ls -la "$LIB"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rs-sdk-ffi-${{ matrix.target }}-release
          path: |
            target/${{ matrix.target }}/release/librs_sdk_ffi.a
