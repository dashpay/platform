on:
  workflow_call:
    inputs:
      package:
        description: The package name to run tests for
        type: string
        required: true
      check-each-feature:
        description: If true, try to build each individual feature for this crate
        type: boolean
        default: false

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          components: clippy

      - name: Setup sccache
        uses: ./.github/actions/sccache
        with:
          bucket: ${{ vars.CACHE_S3_BUCKET }}
          region: ${{ vars.CACHE_REGION }}
          endpoint: ${{ vars.CACHE_S3_ENDPOINT }}
          access_key_id: ${{ secrets.CACHE_KEY_ID }}
          secret_access_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: Install librocksdb
        uses: ./.github/actions/librocksdb

      - uses: clechasseur/rs-clippy-check@v3
        with:
          args: --package ${{ inputs.package }} --all-features --locked -- --no-deps
        env:
          ROCKSDB_STATIC: "/opt/rocksdb/usr/local/lib/librocksdb.a"
          ROCKSDB_LIB_DIR: "/opt/rocksdb/usr/local/lib"
          SNAPPY_STATIC: "/usr/lib/x86_64-linux-gnu/libsnappy.a"
          SNAPPY_LIB_DIR: "/usr/lib/x86_64-linux-gnu"
  formatting:
    name: Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          components: rustfmt
          cache: false

      # We don't use cache for this step, nothing to cache here
      # This step doesn't need librocksdb, so we don't install it

      - name: Check formatting
        run: cargo fmt --check --package=${{ inputs.package }}

  unused_deps:
    name: Unused dependencies
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/rust

      - name: Setup sccache
        uses: ./.github/actions/sccache
        with:
          bucket: ${{ vars.CACHE_S3_BUCKET }}
          region: ${{ vars.CACHE_REGION }}
          endpoint: ${{ vars.CACHE_S3_ENDPOINT }}
          access_key_id: ${{ secrets.CACHE_KEY_ID }}
          secret_access_key: ${{ secrets.CACHE_SECRET_KEY }}
      - name: Install librocksdb
        uses: ./.github/actions/librocksdb

      - name: Get crate ${{ inputs.package }} info
        id: crate_info
        uses: ./.github/actions/crate_info
        with:
          package: ${{ inputs.package }}

      - name: Find unused dependencies
        uses: lklimek/cargo-machete@feat/workdir
        env:
          ROCKSDB_STATIC: "/opt/rocksdb/usr/local/lib/librocksdb.a"
          ROCKSDB_LIB_DIR: "/opt/rocksdb/usr/local/lib"
          SNAPPY_STATIC: "/usr/lib/x86_64-linux-gnu/libsnappy.a"
          SNAPPY_LIB_DIR: "/usr/lib/x86_64-linux-gnu"
        with:
          args: ${{ steps.crate_info.outputs.cargo_manifest_dir }}

  detect_structure_changes:
    name: Detect immutable structure changes
    runs-on: ubuntu-24.04
    # FIXME: as we use `gh pr view` below, this check can only
    # run on pull requests. We should find a way to run it
    # when manual triggers are used.
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout base commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Get all changed Rust files
        id: files
        run: |
          gh pr view https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }} --json files --jq "[.files[].path] | map(select(test(\"packages/${{ inputs.package }}/.*.rs$\")))" > files.json
          echo "files=$(cat files.json)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save append_only and immutable structures
        id: base_structures
        run: |
          mkdir base_structures
          for file in $(jq -r '.[]' <<< "${{ steps.files.outputs.files }}"); do
            if [[ $file == *.rs ]]; then
              awk '/@append_only/,/}/' $file > "base_structures/$(basename $file).append_only.base"
              awk '/@immutable/,/}/' $file > "base_structures/$(basename $file).immutable.base"
            fi
          done
          echo "base_dir=$(pwd)/base_structures" >> $GITHUB_OUTPUT

      - name: Checkout PR commit
        uses: actions/checkout@v4

      - name: Check structure changes
        run: |
          for file in $(jq -r '.[]' <<< "${{ steps.files.outputs.files }}"); do
            if [[ $file == *.rs ]]; then
              awk '/@append_only/,/}/' $file > "$(basename $file).append_only.pr"
              awk '/@immutable/,/}/' $file > "$(basename $file).immutable.pr"

              # Check append_only structures
              if ! diff -u "${{ steps.base_structures.outputs.base_dir }}/$(basename $file).append_only.base" "$(basename $file).append_only.pr" | grep "^-" | grep -v "@append_only" | grep -v "^-" | grep -v "^///" | grep -v "^//" | grep -v "^-$"; then
                echo "No deletions detected in @append_only structures in $file. Test passed."
              else
                echo "Deletions detected in @append_only structures in $file. Test failed."
                exit 1
              fi

              # Check immutable structures
              if ! diff -u "${{ steps.base_structures.outputs.base_dir }}/$(basename $file).immutable.base" "$(basename $file).immutable.pr" | grep -E "^\+[^/+]|^-[^/-]" ; then
                echo "No code changes detected in @immutable structures in $file. Test passed."
              else
                echo "Code changes detected in @immutable structures in $file. Test failed."
                exit 1
              fi
            fi
          done

  test:
    name: Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 25
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/rust

      - name: Setup sccache
        uses: ./.github/actions/sccache
        with:
          bucket: ${{ vars.CACHE_S3_BUCKET }}
          region: ${{ vars.CACHE_REGION }}
          endpoint: ${{ vars.CACHE_S3_ENDPOINT }}
          access_key_id: ${{ secrets.CACHE_KEY_ID }}
          secret_access_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: Install librocksdb
        uses: ./.github/actions/librocksdb

      - name: Run tests
        run: cargo test --package=${{ inputs.package }} --all-features --locked
        env:
          SCCACHE_S3_KEY_PREFIX: ${{ runner.os }}/sccache/${{ runner.arch }}/linux-gnu
          ROCKSDB_STATIC: "/opt/rocksdb/usr/local/lib/librocksdb.a"
          ROCKSDB_LIB_DIR: "/opt/rocksdb/usr/local/lib"
          SNAPPY_STATIC: "/usr/lib/x86_64-linux-gnu/libsnappy.a"
          SNAPPY_LIB_DIR: "/usr/lib/x86_64-linux-gnu"

  check_each_feature:
    name: Check each feature
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: ${{ inputs.check-each-feature }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/rust

      - name: Setup sccache
        uses: ./.github/actions/sccache
        with:
          bucket: ${{ vars.CACHE_S3_BUCKET }}
          region: ${{ vars.CACHE_REGION }}
          endpoint: ${{ vars.CACHE_S3_ENDPOINT }}
          access_key_id: ${{ secrets.CACHE_KEY_ID }}
          secret_access_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: Install librocksdb
        uses: ./.github/actions/librocksdb

      - name: Get crate ${{ runner.arch }} info
        id: crate_info
        uses: ./.github/actions/crate_info
        with:
          package: ${{ inputs.package }}

      - name: Check each feature in ${{ inputs.package }}
        env:
          ROCKSDB_STATIC: "/opt/rocksdb/usr/local/lib/librocksdb.a"
          ROCKSDB_LIB_DIR: "/opt/rocksdb/usr/local/lib"
          SNAPPY_STATIC: "/usr/lib/x86_64-linux-gnu/libsnappy.a"
          SNAPPY_LIB_DIR: "/usr/lib/x86_64-linux-gnu"
        run: |
          echo Verify all features disabled
          set -ex
          set | grep AWS
          cat $HOME/.aws/credentials
          SCCACHE_LOG=debug sccache --start-server
          sccache --stop-server

          features="${{ steps.crate_info.outputs.features }}"
          fails=""
          RUSTFLAGS="-D warnings"
          cargo check --no-default-features --package "${{ inputs.package }}" --locked
          for feature in $features ;  do
            echo " ============== Verify feature $feature =============="
            cargo check \
              --no-default-features \
              --package "${{ inputs.package }}" \
              --features="${feature}" \
              --locked || fails="${fails} ${feature}"
          done

          if [ -n "$fails" ] ; then
            echo "Failed features: $fails"
            exit 1
          fi
          echo "All features verified"
