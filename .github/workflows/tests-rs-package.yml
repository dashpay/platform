on:
  workflow_call:
    inputs:
      package:
        description: The package name to run tests for
        type: string
        required: true
      test-runner:
        description: Runner for tests. Must be JSON valid string.
        type: string
        default: '[ "self-hosted", "linux", "arm64", "ubuntu-platform" ]'
      lint-runner:
        description: Runner for linting. Must be JSON valid string.
        type: string
        default: '"ubuntu-22.04"'

jobs:
  lint:
    name: Linting
    runs-on: ${{ fromJSON(inputs.lint-runner) }}
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials and bucket region
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          components: clippy

      - name: Get arch
        id: arch
        run: echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Find crate ${{ inputs.package }} directory
        id: find_crate_dir
        run: echo "CRATE_DIR=$(dirname $(grep -rl --include=Cargo.toml 'name = "${{ inputs.package }}"' .))" >> $GITHUB_ENV

      - uses: clechasseur/rs-clippy-check@v3
        with:
          args: --package ${{ inputs.package }} --all-features --locked -- --no-deps
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_BUCKET: multi-runner-cache-x1xibo9c
          SCCACHE_REGION: ${{ vars.AWS_REGION }}
          SCCACHE_S3_KEY_PREFIX: ${{ runner.os }}/sccache/${{ steps.arch.outputs.arch }}/linux-gnu

      - name: Find unused dependencies
        uses: lklimek/cargo-machete@feat/workdir
        with:
          args: ${{ env.CRATE_DIR }}

  formatting:
    name: Formatting
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          components: rustfmt
          cache: false

      - name: Check formatting
        run: exit `cargo fmt --check --package=${{ inputs.package }} | wc -l`

  detect_structure_changes:
    name: Detect immutable structure changes
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout base commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Get all changed Rust files
        id: files
        run: |
          gh pr view https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }} --json files --jq "[.files[].path] | map(select(test(\"packages/${{ inputs.package }}/.*.rs$\")))" > files.json
          echo "files=$(cat files.json)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save append_only and immutable structures
        id: base_structures
        run: |
          mkdir base_structures
          for file in $(jq -r '.[]' <<< "${{ steps.files.outputs.files }}"); do
            if [[ $file == *.rs ]]; then
              awk '/@append_only/,/}/' $file > "base_structures/$(basename $file).append_only.base"
              awk '/@immutable/,/}/' $file > "base_structures/$(basename $file).immutable.base"
            fi
          done
          echo "base_dir=$(pwd)/base_structures" >> $GITHUB_OUTPUT

      - name: Checkout PR commit
        uses: actions/checkout@v4

      - name: Check structure changes
        run: |
          for file in $(jq -r '.[]' <<< "${{ steps.files.outputs.files }}"); do
            if [[ $file == *.rs ]]; then
              awk '/@append_only/,/}/' $file > "$(basename $file).append_only.pr"
              awk '/@immutable/,/}/' $file > "$(basename $file).immutable.pr"

              # Check append_only structures
              if ! diff -u "${{ steps.base_structures.outputs.base_dir }}/$(basename $file).append_only.base" "$(basename $file).append_only.pr" | grep "^-" | grep -v "@append_only" | grep -v "^-" | grep -v "^///" | grep -v "^//" | grep -v "^-$"; then
                echo "No deletions detected in @append_only structures in $file. Test passed."
              else
                echo "Deletions detected in @append_only structures in $file. Test failed."
                exit 1
              fi

              # Check immutable structures
              if ! diff -u "${{ steps.base_structures.outputs.base_dir }}/$(basename $file).immutable.base" "$(basename $file).immutable.pr" | grep -E "^\+[^/+]|^-[^/-]" ; then
                echo "No code changes detected in @immutable structures in $file. Test passed."
              else
                echo "Code changes detected in @immutable structures in $file. Test failed."
                exit 1
              fi
            fi
          done

  test:
    name: Tests
    runs-on: ${{ fromJSON(inputs.test-runner) }}
    timeout-minutes: 20
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials and bucket region
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Rust
        uses: ./.github/actions/rust

      - name: Get arch
        id: arch
        run: echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Run tests
        run: cargo test --package=${{ inputs.package }} --all-features --locked
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_BUCKET: multi-runner-cache-x1xibo9c
          SCCACHE_REGION: ${{ vars.AWS_REGION }}
          SCCACHE_S3_KEY_PREFIX: ${{ runner.os }}/sccache/${{ steps.arch.outputs.arch }}/linux-gnu
          
  verify_features:
    name: Verify features in ${{ inputs.package }}
    runs-on: ${{ fromJSON(inputs.test-runner) }}
    outputs:
      features: ${{ steps.list.outputs.features }}
    timeout-minutes: 30
    if: >
      inputs.package == 'rs-sdk' || 
      inputs.package == 'rs-dapi-client'
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials and bucket region
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Rust
        uses: ./.github/actions/rust

      - name: Get arch
        id: arch
        run: echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Install yq
        run: |
          mkdir -p $HOME/bin
          wget --compression=auto -q  -O $HOME/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x $HOME/bin/yq

      - name: List features
        id: list
        run: |
          set -ex
          cargo_toml="$(grep -rl --include=Cargo.toml 'name = "${{ inputs.package }}"' .)"
          echo features=$($HOME/bin/yq -oy eval '.features | keys | .[]' ${cargo_toml} | tr '\n' ' ') >> $GITHUB_ENV

      - name: Verify each feature in ${{ inputs.package }}
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_BUCKET: multi-runner-cache-x1xibo9c
          SCCACHE_REGION: ${{ vars.AWS_REGION }}
          SCCACHE_S3_KEY_PREFIX: ${{ runner.os }}/sccache/${{ steps.arch.outputs.arch }}/linux-gnu
        run: |
          echo Verify all features disabled
          cargo check --no-default-features --package "${{ inputs.package }}" --locked
          for feature in $features ;  do
            echo Verify feature $feature
            cargo check --no-default-features --package "${{ inputs.package }}"  --features=$feature  --locked
          done
