name: WASM DPP

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - v[0-9]+\.[0-9]+-dev
    paths:
      - .github/workflows/wasm-dpp.yml
      - .github/workflows/js-dpp.yml
      - .github/workflows/js-checks.yml
      - .github/workflows/rs-checks.yml
      - packages/js-dpp/**
      - packages/feature-flags-contract/**
      - packages/masternode-reward-shares-contract/**
      - packages/dpns-contract/**
      - packages/dashpay-contract/**
      - packages/wasm-dpp/**
  schedule:
    - cron: "30 4 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  js-checks:
    name: JS
    uses: ./.github/workflows/js-checks.yml
    secrets: inherit
    with:
      package: "@dashevo/wasm-dpp"
      install-browsers: true

  rs-checks:
    name: Rust
    uses: ./.github/workflows/rs-checks.yml
    with:
      package: "wasm-dpp"

  wasm-errors:
    name: WASM compilation
    runs-on: self-hosted
    timeout-minutes: 15
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "false"
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # Don't cache ./target, as it takes tons of space, use sccache instead.
          cache-targets: false
          # We set a shared key, as our cache is reusable between jobs
          shared-key: rust-cargo

      - name: Setup Rust compilation cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.1"

      - name: Compile WASM
        run: cargo check --lib --target wasm32-unknown-unknown --package=wasm-dpp
