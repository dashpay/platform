name: Release Packages

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version (i.e. v0.22.3-pre.2)'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-npm:
    name: Release NPM packages
    runs-on: ubuntu-22.04
    if: github.event_name != 'workflow_dispatch'
    needs:
      - build-rs-drive-nodejs
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Check package version matches tag
        uses: geritol/match-tag-to-package-version@0.2.0
        env:
          TAG_PREFIX: v

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Enable Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build
        env:
          CARGO_BUILD_PROFILE: release

      - name: Download prebuild artifacts
        uses: actions/download-artifact@v3
        with:
          name: prebuilds
          path: packages/rs-drive-nodejs/prebuilds

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = context.payload.release.tag_name;
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return suffix;
            } else {
              return '';
            }

      - name: Set NPM release tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: |
            const tag = context.payload.release.tag_name;
            const [, major, minor] = tag.match(/^v([0-9]+)\.([0-9]+)/);
            return (tag.includes('-') ? `${major}.${minor}-${{steps.suffix.outputs.result}}` : 'latest');

      - name: Configure NPM auth token
        run: yarn config set npmAuthToken ${{ secrets.NPM_TOKEN }}

      - name: Publish NPM packages
        run: yarn workspaces foreach --all --no-private --parallel npm publish --access public --tag ${{ steps.tag.outputs.result }}

  release-drive-docker-image:
    name: Release Drive to Docker Hub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build --filter "+@dashevo/drive"

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v3
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/drive
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image for Drive
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/js-drive/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  release-dapi-docker-image:
    name: Release DAPI to Docker Hub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build --filter "+@dashevo/dapi"

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v3
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/dapi
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/dapi/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  release-test-suite-docker-image:
    name: Release Test Suite to Docker Hub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build --filter "+@dashevo/platform-test-suite"

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v3
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/platform-test-suite
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/platform-test-suite/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  release-envoy-docker-image:
    name: Release Envoy to Docker Hub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v3
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/envoy
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image for Envoy
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/dashmate/docker/envoy/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            CARGO_BUILD_PROFILE=release

  release-dashmate-helper-docker-image:
    name: Release Dashmate helper to Docker Hub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build --filter "+dashmate"

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v3
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/dashmate-helper
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image for Dashmate helper
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/dashmate/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  build-rs-drive-nodejs:
    name: Build Drive Node.JS binding
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x86_64
            node_arch: x64
            compiler: gnu
            platform: unknown-linux
          - os: ubuntu-22.04
            arch: x86_64
            node_arch: x64
            compiler: musl
            platform: unknown-linux
          - os: ubuntu-22.04
            arch: aarch64
            node_arch: arm64
            compiler: gnu
            platform: unknown-linux
          - os: ubuntu-22.04
            arch: aarch64
            node_arch: arm64
            compiler: musl
            platform: unknown-linux
          - os: macos-11
            arch: x86_64
            platform: apple-darwin
          - os: macos-11
            arch: aarch64
            node_arch: arm64
            platform: apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Set target name
        uses: actions/github-script@v6
        id: set-target
        with:
          script: |
            let target = '${{ matrix.arch }}-${{ matrix.platform }}';

            if ('${{ matrix.compiler }}') {
              target += '-${{ matrix.compiler }}';
            }

            core.info(`Set target ${target}`);

            return target;
          result-encoding: string

      - name: Setup Rust toolchain and target
        if: ${{ runner.os == 'macOS' }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ steps.set-target.outputs.result }}

      - name: Enable Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Set LIBC argument
        uses: actions/github-script@v6
        id: set-libc-arg
        with:
          script: |
            let env = '';

            if (${{ matrix.compiler == 'musl' }}) {
              env = '-l musl'
            }

            core.info(`Set LIBC env to "${env}"`);

            return env;
          result-encoding: string

      - name: Build for Linux (x86)
        if: ${{ runner.os == 'Linux' && matrix.arch == 'x86_64' }}
        uses: docker://messense/rust-musl-cross:x86_64-musl
        with:
          workdir: /github/workspace/
          entrypoint: packages/rs-drive-nodejs/docker/build.sh
          args: -a ${{ matrix.node_arch }} -t ${{ steps.set-target.outputs.result }} ${{ steps.set-libc-arg.outputs.result }}

      - name: Build for Linux (aarch64)
        if: ${{ runner.os == 'Linux' && matrix.arch == 'aarch64' }}
        uses: docker://messense/rust-musl-cross:aarch64-musl
        with:
          workdir: /github/workspace/
          entrypoint: packages/rs-drive-nodejs/docker/build.sh
          args: -a ${{ matrix.node_arch }} -t ${{ steps.set-target.outputs.result }} ${{ steps.set-libc-arg.outputs.result }}

      - name: Build for Mac OS
        if: ${{ runner.os == 'macOS' }}
        run: yarn workspace @dashevo/rs-drive run build
        env:
          ARCH: ${{ matrix.node_arch }} # Overwrite current arch with target one
          CARGO_BUILD_TARGET: ${{ steps.set-target.outputs.result }}
          CARGO_BUILD_PROFILE: release

      - name: Upload prebuild artifacts
        uses: actions/upload-artifact@v3
        with:
          name: prebuilds
          path: packages/rs-drive-nodejs/prebuilds/

  release-dashmate:
    name: Release Dashmate packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - package_type: tarballs
            os: ubuntu-22.04
          - package_type: win
            os: ubuntu-22.04
          - package_type: deb
            os: ubuntu-22.04
          - package_type: macos
            os: macos-12
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install macOS build deps
        if: runner.os == 'macOS'
        run: |
          brew install llvm docker colima
          colima start
          echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH

      - name: Install Linux build deps
        if: runner.os == 'Linux'
        run: sudo apt-get install -y nsis

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v3
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      # Workaround for lack of yarn 3 support in oclif
      - name: Patch package-json
        run: |
          echo "$(jq '. |= .+ { "dependencies": {"debug": "^4.3.4", "lodash": "^4.17.21", "strip-ansi": "^6.0.1", "fs-extra": "^8.1" },}' package.json)" > package.json

      - name: Install dependencies
        run: yarn install
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: Build packages
        run: yarn build
        env:
          CARGO_BUILD_PROFILE: release

      - name: Create package
        run: "${GITHUB_WORKSPACE}/scripts/pack_dashmate.sh" ${{ matrix.package_type }}

      - name: Upload artifacts to action summary
        uses: actions/upload-artifact@v3
        if: github.event_name != 'release'
        with:
          name: dashmate
          path: packages/dashmate/dist/**

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v0.1.15
        if: github.event_name == 'release'
        with:
          files: packages/dashmate/dist/**
