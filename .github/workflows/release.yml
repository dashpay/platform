name: Release Packages

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version (i.e. v0.22.3-pre.2)'
        required: true

jobs:
  release-npm:
    name: Release NPM packages
    runs-on: ubuntu-20.04
    if: github.event_name != 'workflow_dispatch'
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Check package version matches tag
        uses: geritol/match-tag-to-package-version@0.2.0
        env:
          TAG_PREFIX: v

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v2
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = context.payload.release.tag_name;
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return suffix;
            } else {
              return '';
            }

      - name: Set NPM release tag
        uses: actions/github-script@v5
        id: tag
        with:
          result-encoding: string
          script: |
            const tag = context.payload.release.tag_name;
            const [, major, minor] = tag.match(/^v([0-9]+)\.([0-9]+)/);
            return (tag.includes('-') ? `${major}.${minor}-${{steps.suffix.outputs.result}}` : 'latest');

      - name: Configure NPM auth token
        run: yarn config set npmAuthToken ${{ secrets.NPM_TOKEN }}

      - name: Publish NPM packages
        run: yarn workspaces foreach --all --no-private --parallel npm publish --access public --tag ${{ steps.tag.outputs.result }}

  release-drive-docker-image:
    name: Release Drive to Docker Hub
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v2
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build --filter "+@dashevo/drive"

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.7.0
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v2
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/drive
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image for Drive
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/js-drive/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  release-dapi-docker-image:
    name: Release DAPI to Docker Hub
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v2
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build --filter "+@dashevo/dapi"

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.7.0
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v2
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/dapi
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/dapi/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  release-test-suite-docker-image:
    name: Release Test Suite to Docker Hub
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Enable corepack
        run: corepack enable

      - name: Disable NPM audit
        run: npm config set audit false

      - name: Enable Yarn unplugged modules cache
        uses: actions/cache@v2
        with:
          path: '.yarn/unplugged'
          key: ${{ runner.os }}-yarn-unplugged-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-unplugged-

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn build --filter "+@dashevo/platform-test-suite"

      - name: Set up QEMU to run multi-arch builds
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker BuildX
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.7.0
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Enable buildkit cache
        uses: actions/cache@v2
        with:
          path: /tmp/buildkit-cache/buildkit-state.tar
          key: ${{ runner.os }}-buildkit-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildkit-

      - name: Load buildkit state from cache
        uses: dashevo/gh-action-cache-buildkit-state@v1
        with:
          builder: buildx_buildkit_${{ steps.buildx.outputs.name }}0
          cache-path: /tmp/buildkit-cache
          cache-max-size: 3g

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag
        uses: actions/github-script@v6
        id: tag
        with:
          result-encoding: string
          script: "return context.eventName === 'workflow_dispatch' ? core.getInput('tag') : context.payload.release.tag_name;"

      - name: Set suffix
        uses: actions/github-script@v6
        id: suffix
        with:
          result-encoding: string
          script: |
            const fullTag = '${{steps.tag.outputs.result}}';
            if (fullTag.includes('-')) {
              const [, fullSuffix] = fullTag.split('-');
              const [suffix] = fullSuffix.split('.');
              return `-${suffix}`;
            } else {
              return '';
            }

      - name: Set Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: dashpay/platform-test-suite
          tags: |
            type=match,pattern=v(\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(\d+.\d+.\d+),group=1,value=${{steps.tag.outputs.result}}
            type=match,pattern=v(.*),group=1,value=${{steps.tag.outputs.result}},suffix=
          flavor: |
            suffix=${{ steps.suffix.outputs.result }},onlatest=true
            latest=${{ github.event_name == 'release' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./packages/platform-test-suite/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
