name: Build and Test WASM SDK

on:
  pull_request:
    paths:
      - 'packages/wasm-sdk/**'
      - 'packages/rs-sdk/**'
      - 'packages/rs-drive-proof-verifier/**'
      - 'packages/rs-platform-value/**'
      - 'packages/rs-dpp/**'
      - 'packages/rs-drive/src/verify/**'
      - 'packages/rs-context-provider/**'
  push:
    branches:
      - main
      - master
      - 'v[0-9]+.[0-9]+-dev'
      - 'v[0-9]+.[0-9]+-dev-sdk'
    paths:
      - 'packages/wasm-sdk/**'
      - 'packages/rs-sdk/**'
      - 'packages/rs-drive-proof-verifier/**'
      - 'packages/rs-platform-value/**'
      - 'packages/rs-dpp/**'
      - 'packages/rs-drive/src/verify/**'
      - 'packages/rs-context-provider/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-C lto=off"
  CARGO_PROFILE_RELEASE_LTO: false
  CI: true

jobs:
  build-wasm-sdk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache and install protoc (v32.0)
        uses: actions/cache@v4
        id: cache-protoc
        with:
          path: |
            ${{ env.HOME }}/.local/protoc-32.0/bin
            ${{ env.HOME }}/.local/protoc-32.0/include
          key: protoc/32.0/${{ runner.os }}/x86_64

      - name: Install protoc v32.0 if cache miss
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          PROTOC_DIR="${HOME}/.local/protoc-32.0"
          mkdir -p "$PROTOC_DIR"
          curl -fsSL -o /tmp/protoc.zip \
            "https://github.com/protocolbuffers/protobuf/releases/download/v32.0/protoc-32.0-linux-x86_64.zip"
          unzip -o /tmp/protoc.zip -d "$PROTOC_DIR"

      - name: Export protoc v32.0 to PATH
        run: |
          echo "${HOME}/.local/protoc-32.0/bin" >> $GITHUB_PATH
          echo "PROTOC=${HOME}/.local/protoc-32.0/bin/protoc" >> $GITHUB_ENV

      - name: Install clang and llvm
        run: |
          sudo apt update -qq
          sudo apt install -qq --yes clang llvm

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-wasm-sdk-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wasm-sdk-

      - name: Install wasm-pack
        run: |
          if ! command -v wasm-pack &> /dev/null; then
            echo "Installing wasm-pack..."
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          else
            echo "wasm-pack already installed"
          fi

      - name: Cache and install wasm-opt (Binaryen)
        uses: actions/cache@v4
        id: cache-binaryen
        with:
          path: ${{ env.HOME }}/.cache/binaryen/version_121
          key: binaryen/version_121/${{ runner.os }}/x86_64

      - name: Install wasm-opt if cache miss
        if: steps.cache-binaryen.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          mkdir -p "${HOME}/.cache/binaryen"
          curl -fsSL -o /tmp/binaryen.tar.gz \
            "https://github.com/WebAssembly/binaryen/releases/download/version_121/binaryen-version_121-x86_64-linux.tar.gz"
          tar -xzf /tmp/binaryen.tar.gz -C "${HOME}/.cache/binaryen"
          mv "${HOME}/.cache/binaryen/binaryen-version_121" "${HOME}/.cache/binaryen/version_121"

      - name: Export wasm-opt to PATH
        run: |
          echo "${HOME}/.cache/binaryen/version_121/bin" >> $GITHUB_PATH

      - name: Build WASM SDK
        working-directory: packages/wasm-sdk
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Verify build output
        working-directory: packages/wasm-sdk
        run: |
          echo "Checking build output..."
          ls -lah pkg/
          # Verify required files exist
          test -f pkg/wasm_sdk_bg.wasm
          test -f pkg/optimized.wasm
          test -f pkg/wasm_sdk.js
          test -f pkg/wasm_sdk.d.ts
          test -f pkg/package.json
          echo "Build verification successful!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-sdk-build
          path: packages/wasm-sdk/pkg/
          retention-days: 7

  test-wasm-sdk:
    runs-on: ubuntu-latest
    needs: build-wasm-sdk

    steps:
      - name: Checkout test directory only
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            packages/wasm-sdk/test
          sparse-checkout-cone-mode: false

      - name: Download WASM SDK build artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-sdk-build
          path: packages/wasm-sdk/pkg/

      - name: Verify WASM SDK artifacts
        working-directory: packages/wasm-sdk
        run: |
          echo "Verifying downloaded WASM SDK artifacts..."
          ls -lah pkg/

          # Verify all required files exist
          required_files=(
            "pkg/wasm_sdk_bg.wasm"
            "pkg/optimized.wasm"
            "pkg/wasm_sdk.js"
            "pkg/wasm_sdk.d.ts"
            "pkg/package.json"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

          echo "🎉 All WASM SDK artifacts verified successfully!"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install test dependencies
        working-directory: packages/wasm-sdk/test
        run: |
          if [ -f package.json ]; then
            npm install
          fi

      - name: Run comprehensive test suite
        working-directory: packages/wasm-sdk
        run: |
          echo "Running WASM SDK comprehensive test suite..."
          set -o pipefail && node test/run-all-tests.mjs | tee test-output.log

      - name: Generate job summary
        if: always()
        working-directory: packages/wasm-sdk
        run: |
          echo "## 🧪 WASM SDK Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract test results from the test output
          if [ -f test-output.log ]; then
            # Extract overall summary
            total_tests=$(grep -o "Total Tests: [0-9]*" test-output.log | grep -o "[0-9]*" || echo "0")
            total_passed=$(grep -o "Passed: [0-9]*" test-output.log | grep -o "[0-9]*" || echo "0")
            total_failed=$(grep -o "Failed: [0-9]*" test-output.log | grep -o "[0-9]*" || echo "0")
            total_time=$(grep -o "Time: [0-9]*\.[0-9]*s" test-output.log | grep -o "[0-9]*\.[0-9]*" || echo "0.00")

            # Display overall summary
            echo "**$total_tests** tests • **$total_passed** passed • **$total_failed** failed • **${total_time}s**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$total_failed" != "0" ]; then
              echo "❌ **Some tests failed** - Check the detailed test report for specifics" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **All tests passed**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ No test output captured" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Artifacts**: WASM SDK build files and detailed test report available for download" >> $GITHUB_STEP_SUMMARY

      - name: Upload test report
        if: always() && hashFiles('packages/wasm-sdk/test/test-report.html') != ''
        uses: actions/upload-artifact@v4
        with:
          name: wasm-sdk-test-report
          path: packages/wasm-sdk/test/test-report.html
          retention-days: 7
