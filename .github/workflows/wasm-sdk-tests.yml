name: WASM SDK Tests

on:
  pull_request:
    paths:
      - 'packages/wasm-sdk/**'
      - 'packages/rs-sdk/**'
      - 'packages/rs-drive-proof-verifier/**'
      - 'packages/rs-platform-value/**'
      - 'packages/rs-dpp/**'
      - 'packages/rs-drive/src/verify/**'
      - 'packages/rs-context-provider/**'
  push:
    branches:
      - main
      - master
      - 'v[0-9]+.[0-9]+-dev'
      - 'v[0-9]+.[0-9]+-dev-sdk'
    paths:
      - 'packages/wasm-sdk/**'
      - 'packages/rs-sdk/**'
      - 'packages/rs-drive-proof-verifier/**'
      - 'packages/rs-platform-value/**'
      - 'packages/rs-dpp/**'
      - 'packages/rs-drive/src/verify/**'
      - 'packages/rs-context-provider/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-C lto=off"
  CARGO_PROFILE_RELEASE_LTO: false

jobs:
  build-and-test-wasm-sdk:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          
      - name: Install protoc
        run: |
          curl -Lo /tmp/protoc.zip \
            "https://github.com/protocolbuffers/protobuf/releases/download/v27.3/protoc-27.3-linux-x86_64.zip"
          unzip -o /tmp/protoc.zip -d ${HOME}/.local
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          export PATH="${PATH}:${HOME}/.local/bin"
          
      - name: Install clang
        run: |
          sudo apt update -qq
          sudo apt install -qq --yes clang llvm
          
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-wasm-sdk-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wasm-sdk-
            
      - name: Install wasm-pack
        run: |
          if ! command -v wasm-pack &> /dev/null; then
            echo "Installing wasm-pack..."
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          else
            echo "wasm-pack already installed"
          fi
          
      - name: Install wasm-opt
        run: |
          if ! command -v wasm-opt &> /dev/null; then
            echo "Installing wasm-opt from GitHub releases..."
            # Get the latest release version
            WASM_OPT_VERSION=$(curl -s https://api.github.com/repos/WebAssembly/binaryen/releases/latest | grep -oP '"tag_name": "\K[^"]+')
            echo "Installing wasm-opt version: $WASM_OPT_VERSION"
            
            # Detect architecture
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ]; then
              BINARYEN_ARCH="x86_64"
            elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
              BINARYEN_ARCH="aarch64"
            else
              echo "Unsupported architecture: $ARCH"
              exit 1
            fi
            
            echo "Detected architecture: $ARCH, using binaryen arch: $BINARYEN_ARCH"
            
            # Download and extract binaryen
            curl -L "https://github.com/WebAssembly/binaryen/releases/download/${WASM_OPT_VERSION}/binaryen-${WASM_OPT_VERSION}-${BINARYEN_ARCH}-linux.tar.gz" -o /tmp/binaryen.tar.gz
            tar -xzf /tmp/binaryen.tar.gz -C /tmp
            
            # Move wasm-opt to PATH
            sudo mv /tmp/binaryen-${WASM_OPT_VERSION}/bin/wasm-opt /usr/local/bin/
            sudo chmod +x /usr/local/bin/wasm-opt
            
            # Clean up
            rm -rf /tmp/binaryen.tar.gz /tmp/binaryen-${WASM_OPT_VERSION}
            
            echo "wasm-opt installed successfully"
          else
            echo "wasm-opt already installed"
          fi
          
      - name: Build WASM SDK
        working-directory: packages/wasm-sdk
        run: |
          chmod +x build.sh
          ./build.sh
          
      - name: Verify build output
        working-directory: packages/wasm-sdk
        run: |
          echo "Checking build output..."
          ls -lah pkg/
          # Verify required files exist
          test -f pkg/wasm_sdk_bg.wasm
          test -f pkg/optimized.wasm
          test -f pkg/wasm_sdk.js
          test -f pkg/wasm_sdk.d.ts
          test -f pkg/package.json
          echo "Build verification successful!"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install test dependencies
        working-directory: packages/wasm-sdk
        run: |
          echo "Installing WASM SDK test dependencies..."
          npm install
          
      - name: Run unit tests
        working-directory: packages/wasm-sdk
        run: |
          echo "Running WASM SDK unit tests..."
          npm run test:unit
          
      - name: Run integration tests
        working-directory: packages/wasm-sdk
        run: |
          echo "Running WASM SDK integration tests..."
          npm run test:integration || echo "Integration tests completed with status $?"
          
      - name: Run all tests with coverage
        working-directory: packages/wasm-sdk
        run: |
          echo "Running WASM SDK tests with coverage..."
          npm run test:coverage || echo "Coverage tests completed with status $?"
          
      - name: Run legacy tests (fallback)
        working-directory: packages/wasm-sdk
        run: |
          echo "Running legacy .mjs test files as fallback..."
          for test_file in test/*.test.mjs; do
            if [ -f "$test_file" ]; then
              echo "Running $test_file..."
              node "$test_file" || echo "Legacy test $test_file completed with status $?"
            fi
          done
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wasm-sdk-test-results
          path: packages/wasm-sdk/test-results/
          retention-days: 7
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-sdk-build
          path: packages/wasm-sdk/pkg/
          retention-days: 7