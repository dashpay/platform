name: Publish WASM SDK Alpha

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to publish'
        required: true
        default: 'alpha'
        type: choice
        options:
        - alpha
        - beta
        - stable
  push:
    tags:
      - 'wasm-sdk-v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'dashpay/platform'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
    - name: Build WASM SDK
      working-directory: packages/wasm-sdk
      run: |
        chmod +x build-optimized.sh
        ./build-optimized.sh
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Audit Rust dependencies
      working-directory: packages/wasm-sdk
      run: cargo audit --deny warnings
      
    - name: Audit npm package security
      working-directory: packages/wasm-sdk/pkg
      run: |
        npm audit --audit-level=moderate
        echo "‚úÖ npm security audit passed"
      
    - name: Validate package integrity
      working-directory: packages/wasm-sdk/pkg
      run: |
        # Check required files exist
        test -f dash_wasm_sdk_bg.wasm
        test -f dash_wasm_sdk.js
        test -f dash_wasm_sdk.d.ts
        test -f package.json
        
        # Validate package.json structure
        node -e "
          const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8'));
          if (!pkg.name || !pkg.version || !pkg.main || !pkg.types) {
            throw new Error('Missing required package.json fields');
          }
          console.log('Package validation passed');
        "
        
    - name: Test package installation
      working-directory: packages/wasm-sdk/pkg
      run: |
        # Pack the package locally
        npm pack
        
        # Test installation in temp directory
        mkdir -p /tmp/test-install
        cd /tmp/test-install
        npm init -y
        npm install $GITHUB_WORKSPACE/packages/wasm-sdk/pkg/dashevo-dash-wasm-sdk-*.tgz
        
        # Test basic import
        node -e "
          const sdk = require('@dashevo/dash-wasm-sdk');
          console.log('Package import test passed');
        "
        
    - name: Publish to npm (alpha)
      if: contains(github.event.inputs.version_type, 'alpha') || contains(github.ref, 'alpha')
      working-directory: packages/wasm-sdk/pkg
      run: npm publish --tag alpha --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Publish to npm (beta)
      if: contains(github.event.inputs.version_type, 'beta') || contains(github.ref, 'beta')
      working-directory: packages/wasm-sdk/pkg
      run: npm publish --tag beta --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Publish to npm (stable)
      if: contains(github.event.inputs.version_type, 'stable') || (!contains(github.ref, 'alpha') && !contains(github.ref, 'beta'))
      working-directory: packages/wasm-sdk/pkg
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Generate release notes
      working-directory: packages/wasm-sdk
      run: |
        node scripts/generate-release-notes.js > release-notes.md
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        cat release-notes.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: wasm-sdk-v${{ github.event.inputs.version_type || 'alpha' }}
        release_name: WASM SDK ${{ github.event.inputs.version_type || 'alpha' }} Release
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(github.event.inputs.version_type, 'alpha') || contains(github.event.inputs.version_type, 'beta') }}
        
    - name: Upload CHANGELOG
      if: steps.create_release.outputs.upload_url
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: packages/wasm-sdk/CHANGELOG.md
        asset_name: CHANGELOG.md
        asset_content_type: text/markdown
        
    - name: Verify CDN availability
      run: |
        echo "üîÑ Waiting for CDN propagation..."
        sleep 30
        
        # Get package version
        PKG_VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('packages/wasm-sdk/pkg/package.json')).version)")
        
        # Test unpkg
        echo "üåê Testing unpkg CDN..."
        UNPKG_URL="https://unpkg.com/@dashevo/dash-wasm-sdk@${PKG_VERSION}/package.json"
        curl -f "$UNPKG_URL" > /dev/null && echo "‚úÖ unpkg: Available" || echo "‚è≥ unpkg: Not yet available"
        
        # Test jsDelivr
        echo "üåê Testing jsDelivr CDN..."
        JSDELIVR_URL="https://cdn.jsdelivr.net/npm/@dashevo/dash-wasm-sdk@${PKG_VERSION}/package.json"
        curl -f "$JSDELIVR_URL" > /dev/null && echo "‚úÖ jsDelivr: Available" || echo "‚è≥ jsDelivr: Not yet available"
        
        echo "‚ÑπÔ∏è  CDN propagation can take 5-10 minutes"
        echo "‚ÑπÔ∏è  Check CDN_USAGE.md for usage examples"