name: Package RS Tests

on:
  workflow_call:
    inputs:
      package:
        description: The package name to run tests for
        type: string
        required: true

jobs:
  lint:
    name: Linting
    runs-on: self-hosted
    timeout-minutes: 15
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "false"
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          toolchain: stable
          components: clippy

      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # Don't cache ./target, as it takes tons of space, use sccache instead.
          cache-targets: false
          # We set a shared key, as our cache is reusable between jobs
          shared-key: rust-cargo

      - name: Setup Rust compilation cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.1"

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  formatting:
    name: Formatting
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          toolchain: stable
          components: rustfmt

      - name: Check formatting
        run: exit `cargo fmt --check --package=${{ inputs.package }} | wc -l`

  compile:
    name: Compilation errors
    runs-on: self-hosted
    timeout-minutes: 15
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "false"
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # Don't cache ./target, as it takes tons of space, use sccache instead.
          cache-targets: false
          # We set a shared key, as our cache is reusable between jobs
          shared-key: rust-cargo

      - name: Setup Rust compilation cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.1"

      - run: cargo check --package=${{ inputs.package }}

  check_structure_changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout base commit
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Get all changed Rust files
        id: files
        run: |
          gh pr view https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }} --json files --jq "[.files[].path] | map(select(test(\"packages/${{ inputs.package }}/.*.rs$\")))" > files.json
          echo "::set-output name=files::$(cat files.json)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save structures
        id: base_structures
        run: |
          mkdir base_structures
          for file in $(jq -r '.[]' <<< "${{ steps.files.outputs.files }}"); do
            if [[ $file == *.rs ]]; then
              awk '/@append_only/,/}/' $file > "base_structures/$(basename $file).base"
            fi
          done
          echo "::set-output name=base_dir::$(pwd)/base_structures"

      - name: Checkout PR commit
        uses: actions/checkout@v2

      - name: Check structure changes
        run: |
          for file in $(jq -r '.[]' <<< "${{ steps.files.outputs.files }}"); do
            if [[ $file == *.rs ]]; then
              awk '/@append_only/,/}/' $file > "$(basename $file).pr"
              if ! diff -u "${{ steps.base_structures.outputs.base_dir }}/$(basename $file).base" "$(basename $file).pr" | grep "^-" | grep -v "@append_only" | grep -v "^-" | grep -v "^///" | grep -v "^//" | grep -v "^-$"; then
                echo "No deletions detected in @append_only structures in $file. Test passed."
              else
                echo "Deletions detected in @append_only structures in $file. Test failed."
                exit 1
              fi
            fi
          done

  test:
    name: Tests
    runs-on: self-hosted
    timeout-minutes: 15
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "false"
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # Don't cache ./target, as it takes tons of space, use sccache instead.
          cache-targets: false
          # We set a shared key, as our cache is reusable between jobs
          shared-key: rust-cargo

      - name: Setup Rust compilation cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.1"

      - name: Run tests
        run: cargo test --package=${{ inputs.package }} --all-features
