name: rs-features

on:
  workflow_call:
    inputs:
      package:
        description: Path to Cargo.toml, for example packages/rs-dpp/Cargo.toml
        type: string
        required: true
      test-runner:
        description: Runner for tests. Must be JSON valid string.
        type: string
        default: '[ "self-hosted", "linux", "arm64", "ubuntu-platform" ]'

  workflow_dispatch:
    inputs:
      package:
        description: Path to Cargo.toml, for example packages/rs-dpp/Cargo.toml
        type: string
        required: true
      test-runner:
        description: Runner for tests. Must be JSON valid string.
        type: string
        default: '[ "self-hosted", "linux", "arm64", "ubuntu-platform" ]'

jobs:
  verify_features:
    name: Verify features in ${{ inputs.package }}
    runs-on: ${{ fromJSON(inputs.test-runner) }}
    outputs:
      features: ${{ steps.list.outputs.features }}
    timeout-minutes: 30
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials and bucket region
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Rust
        uses: ./.github/actions/rust

      - name: Get arch
        id: arch
        run: echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Install yq
        run: |
          mkdir -p $HOME/bin
          wget --compression=auto -q  -O $HOME/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x $HOME/bin/yq

      - name: List features
        id: list
        run: |
          set -ex
          cargo_toml="$(grep -rl --include=Cargo.toml 'name = "${{ inputs.package }}"' .)"
          echo features=$($HOME/bin/yq -oy eval '.features | keys | .[]' ${cargo_toml} | tr '\n' ' ') >> $GITHUB_ENV

      - name: Verify each feature in ${{ inputs.package }}
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_BUCKET: multi-runner-cache-x1xibo9c
          SCCACHE_REGION: ${{ vars.AWS_REGION }}
          SCCACHE_S3_KEY_PREFIX: ${{ runner.os }}/sccache/${{ steps.arch.outputs.arch }}/linux-gnu
        run: |
          echo Verify all features disabled
          cargo check --no-default-features --package "${{ inputs.package }}" --locked
          for feature in $features ;  do
            echo Verify feature $feature
            cargo check --no-default-features --package "${{ inputs.package }}"  --features=$feature  --locked
          done
