[package]
name = "dash-sdk"
version = "1.2.0-rc.1"
edition = "2021"

[dependencies]
arc-swap = { version = "1.7.1" }
dpp = { path = "../rs-dpp", default-features = false, features = [
  "dash-sdk-features",
] }
dapi-grpc = { path = "../dapi-grpc" }
rs-dapi-client = { path = "../rs-dapi-client", default-features = false }
drive = { path = "../rs-drive", default-features = false, features = [
  "verify",
] }
drive-proof-verifier = { path = "../rs-drive-proof-verifier" }
dapi-grpc-macros = { path = "../rs-dapi-grpc-macros" }
thiserror = "1.0.58"
tokio = { version = "1.36.0", features = ["macros"] }
tokio-util = { version = "0.7.10" }
async-trait = { version = "0.1.79" }
http = { version = "0.2.12" }
ciborium = { git = "https://github.com/qrayven/ciborium", branch = "feat-ser-null-as-undefined" }
serde = { version = "1.0.197", default-features = false, features = [
  "rc",
], optional = true }
serde_json = { version = "1.0", features = ["preserve_order"], optional = true }
tracing = { version = "0.1.40" }
hex = { version = "0.4.3"}
dotenvy = { version = "0.15.7", optional = true }
envy = { version = "0.4.2", optional = true }
futures = { version = "0.3.30" }
derive_more = { version = "0.99.17" }
# dashcore-rpc is only needed for core rpc; TODO remove once we have correct core rpc impl
dashcore-rpc = { git = "https://github.com/dashpay/rust-dashcore-rpc", tag = "v0.15.4" }
lru = { version = "0.12.3", optional = true }
bip37-bloom-filter = { git = "https://github.com/dashpay/rs-bip37-bloom-filter", branch = "develop" }
pollster = { version = "0.3.0" }

[dev-dependencies]
tokio = { version = "1.36.0", features = ["macros", "rt-multi-thread"] }
rs-dapi-client = { path = "../rs-dapi-client", features = ["mocks"] }
base64 = { version = "0.22.1" }
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
dpp = { path = "../rs-dpp", features = [
  "client",
  "validation",
  "random-documents",
] }
data-contracts = { path = "../data-contracts" }
tokio-test = { version = "0.4.4" }
clap = { version = "4.5.4", features = ["derive"] }
sanitize-filename = { version = "0.5.0" }
chrono = { version = "0.4.38" }
test-case = { version = "3.3.1" }

[features]
default = ["mocks", "offline-testing"]

mocks = [
  "dep:serde",
  "dep:serde_json",
  "rs-dapi-client/mocks",
  "rs-dapi-client/dump",
  "dpp/document-cbor-conversion",
  "dpp/random-identities",
  "drive/serde",
  "drive-proof-verifier/mocks",
  "dep:dotenvy",
  "dep:envy",
  "dep:lru",
]

# Run integration tests using test vectors from `tests/vectors/` instead of connecting to live Dash Platform.
#
# This feature is enabled by default to allow testing without connecting to the Dash Platform as
# part of CI/CD workflows.
#
# If both `offline-testing` and `network-testing` are enabled, "offline-testing" will take precedence.
offline-testing = ["mocks"]

# Run integration tests using a live Dash Platform network.
#
# Requires configuration of Dash Platform connectivity.
# See [README.md] for more details.
#
# If both `offline-testing` and `network-testing` are enabled, "offline-testing" will take precedence.
network-testing = ["mocks"]

# Generate test vectors for offline tests.
#
# This will run tests in `network-testing` mode and
# dump all requests and responses to `tests/vectors/`,
# so that they can be used later for `offline-testing`.
generate-test-vectors = ["network-testing"]

# Have the system data contracts inside the dpp crate

system-data-contracts = ["dpp/data-contracts"]

[[example]]

name = "read_contract"
required-features = ["mocks"]
