[package]
name = "dash-sdk"
version = "2.1.0-dev.3"
edition = "2021"

[dependencies]

arc-swap = { version = "1.7.1" }
backon = { version = "1.2", default-features = false }
chrono = { version = "0.4.38" }
dpp = { path = "../rs-dpp", default-features = false, features = [
  "dash-sdk-features",
] }

dapi-grpc = { path = "../dapi-grpc", default-features = false }
rs-dapi-client = { path = "../rs-dapi-client", default-features = false }
drive = { path = "../rs-drive", default-features = false, features = [
  "verify",
] }

drive-proof-verifier = { path = "../rs-drive-proof-verifier", default-features = false }
dash-context-provider = { path = "../rs-context-provider", default-features = false }
dapi-grpc-macros = { path = "../rs-dapi-grpc-macros" }
http = { version = "1.1" }
rustls-pemfile = { version = "2.0.0" }
thiserror = "2.0.12"
tokio = { version = "1.40", features = ["macros", "time"] }
tokio-util = { version = "0.7.12" }
async-trait = { version = "0.1.83" }
ciborium = { version = "0.2.2" }
serde = { version = "1.0.219", default-features = false, features = [
  "rc",
], optional = true }
serde_json = { version = "1.0", features = ["preserve_order"], optional = true }
tracing = { version = "0.1.40" }
hex = { version = "0.4.3" }
dotenvy = { version = "0.15.7", optional = true }
envy = { version = "0.4.2", optional = true }
futures = { version = "0.3.30" }
derive_more = { version = "1.0", features = ["from"] }
# dashcore-rpc is only needed for core rpc; TODO remove once we have correct core rpc impl
dashcore-rpc = { git = "https://github.com/dashpay/rust-dashcore", rev = "a86e1cd7b95910ef5ab43c75afa27c102a89cc54" }
lru = { version = "0.12.5", optional = true }
bip37-bloom-filter = { git = "https://github.com/dashpay/rs-bip37-bloom-filter", branch = "develop" }
zeroize = { version = "1.8", features = ["derive"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { version = "1.40", features = ["macros", "time", "rt-multi-thread"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
js-sys = "0.3"

[dev-dependencies]
rs-dapi-client = { path = "../rs-dapi-client" }
drive-proof-verifier = { path = "../rs-drive-proof-verifier" }
tokio = { version = "1.40", features = ["macros", "rt-multi-thread"] }
base64 = { version = "0.22.1" }
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
dpp = { path = "../rs-dpp", default-features = false, features = [
  "client",
  "validation",
  "random-documents",
] }
tokio-test = { version = "0.4.4" }
clap = { version = "4.5.4", features = ["derive"] }
sanitize-filename = { version = "0.6.0" }
test-case = { version = "3.3.1" }
assert_matches = "1.5.0"

[features]
# TODO: remove mocks from default features
default = [
  "mocks",
  "network-testing",
  "dapi-grpc/client",
  "token_reward_explanations",
]

mocks = [
  "dep:serde",
  "dep:serde_json",
  "rs-dapi-client/mocks",
  "rs-dapi-client/dump",
  "dpp/document-cbor-conversion",
  "dpp/random-identities",
  "dpp/fixtures-and-mocks",
  "drive/serde",
  "drive-proof-verifier/mocks",
  "dep:dotenvy",
  "dep:envy",
  "dep:lru",
  "zeroize/serde",
]

# Run integration tests using test vectors from `tests/vectors/` instead of connecting to live Dash Platform.
#
# This feature is enabled by default to allow testing without connecting to the Dash Platform as
# part of CI/CD workflows.
#
# If both `offline-testing` and `network-testing` are enabled, "offline-testing" will take precedence.
offline-testing = ["mocks"]

# Run integration tests using a live Dash Platform network.
#
# Requires configuration of Dash Platform connectivity.
# See [README.md] for more details.
#
# Without this feature enabled, tests will use test vectors from `tests/vectors/` instead of connecting to live
# Dash Platform.
#
# If both `offline-testing` and `network-testing` are enabled, "offline-testing" will take precedence.
network-testing = ["mocks"]

# Generate test vectors for offline tests.
#
# This will run tests in `network-testing` mode and
# dump all requests and responses to `tests/vectors/`,
# so that they can be used later for `offline-testing`.
generate-test-vectors = ["network-testing"]

# Have the system data contracts inside the dpp crate

# All system contracts (default behavior)
all-system-contracts = ["dpp/all-system_contracts"]

# Individual contract features - these enable specific contracts in DPP
withdrawals-contract = ["dpp/withdrawals-contract"]
dpns-contract = ["dpp/dpns-contract"]
dashpay-contract = ["dpp/dashpay-contract"]
wallet-utils-contract = ["dpp/wallet-utils-contract"]
token-history-contract = ["dpp/token-history-contract"]
keywords-contract = ["dpp/keywords-contract"]

token_reward_explanations = ["dpp/token-reward-explanations"]

[[example]]

name = "read_contract"
required-features = ["mocks"]

[lib]
crate-type = ["cdylib", "rlib"]
