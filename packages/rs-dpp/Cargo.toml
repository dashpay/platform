[package]
name = "dpp"
version = "2.1.0-rc.1"
edition = "2021"
rust-version.workspace = true
authors = [
  "Anton Suprunchuk <anton.suprunchuk@gmail.com>",
  "Samuel Westrich <sam@dash.org>",
  "Ivan Shumkov <ivan@shumkov.ru>",
  "Djavid Gabibiyan <djavid@dash.org>",
  "Igor Markin <igor.markin@dash.org>",
]

[dependencies]
anyhow = { version = "1.0.81" }
async-trait = { version = "0.1.79" }
base64 = "0.22.1"
bs58 = "0.5"
byteorder = { version = "1.4" }
chrono = { version = "0.4.35", default-features = false, features = [
  "wasmbind",
  "clock",
] }
chrono-tz = { version = "0.8", optional = true }
ciborium = { version = "0.2.2", optional = true }
dashcore = { git = "https://github.com/dashpay/rust-dashcore", tag = "v0.40.0", features = [
  "std",
  "secp-recovery",
  "rand",
  "signer",
  "serde",
], default-features = false }
key-wallet = { git = "https://github.com/dashpay/rust-dashcore", tag = "v0.40.0", optional = true }
key-wallet-manager = { git = "https://github.com/dashpay/rust-dashcore", tag = "v0.40.0", optional = true }
dash-spv = { git = "https://github.com/dashpay/rust-dashcore", tag = "v0.40.0", optional = true }
dashcore-rpc = { git = "https://github.com/dashpay/rust-dashcore", tag = "v0.40.0", optional = true }

env_logger = { version = "0.11" }
getrandom = { version = "0.2", features = ["js"] }

hex = { version = "0.4" }
integer-encoding = { version = "4.0.0" }
itertools = { version = "0.13" }
jsonschema = { git = "https://github.com/dashpay/jsonschema-rs", branch = "configure_regexp", default-features = false, features = [
  "draft202012",
], optional = true }
lazy_static = { version = "1.4" }
num_enum = "0.7"
bincode = { version = "=2.0.0-rc.3", features = ["serde"] }
bincode_derive = { version = "=2.0.0-rc.3" }
rand = { version = "0.8.5", features = ["small_rng"] }
regex = { version = "1.10.4" }
serde = { version = "1.0.219", features = ["derive"] }
serde_json = { version = "1.0", features = ["preserve_order"] }
serde_repr = { version = "0.1.7" }
sha2 = { version = "0.10" }
thiserror = { version = "2.0.12" }
data-contracts = { path = "../data-contracts", optional = true, default-features = false }
platform-value = { path = "../rs-platform-value" }
platform-version = { path = "../rs-platform-version" }
platform-versioning = { path = "../rs-platform-versioning" }
platform-serialization = { path = "../rs-platform-serialization" }
platform-serialization-derive = { path = "../rs-platform-serialization-derive" }
derive_more = { version = "1.0", features = ["from", "display", "try_into"] }
nohash-hasher = "0.2.0"
rust_decimal = { version = "1.29.1", optional = true }
rust_decimal_macros = { version = "1.29.1", optional = true }
indexmap = { version = "2.7.0", features = ["serde"] }
strum = { version = "0.26", features = ["derive"] }
json-schema-compatibility-validator = { path = '../rs-json-schema-compatibility-validator', optional = true }
once_cell = "1.19.0"
tracing = { version = "0.1.41" }

[dev-dependencies]
tokio = { version = "1.40", features = ["full"] }
pretty_assertions = { version = "1.4.1" }
dpp = { path = ".", default-features = false, features = [
  "all_features_without_client",
  "token-reward-explanations",
] }
assert_matches = "1.5.0"
once_cell = "1.7"
env_logger = { version = "0.11.8" }
log = { version = "0.4.27" }

[features]
default = ["state-transitions"]
core_bincode = ["dashcore/bincode"]
core_verification = ["dashcore/message_verification"]
core_quorum_validation = ["dashcore/quorum_validation"]
core_key_wallet = ["dep:key-wallet"]
core_key_wallet_bincode = ["dep:key-wallet", "key-wallet/bincode"]
core_key_wallet_bip_38 = ["dep:key-wallet", "key-wallet/bip38"]
core_key_wallet_manager = ["dep:key-wallet-manager"]
core_key_wallet_serde = ["dep:key-wallet", "key-wallet/serde"]
core_spv = ["dep:dash-spv"]
core_rpc_client = ["dep:dashcore-rpc"]
bls-signatures = ["dashcore/bls"]
ed25519-dalek = ["dashcore/eddsa"]
all_features = [
  "json-object",
  "all-system_contracts",
  "state-transitions",
  "extended-document",
  "bls-signatures",
  "cbor",
  "validation",
  "identity-hashing",
  "identity-serialization",
  "ciborium",
  "core-types",
  "core-types-serialization",
  "core-types-serde-conversion",
  "document-serde-conversion",
  "document-value-conversion",
  "document-json-conversion",
  "document-cbor-conversion",
  "data-contract-serde-conversion",
  "data-contract-value-conversion",
  "data-contract-json-conversion",
  "data-contract-cbor-conversion",
  "identity-serde-conversion",
  "identity-value-conversion",
  "identity-json-conversion",
  "identity-cbor-conversion",
  "index-serde-conversion",
  "state-transition-serde-conversion",
  "state-transition-value-conversion",
  "state-transition-json-conversion",
  "state-transition-validation",
  "state-transition-signing",
  "state-transitions",
  "factories",
  "fixtures-and-mocks",
  "random-public-keys",
  "random-identities",
  "random-documents",
  "random-document-types",
  "fee-distribution",
  "client",
  "vote-serialization",
  "token-reward-explanations",
]

dash-sdk-features = [
  "identity-hashing",
  "data-contract-json-conversion",
  "identity-value-conversion",
  "state-transition-value-conversion",
  "state-transition-signing",
  "client",
  "platform-value-cbor",
  "core_rpc_client",
]
all_features_without_client = [
  "json-object",
  "platform-value",
  "all-system_contracts",
  "state-transitions",
  "extended-document",
  "cbor",
  "validation",
  "identity-hashing",
  "identity-serialization",
  "ciborium",
  "core-types",
  "core-types-serialization",
  "core-types-serde-conversion",
  "document-serde-conversion",
  "document-value-conversion",
  "document-json-conversion",
  "document-cbor-conversion",
  "data-contract-serde-conversion",
  "data-contract-value-conversion",
  "data-contract-json-conversion",
  "data-contract-cbor-conversion",
  "identity-serde-conversion",
  "identity-value-conversion",
  "identity-json-conversion",
  "identity-cbor-conversion",
  "index-serde-conversion",
  "state-transition-serde-conversion",
  "state-transition-value-conversion",
  "state-transition-json-conversion",
  "state-transition-validation",
  "state-transition-signing",
  "state-transitions",
  "factories",
  "fixtures-and-mocks",
  "random-public-keys",
  "random-identities",
  "random-documents",
  "random-document-types",
  "fee-distribution",
  "vote-serialization",
  "vote-serde-conversion",
]
abci = [
  "state-transitions",
  "state-transition-validation",
  "validation",
  "random-public-keys",
  "identity-serialization",
  "vote-serialization",
  "platform-value-cbor",
  "core-types",
  "core-types-serialization",
  "core-types-serde-conversion",
  "core_rpc_client",
]
cbor = ["ciborium"]
validation = [
  "json-schema-validation",
  "platform-value",
  "document-value-conversion",
  "state-transition-serde-conversion",
  "ed25519-dalek",
]
# TODO: Tring to remove regexp
create-contested-document = []
platform-value-json = ["platform-value/json"]
platform-value-cbor = ["platform-value/cbor"]
json-schema-validation = [
  "jsonschema",
  "platform-value-json",
  "dep:json-schema-compatibility-validator",
]
json-object = ["platform-value", "platform-value-json"]
platform-value = []
identity-hashing = ["identity-serialization"]
message-signing = []
message-signature-verification = ["bls-signatures"]
document-serde-conversion = []
document-value-conversion = ["document-serde-conversion"]
document-json-conversion = ["document-value-conversion", "platform-value-json"]
document-cbor-conversion = [
  "document-value-conversion",
  "cbor",
  "platform-value-cbor",
]
data-contract-serde-conversion = []
data-contract-value-conversion = ["data-contract-serde-conversion"]
data-contract-json-conversion = [
  "data-contract-value-conversion",
  "platform-value-json",
]
data-contract-cbor-conversion = [
  "data-contract-value-conversion",
  "cbor",
  "platform-value-cbor",
]
identity-serialization = []
identity-serde-conversion = []
identity-value-conversion = ["identity-serde-conversion"]
identity-json-conversion = ["identity-value-conversion", "platform-value-json"]
identity-cbor-conversion = [
  "identity-value-conversion",
  "cbor",
  "platform-value-cbor",
]
index-serde-conversion = []
state-transition-serde-conversion = [
  "data-contract-serde-conversion",
  "vote-serde-conversion",
]
state-transition-value-conversion = [
  "platform-value",
  "state-transition-serde-conversion",
  "data-contract-value-conversion",
]
state-transition-json-conversion = [
  "json-object",
  "state-transition-value-conversion",
  "data-contract-json-conversion",
  "platform-value-json",
]
state-transition-validation = [
  "state-transitions",
  "message-signature-verification",
]
state-transition-signing = [
  "state-transitions",
  "message-signing",
  "state-transition-validation",
]
vote-serialization = []
vote-serde-conversion = []
core-types = ["bls-signatures"]
core-types-serialization = ["core-types"]
core-types-serde-conversion = ["core-types"]
state-transitions = []
system_contracts = ["data-contracts", "factories", "platform-value-json"]
# All system data contracts
all-system_contracts = [
  "system_contracts",
  "data-contracts/all-contracts",
  "dpns-contract",
  "dashpay-contract",
  "withdrawals-contract",
  "masternode-rewards-contract",
  "wallet-utils-contract",
  "token-history-contract",
  "keywords-contract",
]

# Individual data contract features
dpns-contract = ["data-contracts", "data-contracts/dpns"]
dashpay-contract = ["data-contracts", "data-contracts/dashpay"]
withdrawals-contract = ["data-contracts", "data-contracts/withdrawals"]
masternode-rewards-contract = [
  "data-contracts",
  "data-contracts/masternode-rewards",
]
wallet-utils-contract = ["data-contracts", "data-contracts/wallet-utils"]
token-history-contract = ["data-contracts", "data-contracts/token-history"]
keywords-contract = ["data-contracts", "data-contracts/keyword-search"]
fixtures-and-mocks = ["all-system_contracts", "platform-value/json"]
random-public-keys = ["bls-signatures", "ed25519-dalek"]
random-identities = ["random-public-keys"]
random-documents = []
random-document-types = ["platform-value-json"]
fee-distribution = ["dep:rust_decimal", "dep:rust_decimal_macros"]
extended-document = [
  "document-serde-conversion",
  "data-contract-serde-conversion",
  "data-contract-json-conversion",
]
token-reward-explanations = ["dep:chrono-tz"]

factories = []
client = ["factories", "state-transitions"]

[package.metadata.cargo-machete]
# bincode_derive is referenced here to ensure that we use correct version =2.0.0-rc.3; otherwise it gets updated to 2.0.1
ignored = ["bincode_derive"]
