/* Generated with cbindgen:0.27.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

// Error codes for Swift Dash Platform operations
typedef enum SwiftDashSwiftDashErrorCode {
  // Operation completed successfully
  Success = 0,
  // Invalid parameter passed to function
  InvalidParameter = 1,
  // SDK not initialized or in invalid state
  InvalidState = 2,
  // Network error occurred
  NetworkError = 3,
  // Serialization/deserialization error
  SerializationError = 4,
  // Platform protocol error
  ProtocolError = 5,
  // Cryptographic operation failed
  CryptoError = 6,
  // Resource not found
  NotFound = 7,
  // Operation timed out
  Timeout = 8,
  // Feature not implemented
  NotImplemented = 9,
  // Internal error
  InternalError = 99,
} SwiftDashSwiftDashErrorCode;

// Network types for Dash Platform
typedef enum SwiftDashSwiftDashNetwork {
  Mainnet = 0,
  Testnet = 1,
  Devnet = 2,
  Local = 3,
} SwiftDashSwiftDashNetwork;

// Opaque handle to a DataContract
typedef struct SwiftDashDataContractHandle SwiftDashDataContractHandle;

// Opaque handle to a Document
typedef struct SwiftDashDocumentHandle SwiftDashDocumentHandle;

// Opaque handle to an Identity
typedef struct SwiftDashIdentityHandle SwiftDashIdentityHandle;

// Opaque handle to an IdentityPublicKey
typedef struct SwiftDashIdentityPublicKeyHandle SwiftDashIdentityPublicKeyHandle;

// Opaque handle to an SDK instance
typedef struct SwiftDashSDKHandle SwiftDashSDKHandle;

// Opaque handle to a Signer
typedef struct SwiftDashSignerHandle SwiftDashSignerHandle;

// Error structure for Swift interop
typedef struct SwiftDashSwiftDashError {
  // Error code
  enum SwiftDashSwiftDashErrorCode code;
  // Human-readable error message (null-terminated C string)
  // Caller must free this with swift_dash_error_free
  char *message;
} SwiftDashSwiftDashError;

// Swift result that wraps either success or error
typedef struct SwiftDashSwiftDashResult {
  bool success;
  void *data;
  size_t data_len;
  struct SwiftDashSwiftDashError *error;
} SwiftDashSwiftDashResult;

// Information about a data contract
typedef struct SwiftDashSwiftDashDataContractInfo {
  char *id;
  char *owner_id;
  uint32_t version;
  char *schema_json;
} SwiftDashSwiftDashDataContractInfo;

// Document creation parameters
typedef struct SwiftDashSwiftDashDocumentCreateParams {
  const struct SwiftDashDataContractHandle *data_contract_handle;
  const char *document_type;
  const struct SwiftDashIdentityHandle *owner_identity_handle;
  const char *properties_json;
} SwiftDashSwiftDashDocumentCreateParams;

// Information about a document
typedef struct SwiftDashSwiftDashDocumentInfo {
  char *id;
  char *owner_id;
  char *data_contract_id;
  char *document_type;
  uint64_t revision;
  int64_t created_at;
  int64_t updated_at;
} SwiftDashSwiftDashDocumentInfo;

// Result of a credit transfer operation
typedef struct SwiftDashSwiftDashTransferCreditsResult {
  uint64_t amount;
  char *recipient_id;
  uint8_t *transaction_data;
  size_t transaction_data_len;
} SwiftDashSwiftDashTransferCreditsResult;

// Single entry in an identity balance map
typedef struct SwiftDashDashSDKIdentityBalanceEntry {
  // Identity ID (32 bytes)
  uint8_t identity_id[32];
  // Balance in credits (u64::MAX means identity not found)
  uint64_t balance;
} SwiftDashDashSDKIdentityBalanceEntry;

// Map of identity IDs to balances
typedef struct SwiftDashDashSDKIdentityBalanceMap {
  // Array of entries
  struct SwiftDashDashSDKIdentityBalanceEntry *entries;
  // Number of entries
  size_t count;
} SwiftDashDashSDKIdentityBalanceMap;

// Information about an identity
typedef struct SwiftDashSwiftDashIdentityInfo {
  char *id;
  uint64_t balance;
  uint64_t revision;
  uint32_t public_keys_count;
} SwiftDashSwiftDashIdentityInfo;

// Binary data container for results
typedef struct SwiftDashSwiftDashBinaryData {
  uint8_t *data;
  size_t len;
} SwiftDashSwiftDashBinaryData;

// Configuration for the Swift Dash Platform SDK
typedef struct SwiftDashSwiftDashSDKConfig {
  enum SwiftDashSwiftDashNetwork network;
  const char *dapi_addresses;
} SwiftDashSwiftDashSDKConfig;

// Settings for put operations
typedef struct SwiftDashSwiftDashPutSettings {
  uint64_t connect_timeout_ms;
  uint64_t timeout_ms;
  uint32_t retries;
  bool ban_failed_address;
  uint64_t identity_nonce_stale_time_s;
  uint16_t user_fee_increase;
  bool allow_signing_with_any_security_level;
  bool allow_signing_with_any_purpose;
  uint64_t wait_timeout_ms;
} SwiftDashSwiftDashPutSettings;

// Swift-compatible signer interface
//
// This represents a callback-based signer for iOS/Swift applications.
// The actual signer implementation will be provided by the iOS app.
// Type alias for signing callback
typedef unsigned char *(*SwiftDashSwiftSignCallback)(const unsigned char *identity_public_key_bytes,
                                                     size_t identity_public_key_len,
                                                     const unsigned char *data,
                                                     size_t data_len,
                                                     size_t *result_len);

// Type alias for can_sign callback
typedef bool (*SwiftDashSwiftCanSignCallback)(const unsigned char *identity_public_key_bytes,
                                              size_t identity_public_key_len);

// Swift signer configuration
typedef struct SwiftDashSwiftDashSigner {
  SwiftDashSwiftSignCallback sign_callback;
  SwiftDashSwiftCanSignCallback can_sign_callback;
} SwiftDashSwiftDashSigner;

// Token transfer parameters
typedef struct SwiftDashSwiftDashTokenTransferParams {
  const char *token_contract_id;
  const uint8_t *serialized_contract;
  size_t serialized_contract_len;
  uint16_t token_position;
  const uint8_t *recipient_id;
  uint64_t amount;
  const char *public_note;
  const char *private_encrypted_note;
  const char *shared_encrypted_note;
} SwiftDashSwiftDashTokenTransferParams;

// Token mint parameters
typedef struct SwiftDashSwiftDashTokenMintParams {
  const char *token_contract_id;
  const uint8_t *serialized_contract;
  size_t serialized_contract_len;
  uint16_t token_position;
  const uint8_t *recipient_id;
  uint64_t amount;
  const char *public_note;
} SwiftDashSwiftDashTokenMintParams;

// Token burn parameters
typedef struct SwiftDashSwiftDashTokenBurnParams {
  const char *token_contract_id;
  const uint8_t *serialized_contract;
  size_t serialized_contract_len;
  uint16_t token_position;
  uint64_t amount;
  const char *public_note;
} SwiftDashSwiftDashTokenBurnParams;

// Token information
typedef struct SwiftDashSwiftDashTokenInfo {
  char *contract_id;
  char *name;
  char *symbol;
  uint64_t total_supply;
  uint8_t decimals;
} SwiftDashSwiftDashTokenInfo;

// Initialize the Swift SDK library.
// This should be called once at app startup before using any other functions.
void swift_dash_sdk_init(void);

// Get the version of the Swift Dash SDK library
const char *swift_dash_sdk_version(void);

// Fetch a data contract by ID
char *swift_dash_data_contract_fetch(const struct SwiftDashSDKHandle *sdk_handle,
                                     const char *contract_id);

// Get data contract history
char *swift_dash_data_contract_get_history(const struct SwiftDashSDKHandle *sdk_handle,
                                           const char *contract_id,
                                           uint32_t limit,
                                           uint32_t offset);

// Create a new data contract
struct SwiftDashDataContractHandle *swift_dash_data_contract_create(const struct SwiftDashSDKHandle *sdk_handle,
                                                                    const char *schema_json,
                                                                    const struct SwiftDashIdentityHandle *owner_identity_handle);

// Put data contract to platform
struct SwiftDashSwiftDashResult swift_dash_data_contract_put_to_platform(const struct SwiftDashSDKHandle *sdk_handle,
                                                                         const struct SwiftDashDataContractHandle *data_contract_handle,
                                                                         const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                         const struct SwiftDashSignerHandle *signer_handle);

// Put data contract to platform and wait for confirmation
struct SwiftDashDataContractHandle *swift_dash_data_contract_put_to_platform_and_wait(const struct SwiftDashSDKHandle *sdk_handle,
                                                                                      const struct SwiftDashDataContractHandle *data_contract_handle,
                                                                                      const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                                      const struct SwiftDashSignerHandle *signer_handle);

// Update an existing data contract (Note: updating requires fetching, modifying, and putting back)
struct SwiftDashSwiftDashResult swift_dash_data_contract_update(const struct SwiftDashSDKHandle *sdk_handle,
                                                                const char *contract_id,
                                                                const char *schema_json,
                                                                uint32_t _version);

// Free data contract handle
void swift_dash_data_contract_destroy(struct SwiftDashDataContractHandle *handle);

// Free data contract info structure
void swift_dash_data_contract_info_free(struct SwiftDashSwiftDashDataContractInfo *info);

// Fetch a document by ID (simplified - returns not implemented)
char *swift_dash_document_fetch(const struct SwiftDashSDKHandle *sdk_handle,
                                const char *data_contract_id,
                                const char *document_type,
                                const char *document_id);

// Search for documents (simplified - returns not implemented)
char *swift_dash_document_search(const struct SwiftDashSDKHandle *sdk_handle,
                                 const char *data_contract_id,
                                 const char *document_type,
                                 const char *_query_json,
                                 uint32_t _limit);

// Create a new document
struct SwiftDashDocumentHandle *swift_dash_document_create(const struct SwiftDashSDKHandle *sdk_handle,
                                                           const struct SwiftDashSwiftDashDocumentCreateParams *params);

// Put document to platform
struct SwiftDashSwiftDashResult swift_dash_document_put_to_platform(const struct SwiftDashSDKHandle *sdk_handle,
                                                                    const struct SwiftDashDocumentHandle *document_handle,
                                                                    const struct SwiftDashDataContractHandle *data_contract_handle,
                                                                    const char *document_type_name,
                                                                    const uint8_t (*entropy)[32],
                                                                    const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                    const struct SwiftDashSignerHandle *signer_handle);

// Put document to platform and wait
struct SwiftDashDocumentHandle *swift_dash_document_put_to_platform_and_wait(const struct SwiftDashSDKHandle *sdk_handle,
                                                                             const struct SwiftDashDocumentHandle *document_handle,
                                                                             const struct SwiftDashDataContractHandle *data_contract_handle,
                                                                             const char *document_type_name,
                                                                             const uint8_t (*entropy)[32],
                                                                             const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                             const struct SwiftDashSignerHandle *signer_handle);

// Replace document on platform
struct SwiftDashSwiftDashResult swift_dash_document_replace_on_platform(const struct SwiftDashSDKHandle *sdk_handle,
                                                                        const struct SwiftDashDocumentHandle *document_handle,
                                                                        const struct SwiftDashDataContractHandle *data_contract_handle,
                                                                        const char *document_type_name,
                                                                        const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                        const struct SwiftDashSignerHandle *signer_handle);

// Replace document on platform and wait
struct SwiftDashDocumentHandle *swift_dash_document_replace_on_platform_and_wait(const struct SwiftDashSDKHandle *sdk_handle,
                                                                                 const struct SwiftDashDocumentHandle *document_handle,
                                                                                 const struct SwiftDashDataContractHandle *data_contract_handle,
                                                                                 const char *document_type_name,
                                                                                 const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                                 const struct SwiftDashSignerHandle *signer_handle);

// Delete a document
struct SwiftDashSwiftDashResult swift_dash_document_delete(const struct SwiftDashSDKHandle *sdk_handle,
                                                           const struct SwiftDashDocumentHandle *document_handle,
                                                           const struct SwiftDashDataContractHandle *data_contract_handle,
                                                           const char *document_type_name,
                                                           const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                           const struct SwiftDashSignerHandle *signer_handle);

// Delete a document and wait
struct SwiftDashSwiftDashResult swift_dash_document_delete_and_wait(const struct SwiftDashSDKHandle *sdk_handle,
                                                                    const struct SwiftDashDocumentHandle *document_handle,
                                                                    const struct SwiftDashDataContractHandle *data_contract_handle,
                                                                    const char *document_type_name,
                                                                    const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                    const struct SwiftDashSignerHandle *signer_handle);

// Free document handle
void swift_dash_document_destroy(struct SwiftDashSDKHandle *sdk_handle,
                                 struct SwiftDashDocumentHandle *handle);

// Free document info structure
void swift_dash_document_info_free(struct SwiftDashSwiftDashDocumentInfo *info);

// Free an error message
void swift_dash_error_free(struct SwiftDashSwiftDashError *error);

// Free a C string allocated by Swift SDK
void swift_dash_string_free(char *s);

// Free bytes allocated by callback functions
void swift_dash_bytes_free(uint8_t *bytes, size_t len);

// Fetch an identity by ID
char *swift_dash_identity_fetch(const struct SwiftDashSDKHandle *sdk_handle,
                                const char *identity_id);

// Get identity balance
uint64_t swift_dash_identity_get_balance(const struct SwiftDashSDKHandle *sdk_handle,
                                         const char *identity_id);

// Resolve identity name
char *swift_dash_identity_resolve_name(const struct SwiftDashSDKHandle *sdk_handle,
                                       const char *name);

// Transfer credits from one identity to another
struct SwiftDashSwiftDashTransferCreditsResult *swift_dash_identity_transfer_credits(const struct SwiftDashSDKHandle *sdk_handle,
                                                                                     const struct SwiftDashIdentityHandle *from_identity_handle,
                                                                                     const char *to_identity_id,
                                                                                     uint64_t amount,
                                                                                     const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                                                     const struct SwiftDashSignerHandle *signer_handle);

// Put identity to platform with instant lock
struct SwiftDashSwiftDashResult swift_dash_identity_put_to_platform_with_instant_lock(const struct SwiftDashSDKHandle *sdk_handle,
                                                                                      const struct SwiftDashIdentityHandle *identity_handle,
                                                                                      const uint8_t *instant_lock_bytes,
                                                                                      size_t instant_lock_len,
                                                                                      const uint8_t *transaction_bytes,
                                                                                      size_t transaction_len,
                                                                                      uint32_t output_index,
                                                                                      const uint8_t (*private_key)[32],
                                                                                      const struct SwiftDashSignerHandle *signer_handle);

// Put identity to platform with instant lock and wait
struct SwiftDashIdentityHandle *swift_dash_identity_put_to_platform_with_instant_lock_and_wait(const struct SwiftDashSDKHandle *sdk_handle,
                                                                                               const struct SwiftDashIdentityHandle *identity_handle,
                                                                                               const uint8_t *instant_lock_bytes,
                                                                                               size_t instant_lock_len,
                                                                                               const uint8_t *transaction_bytes,
                                                                                               size_t transaction_len,
                                                                                               uint32_t output_index,
                                                                                               const uint8_t (*private_key)[32],
                                                                                               const struct SwiftDashSignerHandle *signer_handle);

// Create identity is done by creating Identity object locally and then putting to platform
// This is a helper note - actual creation requires proper key generation and asset lock proof
const char *swift_dash_identity_create_note(void);

// Fetch balances for multiple identities
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_ids`: Array of identity IDs (32-byte arrays)
// - `identity_ids_len`: Number of identity IDs in the array
//
// # Returns
// Pointer to DashSDKIdentityBalanceMap containing identity IDs mapped to their balances
struct SwiftDashDashSDKIdentityBalanceMap *swift_dash_identities_fetch_balances(const struct SwiftDashSDKHandle *sdk_handle,
                                                                                const uint8_t (*identity_ids)[32],
                                                                                size_t identity_ids_len);

// Free identity handle
void swift_dash_identity_destroy(struct SwiftDashIdentityHandle *handle);

// Free identity info structure
void swift_dash_identity_info_free(struct SwiftDashSwiftDashIdentityInfo *info);

// Free transfer result structure
void swift_dash_transfer_credits_result_free(struct SwiftDashSwiftDashTransferCreditsResult *result);

// Free binary data structure
void swift_dash_binary_data_free(struct SwiftDashSwiftDashBinaryData *data);

// Free identity balance map
void swift_dash_identity_balance_map_free(struct SwiftDashDashSDKIdentityBalanceMap *map);

// Create a new SDK instance
struct SwiftDashSDKHandle *swift_dash_sdk_create(struct SwiftDashSwiftDashSDKConfig config);

// Destroy an SDK instance
void swift_dash_sdk_destroy(struct SwiftDashSDKHandle *handle);

// Get the network the SDK is configured for
enum SwiftDashSwiftDashNetwork swift_dash_sdk_get_network(const struct SwiftDashSDKHandle *handle);

// Get SDK version
const char *swift_dash_sdk_get_version(void);

// Create default settings for put operations
struct SwiftDashSwiftDashPutSettings swift_dash_put_settings_default(void);

// Create default config for mainnet
struct SwiftDashSwiftDashSDKConfig swift_dash_sdk_config_mainnet(void);

// Create default config for testnet
struct SwiftDashSwiftDashSDKConfig swift_dash_sdk_config_testnet(void);

// Create default config for local development
struct SwiftDashSwiftDashSDKConfig swift_dash_sdk_config_local(void);

// Create a new signer with callbacks
struct SwiftDashSwiftDashSigner *swift_dash_signer_create(SwiftDashSwiftSignCallback sign_callback,
                                                          SwiftDashSwiftCanSignCallback can_sign_callback);

// Free a signer
void swift_dash_signer_free(struct SwiftDashSwiftDashSigner *signer);

// Test if a signer can sign with a given key
bool swift_dash_signer_can_sign(const struct SwiftDashSwiftDashSigner *signer,
                                const unsigned char *identity_public_key_bytes,
                                size_t identity_public_key_len);

// Sign data with a signer
unsigned char *swift_dash_signer_sign(const struct SwiftDashSwiftDashSigner *signer,
                                      const unsigned char *identity_public_key_bytes,
                                      size_t identity_public_key_len,
                                      const unsigned char *data,
                                      size_t data_len,
                                      size_t *result_len);

// Get token total supply
char *swift_dash_token_get_total_supply(const struct SwiftDashSDKHandle *sdk_handle,
                                        const char *token_contract_id);

// Transfer tokens
struct SwiftDashSwiftDashResult swift_dash_token_transfer(const struct SwiftDashSDKHandle *sdk_handle,
                                                          const uint8_t *transition_owner_id,
                                                          const struct SwiftDashSwiftDashTokenTransferParams *params,
                                                          const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                          const struct SwiftDashSignerHandle *signer_handle);

// Mint tokens
struct SwiftDashSwiftDashResult swift_dash_token_mint(const struct SwiftDashSDKHandle *sdk_handle,
                                                      const uint8_t *transition_owner_id,
                                                      const struct SwiftDashSwiftDashTokenMintParams *params,
                                                      const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                      const struct SwiftDashSignerHandle *signer_handle);

// Burn tokens
struct SwiftDashSwiftDashResult swift_dash_token_burn(const struct SwiftDashSDKHandle *sdk_handle,
                                                      const uint8_t *transition_owner_id,
                                                      const struct SwiftDashSwiftDashTokenBurnParams *params,
                                                      const struct SwiftDashIdentityPublicKeyHandle *identity_public_key_handle,
                                                      const struct SwiftDashSignerHandle *signer_handle);

// Free token info structure
void swift_dash_token_info_free(struct SwiftDashSwiftDashTokenInfo *info);
