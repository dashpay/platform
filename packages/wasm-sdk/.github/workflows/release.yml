name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [web, nodejs, bundler]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Install wasm-opt
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
          tar -xzf binaryen-version_116-x86_64-linux.tar.gz
          sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/
      
      - name: Build for ${{ matrix.target }}
        run: |
          wasm-pack build --target ${{ matrix.target }} --out-dir pkg-${{ matrix.target }} --release
          cd pkg-${{ matrix.target }}
          wasm-opt -Oz -o wasm_sdk_bg_optimized.wasm wasm_sdk_bg.wasm
          tar -czf ../wasm-sdk-${{ matrix.target }}.tar.gz *
          cd ..
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./wasm-sdk-${{ matrix.target }}.tar.gz
          asset_name: wasm-sdk-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  publish-npm:
    name: Publish to NPM
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build for NPM
        run: wasm-pack build --target bundler --out-dir pkg --release
      
      - name: Prepare package
        run: |
          cd pkg
          # Update package.json with correct version
          node -e "
          const pkg = require('./package.json');
          pkg.name = '@dashevo/wasm-sdk';
          pkg.version = '${{ github.ref }}'.replace('refs/tags/v', '');
          pkg.repository = {
            type: 'git',
            url: 'https://github.com/dashpay/platform.git'
          };
          pkg.keywords = ['dash', 'platform', 'wasm', 'sdk', 'blockchain'];
          pkg.license = 'MIT';
          require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
      
      - name: Publish to NPM
        run: |
          cd pkg
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-docs:
    name: Build Documentation
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build docs
        run: cargo doc --workspace --no-deps --all-features
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          cname: wasm-sdk.dash.org