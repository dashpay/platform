use std::sync::Arc;

use dash_sdk::{
    dpp::{
        prelude::CoreBlockHeight,
        util::vec::{decode_hex, encode_hex},
    },
    error::ContextProviderError,
    platform::{DataContract, Identifier},
};
use drive_proof_verifier::ContextProvider;
use wasm_bindgen::prelude::wasm_bindgen;

#[wasm_bindgen]
pub struct WasmContext {}
const QUORUM_KEYS: [&str; 24] = [
"000000000000001c39ed197e4a7237dae2c3610de4ad6cbd2cf3a2fedd4b37d8:aac3de572143b96ea5de4a8bc77f17717d05553a305a6ae1e57ed0c59e0f387c5642d8cb85271c04640c8085c597f8ea",
"00000000000000120c0f7e2c576c08a15eaf1dd1159594cf50f9f9a632611309:86889be75ddc191996a061290da4971f7a22d585572b65ba32f8b16ea5187d2917890cb56c3bcf8ed1fd1c8f673bf767",
"00000000000000200c069dadfb37bb391407dab75912a0d17758a3e628c6d9d2:8a85e425a90f6e63f814837504a07d42d9911a03c03e98f8c0e0d4b97195e7fc734818f961f0551be659593753a11884",
"00000000000000213d0d942055b2f9b7b4af09ebd69f797862028a654f13f5b2:a5d49094a236732369e009251d9e8a3b39e6b26edd13895554118862ff5cafd78fb1b6d01437b5101a346494631a8c0f",
"00000000000000208e509567c6ddcac62e0a15cd07bf7b22aea6716576501ab2:ad701bf7c7027316cbfe54e9cf5a94852d48815adf2c795604b166299a5ae275a3f545347c7d7f614f05dcab5726b81b",
"0000000000000013720d5bfb69d50f7f364a2ea8b19caee40ace7d6aaf6e7a3e:96369462a670f0ce1297380e8a6bc1a710a25435c14807ecc78b3303dfb54db7218a11f0e9d3e4c560a740eaa999c576",
"000000000000001e25c58123f4d9219bdd6f91461041f6773bb605e0fff24842:b6a6fd74e744f680ba232c5a99fb76a84872c22cbcb60cf59894b8bb702e72d91e48a9c708fec208c3e04eeb97b048b3",
"000000000000001ffe6bce8e619487eca6044a1311155bd6d2d29358d4d387e3:a390dabce666a8128c55df2bb35057142788730abc43a0a6cf83c34a04180a0c9ecfc86888ad82fec104389ef35367e4",
"000000000000000d414a755d13e334e62aab935d218a9ebc83cec63ba0e4e53d:b87915ae41f3de8403266124f261db3a611ce03de7754c445e1ff0ae59173afb2fb633dd90a74696cb7c244d4dddb634",
"0000000000000012356e7671a39ae2034b355464e6125d90bb8e06d532c8bfc5:8530e55f3501b71d73a6954681867d53586f68d2e486860ecd47715344b5cfa30cc7907059a394cfac1193b4585473c2",
"00000000000000181ee33ebca476252349b4b72dca8264e58551d9da627a408e:a8c440998e5280791055f79cf37b9dcfe5aa9a250b64ebc8f3e48a1010aeb727845aa2540d0ee877212377dfd5b7494f",
"000000000000000bc70fac79f49e92742df030e830ee5b3b0a326a125d9bc46c:a5cc8af818ba0d9afe36cfec0b0c165a6b01b1d84d186e633ca41dda1f20b73fa72a2248ae2a8b50c203bba54af78f36",
"000000000000000ec3c9aebcfda407e2c76b8ebc53c6e49aaf77918a60ec37f9:b677a5128d96eb3ee91e26278c2a920dc70e68e43f4dfb6e57e7cbcc325c0e6de7c156fe10315cf0495588c2a80f507f",
"00000000000000224f402057a58bac46c704f3203e965eef1af244886e61cdfd:8ab4685a79a42ebdd181fdfdb08b267727a1a2c20f4d0ccd737f2fba2ae31f95eb4fe02807fce029899e4597c08d5c71",
"00000000000000096492426de8f080c23a4d72553be7118d3946de0fe8e42a5f:a487fc21b82f1959ad0c4ca5b66e3f15b15a748353d766e9d2f20fb1761be195bbf87754a825276102186e535f05db12",
"000000000000001fd4e2014cc8ca0a7b4aec1261494bbc0da8be1b5e7c44b9f5:ae26bb3e7af269d090bc4693021463e92f1be0de2ebca0694d137686a126f1f1d8416f26401cf74b99fb0c43d9e97ce9",
"000000000000000efdac1744c4ce8d0dbaabfd3a15f191e996beaf13b4839452:b81926d646be3755c650db5854a54a2dfee93f7c304caa212aa8f4ad5c7ad30d997717f60fe4dac583796dc70c86e8b9",
"000000000000000a750cf992ff18e9075a7368598231ae5e8d6cea2cc69d5cd8:ac8977096d7db7ac1e00dcc7fb86035217bd573709fb6236eb0654dfb4304ee62681ec63dbf9743d460c1e8434b12ed8",
"0000000000000002618a958dc306a644b736090f67b166d20d0af708368ea589:860df9186ad46b05ff3b55fbdcb21b17e9be416521b3df18ccaa0c06b7d5a7680de84e33bbe8481c57623db0a45f8dea",
"000000000000001431cf0358d7e9ff3bba83519fe4591a3798202046cb4b5e44:8766b15a9528d7f2d15c5aa92edf26d3ba41dd7e7fc79fe907a5da442025417d85bb2de9d4cbfb6b35d56495fa152e04",
"000000000000000f4acb9a7cd545317fb02d274202aeecdb34086a96c3151b74:b5e00dab44c054bd599c7c3e43ce3bca718bfc592b56f023cc848ddc217e6adee49aa06426f7c93454aa9759b06310d6",
"000000000000001058756a0050fed87fa811e6dbcc999759b14d121e2423ae7c:b3508952323926f552ec3829b6234e9480452afaf3fa10c2f423f0804fc7adffb4c8fd94c8507fc83e7cb56fd4678559",
"00000000000000166250396062788a2b678ef54118ab17447a4cf61f232f0df8:ac692ac97e00caddd4bb3abbeafb3e0824e5c1d91b670a18641fbc86193ccf812e816a838849dadfa72747cc48b9972b",
"000000000000001750f53fa70609db2a8d1dc53603168d3610acd7e9cde401e6:961f67dde80d7d9055138bbe778344d3afd6e5516b2375b73d55d34fbca0f43f92b5a60ad4021bb6823a8d548fc9886c",
];

impl ContextProvider for WasmContext {
    fn get_quorum_public_key(
        &self,
        _quorum_type: u32,
        quorum_hash: [u8; 32],
        _core_chain_locked_height: u32,
    ) -> Result<[u8; 48], ContextProviderError> {
        let quorum_label = encode_hex(&quorum_hash) + ":";
        let key_hex = QUORUM_KEYS
            .iter()
            .find(|key| key.starts_with(&quorum_label))
            .ok_or(ContextProviderError::InvalidQuorum(format!(
                "key for quorum {:?} not found in hardcoded dictionary",
                &quorum_label[0..quorum_label.len() - 1]
            )))?;
        let key = decode_hex(&key_hex[quorum_label.len()..])
            .map_err(|e| ContextProviderError::InvalidQuorum(e.to_string()))?
            .try_into()
            .map_err(|_e| {
                ContextProviderError::InvalidQuorum("invalid quorum key size".to_string())
            })?;

        Ok(key)
    }

    fn get_data_contract(
        &self,
        _id: &Identifier,
    ) -> Result<Option<Arc<DataContract>>, ContextProviderError> {
        todo!()
    }

    fn get_platform_activation_height(&self) -> Result<CoreBlockHeight, ContextProviderError> {
        todo!()
    }
}
