use crate::error::Error;
#[cfg(test)]
use crate::execution::execution_event::ExecutionResult;
#[cfg(test)]
use crate::execution::execution_event::ExecutionResult::ConsensusExecutionError;
use crate::platform::{Platform, PlatformRef};
use crate::rpc::core::CoreRPCLike;
use crate::validation::state_transition::process_state_transition;
use dpp::block::block_info::BlockInfo;
use dpp::consensus::ConsensusError;
use dpp::serialization_traits::PlatformDeserializable;
use dpp::state_transition::StateTransition;
#[cfg(test)]
use dpp::validation::SimpleConsensusValidationResult;
use dpp::validation::ValidationResult;
use drive::fee::result::FeeResult;
#[cfg(test)]
use drive::grovedb::Transaction;

impl<C> Platform<C>
where
    C: CoreRPCLike,
{
    #[cfg(test)]
    pub fn execute_tx(
        &self,
        raw_tx: Vec<u8>,
        block_info: &BlockInfo,
        transaction: &Transaction,
    ) -> Result<ExecutionResult, Error> {
        let state_transition =
            StateTransition::deserialize(raw_tx.as_slice()).map_err(Error::Protocol)?;
        let state_read_guard = self.state.read().unwrap();
        let platform_ref = PlatformRef {
            drive: &self.drive,
            state: &state_read_guard,
            config: &self.config,
            core_rpc: &self.core_rpc,
        };
        let state_transition_execution_event =
            process_state_transition(&platform_ref, state_transition, Some(transaction))?;

        if state_transition_execution_event.is_valid() {
            let execution_event = state_transition_execution_event.into_data()?;
            self.execute_event(execution_event, block_info, transaction)
        } else {
            Ok(ConsensusExecutionError(
                SimpleConsensusValidationResult::new_with_errors(
                    state_transition_execution_event.errors,
                ),
            ))
        }
    }

    /// Checks a state transition to determine if it should be added to the mempool.
    ///
    /// This function performs a few checks, including validating the state transition and ensuring that the
    /// user can pay for it. It may be inaccurate in rare cases, so the proposer needs to re-check transactions
    /// before proposing a block.
    ///
    /// # Arguments
    ///
    /// * `raw_tx` - A raw transaction represented as a vector of bytes.
    ///
    /// # Returns
    ///
    /// * `Result<ValidationResult<FeeResult, ConsensusError>, Error>` - If the state transition passes all
    ///   checks, it returns a `ValidationResult` with fee information. If any check fails, it returns an `Error`.
    pub fn check_tx(
        &self,
        raw_tx: Vec<u8>,
    ) -> Result<ValidationResult<FeeResult, ConsensusError>, Error> {
        let state_transition =
            StateTransition::deserialize(raw_tx.as_slice()).map_err(Error::Protocol)?;
        let state_read_guard = self.state.read().unwrap();
        let platform_ref = PlatformRef {
            drive: &self.drive,
            state: &state_read_guard,
            config: &self.config,
            core_rpc: &self.core_rpc,
        };
        let execution_event = process_state_transition(&platform_ref, state_transition, None)?;

        // We should run the execution event in dry run to see if we would have enough fees for the transaction

        // We need the approximate block info
        if let Some(block_info) = state_read_guard.last_committed_block_info.as_ref() {
            // We do not put the transaction, because this event happens outside of a block
            execution_event.and_then_borrowed_validation(|execution_event| {
                self.validate_fees_of_event(execution_event, &block_info.basic_info, None)
            })
        } else {
            execution_event.and_then_borrowed_validation(|execution_event| {
                self.validate_fees_of_event(execution_event, &BlockInfo::default(), None)
            })
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::config::{PlatformConfig, PlatformTestConfig};
    use crate::error::Error;
    use crate::execution::execution_event::ExecutionResult::SuccessfulPaidExecution;
    use crate::platform::Platform;
    use crate::test::helpers::setup::TestPlatformBuilder;
    use dpp::block::block_info::BlockInfo;
    use dpp::identity::Identity;
    use dpp::prelude::{Identifier, IdentityPublicKey};
    use dpp::serialization_traits::{PlatformDeserializable, Signable};
    use dpp::state_transition::StateTransition;
    use dpp::state_transition::StateTransition::DataContractCreate;
    use std::collections::BTreeMap;
    use tenderdash_abci::proto::abci::RequestInitChain;
    use tenderdash_abci::proto::google::protobuf::Timestamp;

    #[test]
    fn data_contract_create_check_tx() {
        let serialized = hex::decode("00010001e2716cafada3bbe565025e4597276424c7a1d2b19bb67d3f44fa111f4e7696e300000000013468747470733a2f2f736368656d612e646173682e6f72672f6470702d302d342d302f6d6574612f646174612d636f6e7472616374019e71b47e5b533e2c53366158f0d7548ba79ca6cbde04401fd7c79597bef6fb2c030f696e6465786564446f63756d656e74160512047479706512066f626a6563741207696e64696365731506160312046e616d651206696e64657831120a70726f70657274696573150216011208246f776e6572496412036173631601120966697273744e616d6512036173631206756e697175651301160312046e616d651206696e64657832120a70726f70657274696573150216011208246f776e657249641203617363160112086c6173744e616d6512036173631206756e697175651301160212046e616d651206696e64657833120a70726f706572746965731501160112086c6173744e616d651203617363160212046e616d651206696e64657834120a70726f7065727469657315021601120a2463726561746564417412036173631601120a247570646174656441741203617363160212046e616d651206696e64657835120a70726f7065727469657315011601120a247570646174656441741203617363160212046e616d651206696e64657836120a70726f7065727469657315011601120a246372656174656441741203617363120a70726f706572746965731602120966697273744e616d6516021204747970651206737472696e6712096d61784c656e677468023f12086c6173744e616d6516021204747970651206737472696e6712096d61784c656e677468023f120872657175697265641504120966697273744e616d65120a24637265617465644174120a2475706461746564417412086c6173744e616d6512146164646974696f6e616c50726f7065727469657313000c6e696365446f63756d656e74160412047479706512066f626a656374120a70726f70657274696573160112046e616d6516011204747970651206737472696e67120872657175697265641501120a2463726561746564417412146164646974696f6e616c50726f7065727469657313000e7769746842797465417272617973160512047479706512066f626a6563741207696e64696365731501160212046e616d651206696e64657831120a70726f7065727469657315011601120e6279746541727261794669656c641203617363120a70726f706572746965731602120e6279746541727261794669656c641603120474797065120561727261791209627974654172726179130112086d61784974656d730210120f6964656e7469666965724669656c64160512047479706512056172726179120962797465417272617913011210636f6e74656e744d656469615479706512216170706c69636174696f6e2f782e646173682e6470702e6964656e74696669657212086d696e4974656d73022012086d61784974656d730220120872657175697265641501120e6279746541727261794669656c6412146164646974696f6e616c50726f706572746965731300005e236018181816974c2d73a407a1d4ce4e936cb3431e0ea94e2777fb3e87f9e80141204039fe689533d8bc9137ef298c3e6a5f7c40e8001bb670a370149b1c7f3f4b326e311e3df862f4ea6f146ad858d1ef2b3a02949284cdb3b09f63974d5912b04e").expect("expected to decode");
        let platform = TestPlatformBuilder::new()
            .with_config(PlatformConfig::default())
            .build_with_mock_rpc();

        let key = IdentityPublicKey::random_authentication_key(1, Some(1));

        platform
            .drive
            .create_initial_state_structure(None)
            .expect("expected to create state structure");
        let identity = Identity {
            protocol_version: 1,
            id: Identifier::new([
                158, 113, 180, 126, 91, 83, 62, 44, 83, 54, 97, 88, 240, 215, 84, 139, 167, 156,
                166, 203, 222, 4, 64, 31, 215, 199, 149, 151, 190, 246, 251, 44,
            ]),
            public_keys: BTreeMap::from([(1, key)]),
            balance: 100000,
            revision: 0,
            asset_lock_proof: None,
            metadata: None,
        };
        platform
            .drive
            .add_new_identity(identity, &BlockInfo::default(), true, None)
            .expect("expected to insert identity");

        let validation_result = platform.check_tx(serialized).expect("expected to check tx");

        //todo fix
        // assert!(validation_result.errors.is_empty());
    }

    #[test]
    fn document_update_check_tx() {
        let identity_create = hex::decode("03020200000000002102b50c44b3a3bd342d620919352097ce39e31bb2b4a485583a933827920ee5aa9d4120e3e3432eba9c7c41c789b2ca4483ef1d5c6657ab83fb4164c6517edd3944c1246461ffe2b1eee25f79fcee2fcebee5e08aa264c8b5cd42cf050eb850874823bb01000002002103f85402738806681a6e6fd14ed8e70899bd831da5bd9302e84edf3caf03bcd744411ff87579b07c9b295c6f18ad0c98986e9f2437918f0fe34047e74ac957c2976edf50788d2b16fcaea9bbbd0aa90569efca11de669d7f08ef3b5c2db1a2bb7ccc470000c601018424a8d386812dfc24fe286915b1a14763c8fb3701d6b8991912b7a54088c30d00000000a9f543365d8345621e724755bcce89f77c374038e9a7d0a0d5c7e3e9481045cb506ebd6bcf46f5db0953dd84386d9942ac4e30372fbc7456b479b65a08b8801695f7078bb338c75272b849661d26e86e40e59a283767d24f361b7172f9256b6bc5ec9d33f1a5742dd3df24f96c45f56e15a781964b9d7cc29087dc8adf4f63b7b4a1cffcf8495a0b13cea819e80355307541a18912e74210fffb367b7b3a13b0de03000000018424a8d386812dfc24fe286915b1a14763c8fb3701d6b8991912b7a54088c30d000000006a47304402201e1f8c93f0ad0b4c43d5e1c03a912e9c8463bd9409b495bb3156638dbc03094102202aaf998d0e533f0aac62fb1ab3bd3885fc96201a6f282a22801df1f9180b6b7e012102e7568866ff0c53561fc0e577b76f3614b38aa548a89adbbfc715c2a85860aaa6ffffffff0240420f0000000000166a14b6c869d709e095182d9c49a347d67632606de3a428230000000000001976a9147d863019b137a7fc55d6399b0ae7c525933fb14388ac0000000000014120f138e7c9cec7ac53f74d141141adb463b57d87599e40bc6251678d8892e7a0c4100f64be98035e46fa2b400bab870069f0f612db3f6c98a85e6dcb15ca56d7b87e27f11ff8d2539a71fea96ffb95ea7226599329fecb7d67c2332b2749d0eca0").expect("expected to decode");

        let data_contract_create = hex::decode("000100014b707b7ffe0c6170dc0b1cce6abcfd3db41480de837b8a4038ec2e044c9ec61300000000013468747470733a2f2f736368656d612e646173682e6f72672f6470702d302d342d302f6d6574612f646174612d636f6e7472616374017e27f11ff8d2539a71fea96ffb95ea7226599329fecb7d67c2332b2749d0eca0030f696e6465786564446f63756d656e74160512047479706512066f626a6563741207696e64696365731506160312046e616d651206696e64657831120a70726f70657274696573150216011208246f776e6572496412036173631601120966697273744e616d6512036173631206756e697175651301160312046e616d651206696e64657832120a70726f70657274696573150216011208246f776e657249641203617363160112086c6173744e616d6512036173631206756e697175651301160212046e616d651206696e64657833120a70726f706572746965731501160112086c6173744e616d651203617363160212046e616d651206696e64657834120a70726f7065727469657315021601120a2463726561746564417412036173631601120a247570646174656441741203617363160212046e616d651206696e64657835120a70726f7065727469657315011601120a247570646174656441741203617363160212046e616d651206696e64657836120a70726f7065727469657315011601120a246372656174656441741203617363120a70726f706572746965731602120966697273744e616d6516021204747970651206737472696e6712096d61784c656e677468023f12086c6173744e616d6516021204747970651206737472696e6712096d61784c656e677468023f120872657175697265641504120966697273744e616d65120a24637265617465644174120a2475706461746564417412086c6173744e616d6512146164646974696f6e616c50726f7065727469657313000c6e696365446f63756d656e74160412047479706512066f626a656374120a70726f70657274696573160112046e616d6516011204747970651206737472696e67120872657175697265641501120a2463726561746564417412146164646974696f6e616c50726f7065727469657313000e7769746842797465417272617973160512047479706512066f626a6563741207696e64696365731501160212046e616d651206696e64657831120a70726f7065727469657315011601120e6279746541727261794669656c641203617363120a70726f706572746965731602120e6279746541727261794669656c641603120474797065120561727261791209627974654172726179130112086d61784974656d730210120f6964656e7469666965724669656c64160512047479706512056172726179120962797465417272617913011210636f6e74656e744d656469615479706512216170706c69636174696f6e2f782e646173682e6470702e6964656e74696669657212086d696e4974656d73022012086d61784974656d730220120872657175697265641501120e6279746541727261794669656c6412146164646974696f6e616c50726f70657274696573130000bdb5befd57710c51ecfbc4331d180bc22ded67a208cab00b62f7a0594115b88b01411f7f373da43c0be79b9394245ae0493bcef97fa5ed90e937548a5e565ee51426e742a3da4bf115f59e810e1e7fedeb17689d51fbeccf526c32164cc9d44ecf5c3e").expect("expected to decode");

        let document_create = hex::decode("0201017e27f11ff8d2539a71fea96ffb95ea7226599329fecb7d67c2332b2749d0eca00100bc7ad590a5a0d1bcd29c780d981e9ebcc4f00f39caa3591df870f03723e7aba40f696e6465786564446f63756d656e74004b707b7ffe0c6170dc0b1cce6abcfd3db41480de837b8a4038ec2e044c9ec613014b707b7ffe0c6170dc0b1cce6abcfd3db41480de837b8a4038ec2e044c9ec61300000000013468747470733a2f2f736368656d612e646173682e6f72672f6470702d302d342d302f6d6574612f646174612d636f6e7472616374017e27f11ff8d2539a71fea96ffb95ea7226599329fecb7d67c2332b2749d0eca0030f696e6465786564446f63756d656e74160512047479706512066f626a6563741207696e64696365731506160312046e616d651206696e64657831120a70726f70657274696573150216011208246f776e6572496412036173631601120966697273744e616d6512036173631206756e697175651301160312046e616d651206696e64657832120a70726f70657274696573150216011208246f776e657249641203617363160112086c6173744e616d6512036173631206756e697175651301160212046e616d651206696e64657833120a70726f706572746965731501160112086c6173744e616d651203617363160212046e616d651206696e64657834120a70726f7065727469657315021601120a2463726561746564417412036173631601120a247570646174656441741203617363160212046e616d651206696e64657835120a70726f7065727469657315011601120a247570646174656441741203617363160212046e616d651206696e64657836120a70726f7065727469657315011601120a246372656174656441741203617363120a70726f706572746965731602120966697273744e616d6516021204747970651206737472696e6712096d61784c656e677468023f12086c6173744e616d6516021204747970651206737472696e6712096d61784c656e677468023f120872657175697265641504120966697273744e616d65120a24637265617465644174120a2475706461746564417412086c6173744e616d6512146164646974696f6e616c50726f7065727469657313000c6e696365446f63756d656e74160412047479706512066f626a656374120a70726f70657274696573160112046e616d6516011204747970651206737472696e67120872657175697265641501120a2463726561746564417412146164646974696f6e616c50726f7065727469657313000e7769746842797465417272617973160512047479706512066f626a6563741207696e64696365731501160212046e616d651206696e64657831120a70726f7065727469657315011601120e6279746541727261794669656c641203617363120a70726f706572746965731602120e6279746541727261794669656c641603120474797065120561727261791209627974654172726179130112086d61784974656d730210120f6964656e7469666965724669656c64160512047479706512056172726179120962797465417272617913011210636f6e74656e744d656469615479706512216170706c69636174696f6e2f782e646173682e6470702e6964656e74696669657212086d696e4974656d73022012086d61784974656d730220120872657175697265641501120e6279746541727261794669656c6412146164646974696f6e616c50726f70657274696573130000f22bd29939dc6a8a9b892a942e66e8a6c628309887cededb42aadeb29e21458f01fd000001882425a06101fd000001882425a06101020966697273744e616d6512066d794e616d65086c6173744e616d6512086c6173744e616d65010101411faf90e1f9f909b32e2273e88ba3bdd88db3bebfd6dbb47bb61ebfeb19bd27bbe428eb694bfb0ba96460ebcf40b38464a2242b79878a161d0572b90efc09f65817").expect("expected to decode");

        let document_update = hex::decode("0201017e27f11ff8d2539a71fea96ffb95ea7226599329fecb7d67c2332b2749d0eca00101bc7ad590a5a0d1bcd29c780d981e9ebcc4f00f39caa3591df870f03723e7aba40f696e6465786564446f63756d656e74014b707b7ffe0c6170dc0b1cce6abcfd3db41480de837b8a4038ec2e044c9ec613014b707b7ffe0c6170dc0b1cce6abcfd3db41480de837b8a4038ec2e044c9ec61300000000013468747470733a2f2f736368656d612e646173682e6f72672f6470702d302d342d302f6d6574612f646174612d636f6e7472616374017e27f11ff8d2539a71fea96ffb95ea7226599329fecb7d67c2332b2749d0eca0030f696e6465786564446f63756d656e74160512047479706512066f626a6563741207696e64696365731506160312046e616d651206696e64657831120a70726f70657274696573150216011208246f776e6572496412036173631601120966697273744e616d6512036173631206756e697175651301160312046e616d651206696e64657832120a70726f70657274696573150216011208246f776e657249641203617363160112086c6173744e616d6512036173631206756e697175651301160212046e616d651206696e64657833120a70726f706572746965731501160112086c6173744e616d651203617363160212046e616d651206696e64657834120a70726f7065727469657315021601120a2463726561746564417412036173631601120a247570646174656441741203617363160212046e616d651206696e64657835120a70726f7065727469657315011601120a247570646174656441741203617363160212046e616d651206696e64657836120a70726f7065727469657315011601120a246372656174656441741203617363120a70726f706572746965731602120966697273744e616d6516021204747970651206737472696e6712096d61784c656e677468023f12086c6173744e616d6516021204747970651206737472696e6712096d61784c656e677468023f120872657175697265641504120966697273744e616d65120a24637265617465644174120a2475706461746564417412086c6173744e616d6512146164646974696f6e616c50726f7065727469657313000c6e696365446f63756d656e74160412047479706512066f626a656374120a70726f70657274696573160112046e616d6516011204747970651206737472696e67120872657175697265641501120a2463726561746564417412146164646974696f6e616c50726f7065727469657313000e7769746842797465417272617973160512047479706512066f626a6563741207696e64696365731501160212046e616d651206696e64657831120a70726f7065727469657315011601120e6279746541727261794669656c641203617363120a70726f706572746965731602120e6279746541727261794669656c641603120474797065120561727261791209627974654172726179130112086d61784974656d730210120f6964656e7469666965724669656c64160512047479706512056172726179120962797465417272617913011210636f6e74656e744d656469615479706512216170706c69636174696f6e2f782e646173682e6470702e6964656e74696669657212086d696e4974656d73022012086d61784974656d730220120872657175697265641501120e6279746541727261794669656c6412146164646974696f6e616c50726f706572746965731300000201fd000001882425afcc01020966697273744e616d65120b757064617465644e616d65086c6173744e616d6512086c6173744e616d65010101411f4f9fc7012bc132a39be07749050795a59fa26598fee49f46deaa597e3f4192aa60f412a7d53a877b80c9469d2ac5797d457f44336b1b655e1ae534ac573ec582").expect("expected to decode");
        let platform = TestPlatformBuilder::new()
            .with_config(PlatformConfig::default())
            .build_with_mock_rpc();

        platform
            .drive
            .create_initial_state_structure(None)
            .expect("expected to create state structure");

        let transaction = platform.drive.grove.start_transaction();

        let validation_result = platform
            .execute_tx(identity_create, &BlockInfo::default(), &transaction)
            .expect("expected to execute identity_create tx");
        assert!(matches!(validation_result, SuccessfulPaidExecution(..)));

        let validation_result = platform
            .execute_tx(data_contract_create, &BlockInfo::default(), &transaction)
            .expect("expected to execute data_contract_create tx");
        assert!(matches!(validation_result, SuccessfulPaidExecution(..)));
        let validation_result = platform
            .execute_tx(document_create, &BlockInfo::default(), &transaction)
            .expect("expected to execute document_create tx");
        assert!(matches!(validation_result, SuccessfulPaidExecution(..)));

        platform
            .drive
            .grove
            .commit_transaction(transaction)
            .unwrap()
            .expect("expected to commit transaction");

        let validation_result = platform
            .check_tx(document_update)
            .expect("expected to check tx");

        dbg!(&validation_result.errors);
        //todo fix
        // assert!(validation_result.errors.is_empty());
    }

    #[test]
    fn identity_top_up_check_tx() {
        let identity_top_up = hex::decode("04030000c601018c047719bb8b287e33b788671131b16b1f355d1b3ba6c4917396d0d7bf41e681000000007f1df760772c7ab48c042c01319bd553b7a635936e9a06fa382eb5037638e6ba077a524aa82c6b20e7b8dcadafa46f8ecc59b2dea8c3d6269a24cd5cad74b712ae5a460d11242bd345e168028b3e8442439a63847aa736057a6cd587ae9f7bca1f59f3045566233566142cbca5a7b525085bf96c621ba39f838d6c5c31b116e756753177aa303a8ea712e17ad1ff5dfb0b1504c03d5c225c5cbdb1ee8f6636f0df03000000018c047719bb8b287e33b788671131b16b1f355d1b3ba6c4917396d0d7bf41e681000000006b483045022100d71b565e319a0b85725d1eca250da27d846c6b015e601254e3f8aeb11c0feab60220381c92a46467d6c5270d424b666b989e444e72955f3d5b77d8be9965335b43bd01210222150e3b66410341308b646234bff9c203172c6720b2ecc838c71d94f670066affffffff02e093040000000000166a144cf5fee3ebdce0f51540a3504091c0dccb0f7d343832963b000000001976a914f3b05a1dda565b0013cb9857e708d840bcd47bef88ac00000000003012c19b98ec0033addb36cd64b7f510670f2a351a4304b5f6994144286efdac014120d56826c39c07eaea7157b8b717fdcef73fbc99cc680e34f695e0c763d79531691d8ea117cd4623e96a25cbf673e5b1da6e43a96d5bb2a65fe82c2efd4dc2c6dc").expect("expected to decode");

        let platform = TestPlatformBuilder::new()
            .with_config(PlatformConfig::default())
            .build_with_mock_rpc();

        let genesis_time = 0;

        platform
            .create_genesis_state(genesis_time, platform.config.abci.keys.clone().into(), None)
            .expect("expected to create genesis state");

        let validation_result = platform
            .check_tx(identity_top_up.clone())
            .expect("expected to check tx");

        assert!(validation_result.errors.is_empty());

        let transaction = platform.drive.grove.start_transaction();

        let validation_result = platform
            .execute_tx(identity_top_up, &BlockInfo::default(), &transaction)
            .expect("expected to execute identity top up tx");
        assert!(matches!(validation_result, SuccessfulPaidExecution(..)));

        platform
            .drive
            .grove
            .commit_transaction(transaction)
            .unwrap()
            .expect("expected to commit transaction");
    }
}
