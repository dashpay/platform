// Test export of basic types
import {
    Account,
    Wallet,
    ChainStore,
    DerivableKeyChain
} from '..';

// Test wallet constructor
new Wallet({
    // adapter: {},
    passphrase: 'test',
    offlineMode: true,
    debug: false,
    allowSensitiveOperations: true,
    injectDefaultPlugins: true,
    unsafeOptions: {},
    waitForInstantLockTimeout: 1000,
    waitForTxMetadataTimeout: 1000,
    network: 'testnet',
    mnemonic: 'mnemonic',
    seed: 'seed',
    HDPublicKey: "HDPublicKey",
    HDPrivateKey: 'HDPrivateKey',
    privateKey: 'privateKey',
    publicKey: 'publicKey',
    address: 'address',
    storage: {
        purgeOnError: true,
        autoSave: true
    },
    adapter: {},
    plugins: [],
    transport: {},
});

// const { utils } = WalletLib;

// utils.

// const client = new Client();
// utils.dashToDuffs(1);

// lax
//   .toString();
// import loadDpp, { DPPModule, DashPlatformProtocol, Identifier } from "..";

// // Tests that loadDpp resolves DPPModule
// expectType<Promise<DPPModule>>(loadDpp());
//
// // Tests that dist exports wasm-dpp exported classes  (from WASM bindings)
// const dppInstance = new DashPlatformProtocol(null, {}, {}, 1);
// expectType<DashPlatformProtocol>(dppInstance);
//
// // Tests that library exports Identifier class (from TS code in lib)
// expectType<Identifier>(new Identifier(Buffer.alloc(32)));
//
// // Tests that typings properly handle optional arguments (second argument of createFromBuffer)
// // This test will fail if we pass JS code built by wasm-bindgen through TypeScript compilation
// // instead of putting it directly to dist.
// // If we do it this way, proper typings generated by wasm-bindgen will be ignored, and incorrect
// // ones will be generated by TypeScript compiler.
// dppInstance.stateTransition.createFromBuffer(Buffer.alloc(32));
