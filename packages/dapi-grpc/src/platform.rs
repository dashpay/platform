// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `platform.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.Proof)
pub struct Proof {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.Proof.merkle_proof)
    pub merkle_proof: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.Proof.quorum_hash)
    pub quorum_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.Proof.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.Proof.round)
    pub round: u32,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.Proof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proof {
    fn default() -> &'a Proof {
        <Proof as ::protobuf::Message>::default_instance()
    }
}

impl Proof {
    pub fn new() -> Proof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "merkle_proof",
            |m: &Proof| { &m.merkle_proof },
            |m: &mut Proof| { &mut m.merkle_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quorum_hash",
            |m: &Proof| { &m.quorum_hash },
            |m: &mut Proof| { &mut m.quorum_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &Proof| { &m.signature },
            |m: &mut Proof| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &Proof| { &m.round },
            |m: &mut Proof| { &mut m.round },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proof>(
            "Proof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proof {
    const NAME: &'static str = "Proof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.merkle_proof = is.read_bytes()?;
                },
                18 => {
                    self.quorum_hash = is.read_bytes()?;
                },
                26 => {
                    self.signature = is.read_bytes()?;
                },
                32 => {
                    self.round = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.merkle_proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.merkle_proof);
        }
        if !self.quorum_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.quorum_hash);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.round);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.merkle_proof.is_empty() {
            os.write_bytes(1, &self.merkle_proof)?;
        }
        if !self.quorum_hash.is_empty() {
            os.write_bytes(2, &self.quorum_hash)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        if self.round != 0 {
            os.write_uint32(4, self.round)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proof {
        Proof::new()
    }

    fn clear(&mut self) {
        self.merkle_proof.clear();
        self.quorum_hash.clear();
        self.signature.clear();
        self.round = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proof {
        static instance: Proof = Proof {
            merkle_proof: ::std::vec::Vec::new(),
            quorum_hash: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            round: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Proof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ResponseMetadata)
pub struct ResponseMetadata {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.height)
    pub height: i64,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.core_chain_locked_height)
    pub core_chain_locked_height: u32,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.time_ms)
    pub time_ms: u64,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.protocol_version)
    pub protocol_version: u32,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ResponseMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResponseMetadata {
    fn default() -> &'a ResponseMetadata {
        <ResponseMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ResponseMetadata {
    pub fn new() -> ResponseMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &ResponseMetadata| { &m.height },
            |m: &mut ResponseMetadata| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "core_chain_locked_height",
            |m: &ResponseMetadata| { &m.core_chain_locked_height },
            |m: &mut ResponseMetadata| { &mut m.core_chain_locked_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_ms",
            |m: &ResponseMetadata| { &m.time_ms },
            |m: &mut ResponseMetadata| { &mut m.time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "protocol_version",
            |m: &ResponseMetadata| { &m.protocol_version },
            |m: &mut ResponseMetadata| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResponseMetadata>(
            "ResponseMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResponseMetadata {
    const NAME: &'static str = "ResponseMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                16 => {
                    self.core_chain_locked_height = is.read_uint32()?;
                },
                24 => {
                    self.time_ms = is.read_uint64()?;
                },
                32 => {
                    self.protocol_version = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        if self.core_chain_locked_height != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.core_chain_locked_height);
        }
        if self.time_ms != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.time_ms);
        }
        if self.protocol_version != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.protocol_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if self.core_chain_locked_height != 0 {
            os.write_uint32(2, self.core_chain_locked_height)?;
        }
        if self.time_ms != 0 {
            os.write_uint64(3, self.time_ms)?;
        }
        if self.protocol_version != 0 {
            os.write_uint32(4, self.protocol_version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResponseMetadata {
        ResponseMetadata::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.core_chain_locked_height = 0;
        self.time_ms = 0;
        self.protocol_version = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResponseMetadata {
        static instance: ResponseMetadata = ResponseMetadata {
            height: 0,
            core_chain_locked_height: 0,
            time_ms: 0,
            protocol_version: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResponseMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResponseMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResponseMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.StateTransitionBroadcastError)
pub struct StateTransitionBroadcastError {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.code)
    pub code: u32,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StateTransitionBroadcastError {
    fn default() -> &'a StateTransitionBroadcastError {
        <StateTransitionBroadcastError as ::protobuf::Message>::default_instance()
    }
}

impl StateTransitionBroadcastError {
    pub fn new() -> StateTransitionBroadcastError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &StateTransitionBroadcastError| { &m.code },
            |m: &mut StateTransitionBroadcastError| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &StateTransitionBroadcastError| { &m.message },
            |m: &mut StateTransitionBroadcastError| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &StateTransitionBroadcastError| { &m.data },
            |m: &mut StateTransitionBroadcastError| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StateTransitionBroadcastError>(
            "StateTransitionBroadcastError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StateTransitionBroadcastError {
    const NAME: &'static str = "StateTransitionBroadcastError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_uint32()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != 0 {
            os.write_uint32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StateTransitionBroadcastError {
        StateTransitionBroadcastError::new()
    }

    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StateTransitionBroadcastError {
        static instance: StateTransitionBroadcastError = StateTransitionBroadcastError {
            code: 0,
            message: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StateTransitionBroadcastError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StateTransitionBroadcastError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StateTransitionBroadcastError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateTransitionBroadcastError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest)
pub struct BroadcastStateTransitionRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.state_transition)
    pub state_transition: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BroadcastStateTransitionRequest {
    fn default() -> &'a BroadcastStateTransitionRequest {
        <BroadcastStateTransitionRequest as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastStateTransitionRequest {
    pub fn new() -> BroadcastStateTransitionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state_transition",
            |m: &BroadcastStateTransitionRequest| { &m.state_transition },
            |m: &mut BroadcastStateTransitionRequest| { &mut m.state_transition },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BroadcastStateTransitionRequest>(
            "BroadcastStateTransitionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BroadcastStateTransitionRequest {
    const NAME: &'static str = "BroadcastStateTransitionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.state_transition = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.state_transition.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.state_transition);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.state_transition.is_empty() {
            os.write_bytes(1, &self.state_transition)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BroadcastStateTransitionRequest {
        BroadcastStateTransitionRequest::new()
    }

    fn clear(&mut self) {
        self.state_transition.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BroadcastStateTransitionRequest {
        static instance: BroadcastStateTransitionRequest = BroadcastStateTransitionRequest {
            state_transition: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BroadcastStateTransitionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BroadcastStateTransitionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BroadcastStateTransitionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastStateTransitionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.BroadcastStateTransitionResponse)
pub struct BroadcastStateTransitionResponse {
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.BroadcastStateTransitionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BroadcastStateTransitionResponse {
    fn default() -> &'a BroadcastStateTransitionResponse {
        <BroadcastStateTransitionResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastStateTransitionResponse {
    pub fn new() -> BroadcastStateTransitionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BroadcastStateTransitionResponse>(
            "BroadcastStateTransitionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BroadcastStateTransitionResponse {
    const NAME: &'static str = "BroadcastStateTransitionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BroadcastStateTransitionResponse {
        BroadcastStateTransitionResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BroadcastStateTransitionResponse {
        static instance: BroadcastStateTransitionResponse = BroadcastStateTransitionResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BroadcastStateTransitionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BroadcastStateTransitionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BroadcastStateTransitionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastStateTransitionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetIdentityRequest)
pub struct GetIdentityRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentityRequest.id)
    pub id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentityRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetIdentityRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIdentityRequest {
    fn default() -> &'a GetIdentityRequest {
        <GetIdentityRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIdentityRequest {
    pub fn new() -> GetIdentityRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetIdentityRequest| { &m.id },
            |m: &mut GetIdentityRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetIdentityRequest| { &m.prove },
            |m: &mut GetIdentityRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIdentityRequest>(
            "GetIdentityRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIdentityRequest {
    const NAME: &'static str = "GetIdentityRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_bytes()?;
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIdentityRequest {
        GetIdentityRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIdentityRequest {
        static instance: GetIdentityRequest = GetIdentityRequest {
            id: ::std::vec::Vec::new(),
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIdentityRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIdentityRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIdentityRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIdentityRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetIdentityResponse)
pub struct GetIdentityResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentityResponse.identity)
    pub identity: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentityResponse.proof)
    pub proof: ::protobuf::MessageField<Proof>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentityResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetIdentityResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIdentityResponse {
    fn default() -> &'a GetIdentityResponse {
        <GetIdentityResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetIdentityResponse {
    pub fn new() -> GetIdentityResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "identity",
            |m: &GetIdentityResponse| { &m.identity },
            |m: &mut GetIdentityResponse| { &mut m.identity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proof>(
            "proof",
            |m: &GetIdentityResponse| { &m.proof },
            |m: &mut GetIdentityResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &GetIdentityResponse| { &m.metadata },
            |m: &mut GetIdentityResponse| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIdentityResponse>(
            "GetIdentityResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIdentityResponse {
    const NAME: &'static str = "GetIdentityResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.identity = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.identity.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.identity);
        }
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.identity.is_empty() {
            os.write_bytes(1, &self.identity)?;
        }
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIdentityResponse {
        GetIdentityResponse::new()
    }

    fn clear(&mut self) {
        self.identity.clear();
        self.proof.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIdentityResponse {
        static instance: GetIdentityResponse = GetIdentityResponse {
            identity: ::std::vec::Vec::new(),
            proof: ::protobuf::MessageField::none(),
            metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIdentityResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIdentityResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIdentityResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIdentityResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetDataContractRequest)
pub struct GetDataContractRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDataContractRequest.id)
    pub id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDataContractRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetDataContractRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDataContractRequest {
    fn default() -> &'a GetDataContractRequest {
        <GetDataContractRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDataContractRequest {
    pub fn new() -> GetDataContractRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetDataContractRequest| { &m.id },
            |m: &mut GetDataContractRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetDataContractRequest| { &m.prove },
            |m: &mut GetDataContractRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDataContractRequest>(
            "GetDataContractRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDataContractRequest {
    const NAME: &'static str = "GetDataContractRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_bytes()?;
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDataContractRequest {
        GetDataContractRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDataContractRequest {
        static instance: GetDataContractRequest = GetDataContractRequest {
            id: ::std::vec::Vec::new(),
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDataContractRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDataContractRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDataContractRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataContractRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetDataContractResponse)
pub struct GetDataContractResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDataContractResponse.data_contract)
    pub data_contract: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDataContractResponse.proof)
    pub proof: ::protobuf::MessageField<Proof>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDataContractResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetDataContractResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDataContractResponse {
    fn default() -> &'a GetDataContractResponse {
        <GetDataContractResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDataContractResponse {
    pub fn new() -> GetDataContractResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_contract",
            |m: &GetDataContractResponse| { &m.data_contract },
            |m: &mut GetDataContractResponse| { &mut m.data_contract },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proof>(
            "proof",
            |m: &GetDataContractResponse| { &m.proof },
            |m: &mut GetDataContractResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &GetDataContractResponse| { &m.metadata },
            |m: &mut GetDataContractResponse| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDataContractResponse>(
            "GetDataContractResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDataContractResponse {
    const NAME: &'static str = "GetDataContractResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_contract = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data_contract.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data_contract);
        }
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data_contract.is_empty() {
            os.write_bytes(1, &self.data_contract)?;
        }
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDataContractResponse {
        GetDataContractResponse::new()
    }

    fn clear(&mut self) {
        self.data_contract.clear();
        self.proof.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDataContractResponse {
        static instance: GetDataContractResponse = GetDataContractResponse {
            data_contract: ::std::vec::Vec::new(),
            proof: ::protobuf::MessageField::none(),
            metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDataContractResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDataContractResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDataContractResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataContractResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetDocumentsRequest)
pub struct GetDocumentsRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.data_contract_id)
    pub data_contract_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.document_type)
    pub document_type: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.where)
    pub where_: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.order_by)
    pub order_by: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.limit)
    pub limit: u32,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.prove)
    pub prove: bool,
    // message oneof groups
    pub start: ::std::option::Option<get_documents_request::Start>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetDocumentsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDocumentsRequest {
    fn default() -> &'a GetDocumentsRequest {
        <GetDocumentsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDocumentsRequest {
    pub fn new() -> GetDocumentsRequest {
        ::std::default::Default::default()
    }

    // bytes start_after = 6;

    pub fn start_after(&self) -> &[u8] {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAfter(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_start_after(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start_after(&self) -> bool {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAfter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_after(&mut self, v: ::std::vec::Vec<u8>) {
        self.start = ::std::option::Option::Some(get_documents_request::Start::StartAfter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_after(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(get_documents_request::Start::StartAfter(_)) = self.start {
        } else {
            self.start = ::std::option::Option::Some(get_documents_request::Start::StartAfter(::std::vec::Vec::new()));
        }
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAfter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_after(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_start_after() {
            match self.start.take() {
                ::std::option::Option::Some(get_documents_request::Start::StartAfter(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes start_at = 7;

    pub fn start_at(&self) -> &[u8] {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAt(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_start_at(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start_at(&self) -> bool {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_at(&mut self, v: ::std::vec::Vec<u8>) {
        self.start = ::std::option::Option::Some(get_documents_request::Start::StartAt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_at(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(get_documents_request::Start::StartAt(_)) = self.start {
        } else {
            self.start = ::std::option::Option::Some(get_documents_request::Start::StartAt(::std::vec::Vec::new()));
        }
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_at(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_start_at() {
            match self.start.take() {
                ::std::option::Option::Some(get_documents_request::Start::StartAt(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_contract_id",
            |m: &GetDocumentsRequest| { &m.data_contract_id },
            |m: &mut GetDocumentsRequest| { &mut m.data_contract_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "document_type",
            |m: &GetDocumentsRequest| { &m.document_type },
            |m: &mut GetDocumentsRequest| { &mut m.document_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "where",
            |m: &GetDocumentsRequest| { &m.where_ },
            |m: &mut GetDocumentsRequest| { &mut m.where_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_by",
            |m: &GetDocumentsRequest| { &m.order_by },
            |m: &mut GetDocumentsRequest| { &mut m.order_by },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &GetDocumentsRequest| { &m.limit },
            |m: &mut GetDocumentsRequest| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "start_after",
            GetDocumentsRequest::has_start_after,
            GetDocumentsRequest::start_after,
            GetDocumentsRequest::set_start_after,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "start_at",
            GetDocumentsRequest::has_start_at,
            GetDocumentsRequest::start_at,
            GetDocumentsRequest::set_start_at,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetDocumentsRequest| { &m.prove },
            |m: &mut GetDocumentsRequest| { &mut m.prove },
        ));
        oneofs.push(get_documents_request::Start::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDocumentsRequest>(
            "GetDocumentsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDocumentsRequest {
    const NAME: &'static str = "GetDocumentsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_contract_id = is.read_bytes()?;
                },
                18 => {
                    self.document_type = is.read_string()?;
                },
                26 => {
                    self.where_ = is.read_bytes()?;
                },
                34 => {
                    self.order_by = is.read_bytes()?;
                },
                40 => {
                    self.limit = is.read_uint32()?;
                },
                50 => {
                    self.start = ::std::option::Option::Some(get_documents_request::Start::StartAfter(is.read_bytes()?));
                },
                58 => {
                    self.start = ::std::option::Option::Some(get_documents_request::Start::StartAt(is.read_bytes()?));
                },
                64 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data_contract_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data_contract_id);
        }
        if !self.document_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.document_type);
        }
        if !self.where_.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.where_);
        }
        if !self.order_by.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.order_by);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.limit);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.start {
            match v {
                &get_documents_request::Start::StartAfter(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(6, &v);
                },
                &get_documents_request::Start::StartAt(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data_contract_id.is_empty() {
            os.write_bytes(1, &self.data_contract_id)?;
        }
        if !self.document_type.is_empty() {
            os.write_string(2, &self.document_type)?;
        }
        if !self.where_.is_empty() {
            os.write_bytes(3, &self.where_)?;
        }
        if !self.order_by.is_empty() {
            os.write_bytes(4, &self.order_by)?;
        }
        if self.limit != 0 {
            os.write_uint32(5, self.limit)?;
        }
        if self.prove != false {
            os.write_bool(8, self.prove)?;
        }
        if let ::std::option::Option::Some(ref v) = self.start {
            match v {
                &get_documents_request::Start::StartAfter(ref v) => {
                    os.write_bytes(6, v)?;
                },
                &get_documents_request::Start::StartAt(ref v) => {
                    os.write_bytes(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDocumentsRequest {
        GetDocumentsRequest::new()
    }

    fn clear(&mut self) {
        self.data_contract_id.clear();
        self.document_type.clear();
        self.where_.clear();
        self.order_by.clear();
        self.limit = 0;
        self.start = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDocumentsRequest {
        static instance: GetDocumentsRequest = GetDocumentsRequest {
            data_contract_id: ::std::vec::Vec::new(),
            document_type: ::std::string::String::new(),
            where_: ::std::vec::Vec::new(),
            order_by: ::std::vec::Vec::new(),
            limit: 0,
            prove: false,
            start: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDocumentsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDocumentsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDocumentsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDocumentsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GetDocumentsRequest`
pub mod get_documents_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:org.dash.platform.dapi.v0.GetDocumentsRequest.start)
    pub enum Start {
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.GetDocumentsRequest.start_after)
        StartAfter(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.GetDocumentsRequest.start_at)
        StartAt(::std::vec::Vec<u8>),
    }

    impl ::protobuf::Oneof for Start {
    }

    impl ::protobuf::OneofFull for Start {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GetDocumentsRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("start").unwrap()).clone()
        }
    }

    impl Start {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Start>("start")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetDocumentsResponse)
pub struct GetDocumentsResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
    pub documents: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsResponse.proof)
    pub proof: ::protobuf::MessageField<Proof>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetDocumentsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDocumentsResponse {
    fn default() -> &'a GetDocumentsResponse {
        <GetDocumentsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDocumentsResponse {
    pub fn new() -> GetDocumentsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "documents",
            |m: &GetDocumentsResponse| { &m.documents },
            |m: &mut GetDocumentsResponse| { &mut m.documents },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proof>(
            "proof",
            |m: &GetDocumentsResponse| { &m.proof },
            |m: &mut GetDocumentsResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &GetDocumentsResponse| { &m.metadata },
            |m: &mut GetDocumentsResponse| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDocumentsResponse>(
            "GetDocumentsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDocumentsResponse {
    const NAME: &'static str = "GetDocumentsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.documents.push(is.read_bytes()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.documents {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.documents {
            os.write_bytes(1, &v)?;
        };
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDocumentsResponse {
        GetDocumentsResponse::new()
    }

    fn clear(&mut self) {
        self.documents.clear();
        self.proof.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDocumentsResponse {
        static instance: GetDocumentsResponse = GetDocumentsResponse {
            documents: ::std::vec::Vec::new(),
            proof: ::protobuf::MessageField::none(),
            metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDocumentsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDocumentsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDocumentsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDocumentsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest)
pub struct GetIdentitiesByPublicKeyHashesRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
    pub public_key_hashes: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIdentitiesByPublicKeyHashesRequest {
    fn default() -> &'a GetIdentitiesByPublicKeyHashesRequest {
        <GetIdentitiesByPublicKeyHashesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIdentitiesByPublicKeyHashesRequest {
    pub fn new() -> GetIdentitiesByPublicKeyHashesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "public_key_hashes",
            |m: &GetIdentitiesByPublicKeyHashesRequest| { &m.public_key_hashes },
            |m: &mut GetIdentitiesByPublicKeyHashesRequest| { &mut m.public_key_hashes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetIdentitiesByPublicKeyHashesRequest| { &m.prove },
            |m: &mut GetIdentitiesByPublicKeyHashesRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIdentitiesByPublicKeyHashesRequest>(
            "GetIdentitiesByPublicKeyHashesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIdentitiesByPublicKeyHashesRequest {
    const NAME: &'static str = "GetIdentitiesByPublicKeyHashesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key_hashes.push(is.read_bytes()?);
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.public_key_hashes {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.public_key_hashes {
            os.write_bytes(1, &v)?;
        };
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIdentitiesByPublicKeyHashesRequest {
        GetIdentitiesByPublicKeyHashesRequest::new()
    }

    fn clear(&mut self) {
        self.public_key_hashes.clear();
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIdentitiesByPublicKeyHashesRequest {
        static instance: GetIdentitiesByPublicKeyHashesRequest = GetIdentitiesByPublicKeyHashesRequest {
            public_key_hashes: ::std::vec::Vec::new(),
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIdentitiesByPublicKeyHashesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIdentitiesByPublicKeyHashesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIdentitiesByPublicKeyHashesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIdentitiesByPublicKeyHashesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse)
pub struct GetIdentitiesByPublicKeyHashesResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
    pub identities: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.proof)
    pub proof: ::protobuf::MessageField<Proof>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIdentitiesByPublicKeyHashesResponse {
    fn default() -> &'a GetIdentitiesByPublicKeyHashesResponse {
        <GetIdentitiesByPublicKeyHashesResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetIdentitiesByPublicKeyHashesResponse {
    pub fn new() -> GetIdentitiesByPublicKeyHashesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "identities",
            |m: &GetIdentitiesByPublicKeyHashesResponse| { &m.identities },
            |m: &mut GetIdentitiesByPublicKeyHashesResponse| { &mut m.identities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proof>(
            "proof",
            |m: &GetIdentitiesByPublicKeyHashesResponse| { &m.proof },
            |m: &mut GetIdentitiesByPublicKeyHashesResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &GetIdentitiesByPublicKeyHashesResponse| { &m.metadata },
            |m: &mut GetIdentitiesByPublicKeyHashesResponse| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIdentitiesByPublicKeyHashesResponse>(
            "GetIdentitiesByPublicKeyHashesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIdentitiesByPublicKeyHashesResponse {
    const NAME: &'static str = "GetIdentitiesByPublicKeyHashesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.identities.push(is.read_bytes()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.identities {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.identities {
            os.write_bytes(1, &v)?;
        };
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIdentitiesByPublicKeyHashesResponse {
        GetIdentitiesByPublicKeyHashesResponse::new()
    }

    fn clear(&mut self) {
        self.identities.clear();
        self.proof.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIdentitiesByPublicKeyHashesResponse {
        static instance: GetIdentitiesByPublicKeyHashesResponse = GetIdentitiesByPublicKeyHashesResponse {
            identities: ::std::vec::Vec::new(),
            proof: ::protobuf::MessageField::none(),
            metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIdentitiesByPublicKeyHashesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIdentitiesByPublicKeyHashesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIdentitiesByPublicKeyHashesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIdentitiesByPublicKeyHashesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest)
pub struct WaitForStateTransitionResultRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.state_transition_hash)
    pub state_transition_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WaitForStateTransitionResultRequest {
    fn default() -> &'a WaitForStateTransitionResultRequest {
        <WaitForStateTransitionResultRequest as ::protobuf::Message>::default_instance()
    }
}

impl WaitForStateTransitionResultRequest {
    pub fn new() -> WaitForStateTransitionResultRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state_transition_hash",
            |m: &WaitForStateTransitionResultRequest| { &m.state_transition_hash },
            |m: &mut WaitForStateTransitionResultRequest| { &mut m.state_transition_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &WaitForStateTransitionResultRequest| { &m.prove },
            |m: &mut WaitForStateTransitionResultRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WaitForStateTransitionResultRequest>(
            "WaitForStateTransitionResultRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WaitForStateTransitionResultRequest {
    const NAME: &'static str = "WaitForStateTransitionResultRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.state_transition_hash = is.read_bytes()?;
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.state_transition_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.state_transition_hash);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.state_transition_hash.is_empty() {
            os.write_bytes(1, &self.state_transition_hash)?;
        }
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WaitForStateTransitionResultRequest {
        WaitForStateTransitionResultRequest::new()
    }

    fn clear(&mut self) {
        self.state_transition_hash.clear();
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WaitForStateTransitionResultRequest {
        static instance: WaitForStateTransitionResultRequest = WaitForStateTransitionResultRequest {
            state_transition_hash: ::std::vec::Vec::new(),
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WaitForStateTransitionResultRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WaitForStateTransitionResultRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WaitForStateTransitionResultRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForStateTransitionResultRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse)
pub struct WaitForStateTransitionResultResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // message oneof groups
    pub responses: ::std::option::Option<wait_for_state_transition_result_response::Responses>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WaitForStateTransitionResultResponse {
    fn default() -> &'a WaitForStateTransitionResultResponse {
        <WaitForStateTransitionResultResponse as ::protobuf::Message>::default_instance()
    }
}

impl WaitForStateTransitionResultResponse {
    pub fn new() -> WaitForStateTransitionResultResponse {
        ::std::default::Default::default()
    }

    // .org.dash.platform.dapi.v0.StateTransitionBroadcastError error = 1;

    pub fn error(&self) -> &StateTransitionBroadcastError {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(ref v)) => v,
            _ => <StateTransitionBroadcastError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_error(&mut self) {
        self.responses = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: StateTransitionBroadcastError) {
        self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut StateTransitionBroadcastError {
        if let ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(_)) = self.responses {
        } else {
            self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(StateTransitionBroadcastError::new()));
        }
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> StateTransitionBroadcastError {
        if self.has_error() {
            match self.responses.take() {
                ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            StateTransitionBroadcastError::new()
        }
    }

    // .org.dash.platform.dapi.v0.Proof proof = 2;

    pub fn proof(&self) -> &Proof {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(ref v)) => v,
            _ => <Proof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_proof(&mut self) {
        self.responses = ::std::option::Option::None;
    }

    pub fn has_proof(&self) -> bool {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: Proof) {
        self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proof(&mut self) -> &mut Proof {
        if let ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(_)) = self.responses {
        } else {
            self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(Proof::new()));
        }
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proof(&mut self) -> Proof {
        if self.has_proof() {
            match self.responses.take() {
                ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(v)) => v,
                _ => panic!(),
            }
        } else {
            Proof::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StateTransitionBroadcastError>(
            "error",
            WaitForStateTransitionResultResponse::has_error,
            WaitForStateTransitionResultResponse::error,
            WaitForStateTransitionResultResponse::mut_error,
            WaitForStateTransitionResultResponse::set_error,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Proof>(
            "proof",
            WaitForStateTransitionResultResponse::has_proof,
            WaitForStateTransitionResultResponse::proof,
            WaitForStateTransitionResultResponse::mut_proof,
            WaitForStateTransitionResultResponse::set_proof,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &WaitForStateTransitionResultResponse| { &m.metadata },
            |m: &mut WaitForStateTransitionResultResponse| { &mut m.metadata },
        ));
        oneofs.push(wait_for_state_transition_result_response::Responses::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WaitForStateTransitionResultResponse>(
            "WaitForStateTransitionResultResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WaitForStateTransitionResultResponse {
    const NAME: &'static str = "WaitForStateTransitionResultResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(is.read_message()?));
                },
                18 => {
                    self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.responses {
            match v {
                &wait_for_state_transition_result_response::Responses::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &wait_for_state_transition_result_response::Responses::Proof(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.responses {
            match v {
                &wait_for_state_transition_result_response::Responses::Error(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &wait_for_state_transition_result_response::Responses::Proof(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WaitForStateTransitionResultResponse {
        WaitForStateTransitionResultResponse::new()
    }

    fn clear(&mut self) {
        self.responses = ::std::option::Option::None;
        self.responses = ::std::option::Option::None;
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WaitForStateTransitionResultResponse {
        static instance: WaitForStateTransitionResultResponse = WaitForStateTransitionResultResponse {
            metadata: ::protobuf::MessageField::none(),
            responses: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WaitForStateTransitionResultResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WaitForStateTransitionResultResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WaitForStateTransitionResultResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForStateTransitionResultResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `WaitForStateTransitionResultResponse`
pub mod wait_for_state_transition_result_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.responses)
    pub enum Responses {
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.error)
        Error(super::StateTransitionBroadcastError),
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.proof)
        Proof(super::Proof),
    }

    impl ::protobuf::Oneof for Responses {
    }

    impl ::protobuf::OneofFull for Responses {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::WaitForStateTransitionResultResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("responses").unwrap()).clone()
        }
    }

    impl Responses {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Responses>("responses")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ConsensusParamsBlock)
pub struct ConsensusParamsBlock {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_bytes)
    pub max_bytes: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_gas)
    pub max_gas: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsBlock.time_iota_ms)
    pub time_iota_ms: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ConsensusParamsBlock.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsensusParamsBlock {
    fn default() -> &'a ConsensusParamsBlock {
        <ConsensusParamsBlock as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusParamsBlock {
    pub fn new() -> ConsensusParamsBlock {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_bytes",
            |m: &ConsensusParamsBlock| { &m.max_bytes },
            |m: &mut ConsensusParamsBlock| { &mut m.max_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_gas",
            |m: &ConsensusParamsBlock| { &m.max_gas },
            |m: &mut ConsensusParamsBlock| { &mut m.max_gas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_iota_ms",
            |m: &ConsensusParamsBlock| { &m.time_iota_ms },
            |m: &mut ConsensusParamsBlock| { &mut m.time_iota_ms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsensusParamsBlock>(
            "ConsensusParamsBlock",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsensusParamsBlock {
    const NAME: &'static str = "ConsensusParamsBlock";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.max_bytes = is.read_string()?;
                },
                18 => {
                    self.max_gas = is.read_string()?;
                },
                26 => {
                    self.time_iota_ms = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.max_bytes.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.max_bytes);
        }
        if !self.max_gas.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.max_gas);
        }
        if !self.time_iota_ms.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.time_iota_ms);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.max_bytes.is_empty() {
            os.write_string(1, &self.max_bytes)?;
        }
        if !self.max_gas.is_empty() {
            os.write_string(2, &self.max_gas)?;
        }
        if !self.time_iota_ms.is_empty() {
            os.write_string(3, &self.time_iota_ms)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsensusParamsBlock {
        ConsensusParamsBlock::new()
    }

    fn clear(&mut self) {
        self.max_bytes.clear();
        self.max_gas.clear();
        self.time_iota_ms.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsensusParamsBlock {
        static instance: ConsensusParamsBlock = ConsensusParamsBlock {
            max_bytes: ::std::string::String::new(),
            max_gas: ::std::string::String::new(),
            time_iota_ms: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsensusParamsBlock {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsensusParamsBlock").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsensusParamsBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusParamsBlock {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ConsensusParamsEvidence)
pub struct ConsensusParamsEvidence {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_num_blocks)
    pub max_age_num_blocks: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_duration)
    pub max_age_duration: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_bytes)
    pub max_bytes: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsensusParamsEvidence {
    fn default() -> &'a ConsensusParamsEvidence {
        <ConsensusParamsEvidence as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusParamsEvidence {
    pub fn new() -> ConsensusParamsEvidence {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_age_num_blocks",
            |m: &ConsensusParamsEvidence| { &m.max_age_num_blocks },
            |m: &mut ConsensusParamsEvidence| { &mut m.max_age_num_blocks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_age_duration",
            |m: &ConsensusParamsEvidence| { &m.max_age_duration },
            |m: &mut ConsensusParamsEvidence| { &mut m.max_age_duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_bytes",
            |m: &ConsensusParamsEvidence| { &m.max_bytes },
            |m: &mut ConsensusParamsEvidence| { &mut m.max_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsensusParamsEvidence>(
            "ConsensusParamsEvidence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsensusParamsEvidence {
    const NAME: &'static str = "ConsensusParamsEvidence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.max_age_num_blocks = is.read_string()?;
                },
                18 => {
                    self.max_age_duration = is.read_string()?;
                },
                26 => {
                    self.max_bytes = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.max_age_num_blocks.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.max_age_num_blocks);
        }
        if !self.max_age_duration.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.max_age_duration);
        }
        if !self.max_bytes.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.max_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.max_age_num_blocks.is_empty() {
            os.write_string(1, &self.max_age_num_blocks)?;
        }
        if !self.max_age_duration.is_empty() {
            os.write_string(2, &self.max_age_duration)?;
        }
        if !self.max_bytes.is_empty() {
            os.write_string(3, &self.max_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsensusParamsEvidence {
        ConsensusParamsEvidence::new()
    }

    fn clear(&mut self) {
        self.max_age_num_blocks.clear();
        self.max_age_duration.clear();
        self.max_bytes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsensusParamsEvidence {
        static instance: ConsensusParamsEvidence = ConsensusParamsEvidence {
            max_age_num_blocks: ::std::string::String::new(),
            max_age_duration: ::std::string::String::new(),
            max_bytes: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsensusParamsEvidence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsensusParamsEvidence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsensusParamsEvidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusParamsEvidence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetConsensusParamsRequest)
pub struct GetConsensusParamsRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsRequest.height)
    pub height: i64,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetConsensusParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetConsensusParamsRequest {
    fn default() -> &'a GetConsensusParamsRequest {
        <GetConsensusParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetConsensusParamsRequest {
    pub fn new() -> GetConsensusParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &GetConsensusParamsRequest| { &m.height },
            |m: &mut GetConsensusParamsRequest| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetConsensusParamsRequest| { &m.prove },
            |m: &mut GetConsensusParamsRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetConsensusParamsRequest>(
            "GetConsensusParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetConsensusParamsRequest {
    const NAME: &'static str = "GetConsensusParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetConsensusParamsRequest {
        GetConsensusParamsRequest::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetConsensusParamsRequest {
        static instance: GetConsensusParamsRequest = GetConsensusParamsRequest {
            height: 0,
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetConsensusParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetConsensusParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetConsensusParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetConsensusParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetConsensusParamsResponse)
pub struct GetConsensusParamsResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsResponse.block)
    pub block: ::protobuf::MessageField<ConsensusParamsBlock>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsResponse.evidence)
    pub evidence: ::protobuf::MessageField<ConsensusParamsEvidence>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetConsensusParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetConsensusParamsResponse {
    fn default() -> &'a GetConsensusParamsResponse {
        <GetConsensusParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetConsensusParamsResponse {
    pub fn new() -> GetConsensusParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConsensusParamsBlock>(
            "block",
            |m: &GetConsensusParamsResponse| { &m.block },
            |m: &mut GetConsensusParamsResponse| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConsensusParamsEvidence>(
            "evidence",
            |m: &GetConsensusParamsResponse| { &m.evidence },
            |m: &mut GetConsensusParamsResponse| { &mut m.evidence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetConsensusParamsResponse>(
            "GetConsensusParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetConsensusParamsResponse {
    const NAME: &'static str = "GetConsensusParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.evidence)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.evidence.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.evidence.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetConsensusParamsResponse {
        GetConsensusParamsResponse::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.evidence.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetConsensusParamsResponse {
        static instance: GetConsensusParamsResponse = GetConsensusParamsResponse {
            block: ::protobuf::MessageField::none(),
            evidence: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetConsensusParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetConsensusParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetConsensusParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetConsensusParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eplatform.proto\x12\x19org.dash.platform.dapi.v0\x1a\x1fgoogle/prot\
    obuf/timestamp.proto\"\x7f\n\x05Proof\x12!\n\x0cmerkle_proof\x18\x01\x20\
    \x01(\x0cR\x0bmerkleProof\x12\x1f\n\x0bquorum_hash\x18\x02\x20\x01(\x0cR\
    \nquorumHash\x12\x1c\n\tsignature\x18\x03\x20\x01(\x0cR\tsignature\x12\
    \x14\n\x05round\x18\x04\x20\x01(\rR\x05round\"\xa7\x01\n\x10ResponseMeta\
    data\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06height\x127\n\x18core_\
    chain_locked_height\x18\x02\x20\x01(\rR\x15coreChainLockedHeight\x12\x17\
    \n\x07time_ms\x18\x03\x20\x01(\x04R\x06timeMs\x12)\n\x10protocol_version\
    \x18\x04\x20\x01(\rR\x0fprotocolVersion\"a\n\x1dStateTransitionBroadcast\
    Error\x12\x12\n\x04code\x18\x01\x20\x01(\rR\x04code\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\
    \x04data\"L\n\x1fBroadcastStateTransitionRequest\x12)\n\x10state_transit\
    ion\x18\x01\x20\x01(\x0cR\x0fstateTransition\"\"\n\x20BroadcastStateTran\
    sitionResponse\":\n\x12GetIdentityRequest\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\x0cR\x02id\x12\x14\n\x05prove\x18\x02\x20\x01(\x08R\x05prove\"\xb2\
    \x01\n\x13GetIdentityResponse\x12\x1a\n\x08identity\x18\x01\x20\x01(\x0c\
    R\x08identity\x126\n\x05proof\x18\x02\x20\x01(\x0b2\x20.org.dash.platfor\
    m.dapi.v0.ProofR\x05proof\x12G\n\x08metadata\x18\x03\x20\x01(\x0b2+.org.\
    dash.platform.dapi.v0.ResponseMetadataR\x08metadata\">\n\x16GetDataContr\
    actRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12\x14\n\x05prov\
    e\x18\x02\x20\x01(\x08R\x05prove\"\xbf\x01\n\x17GetDataContractResponse\
    \x12#\n\rdata_contract\x18\x01\x20\x01(\x0cR\x0cdataContract\x126\n\x05p\
    roof\x18\x02\x20\x01(\x0b2\x20.org.dash.platform.dapi.v0.ProofR\x05proof\
    \x12G\n\x08metadata\x18\x03\x20\x01(\x0b2+.org.dash.platform.dapi.v0.Res\
    ponseMetadataR\x08metadata\"\x8a\x02\n\x13GetDocumentsRequest\x12(\n\x10\
    data_contract_id\x18\x01\x20\x01(\x0cR\x0edataContractId\x12#\n\rdocumen\
    t_type\x18\x02\x20\x01(\tR\x0cdocumentType\x12\x14\n\x05where\x18\x03\
    \x20\x01(\x0cR\x05where\x12\x19\n\x08order_by\x18\x04\x20\x01(\x0cR\x07o\
    rderBy\x12\x14\n\x05limit\x18\x05\x20\x01(\rR\x05limit\x12!\n\x0bstart_a\
    fter\x18\x06\x20\x01(\x0cH\0R\nstartAfter\x12\x1b\n\x08start_at\x18\x07\
    \x20\x01(\x0cH\0R\x07startAt\x12\x14\n\x05prove\x18\x08\x20\x01(\x08R\
    \x05proveB\x07\n\x05start\"\xb5\x01\n\x14GetDocumentsResponse\x12\x1c\n\
    \tdocuments\x18\x01\x20\x03(\x0cR\tdocuments\x126\n\x05proof\x18\x02\x20\
    \x01(\x0b2\x20.org.dash.platform.dapi.v0.ProofR\x05proof\x12G\n\x08metad\
    ata\x18\x03\x20\x01(\x0b2+.org.dash.platform.dapi.v0.ResponseMetadataR\
    \x08metadata\"i\n%GetIdentitiesByPublicKeyHashesRequest\x12*\n\x11public\
    _key_hashes\x18\x01\x20\x03(\x0cR\x0fpublicKeyHashes\x12\x14\n\x05prove\
    \x18\x02\x20\x01(\x08R\x05prove\"\xc9\x01\n&GetIdentitiesByPublicKeyHash\
    esResponse\x12\x1e\n\nidentities\x18\x01\x20\x03(\x0cR\nidentities\x126\
    \n\x05proof\x18\x02\x20\x01(\x0b2\x20.org.dash.platform.dapi.v0.ProofR\
    \x05proof\x12G\n\x08metadata\x18\x03\x20\x01(\x0b2+.org.dash.platform.da\
    pi.v0.ResponseMetadataR\x08metadata\"o\n#WaitForStateTransitionResultReq\
    uest\x122\n\x15state_transition_hash\x18\x01\x20\x01(\x0cR\x13stateTrans\
    itionHash\x12\x14\n\x05prove\x18\x02\x20\x01(\x08R\x05prove\"\x88\x02\n$\
    WaitForStateTransitionResultResponse\x12P\n\x05error\x18\x01\x20\x01(\
    \x0b28.org.dash.platform.dapi.v0.StateTransitionBroadcastErrorH\0R\x05er\
    ror\x128\n\x05proof\x18\x02\x20\x01(\x0b2\x20.org.dash.platform.dapi.v0.\
    ProofH\0R\x05proof\x12G\n\x08metadata\x18\x03\x20\x01(\x0b2+.org.dash.pl\
    atform.dapi.v0.ResponseMetadataR\x08metadataB\x0b\n\tresponses\"n\n\x14C\
    onsensusParamsBlock\x12\x1b\n\tmax_bytes\x18\x01\x20\x01(\tR\x08maxBytes\
    \x12\x17\n\x07max_gas\x18\x02\x20\x01(\tR\x06maxGas\x12\x20\n\x0ctime_io\
    ta_ms\x18\x03\x20\x01(\tR\ntimeIotaMs\"\x8d\x01\n\x17ConsensusParamsEvid\
    ence\x12+\n\x12max_age_num_blocks\x18\x01\x20\x01(\tR\x0fmaxAgeNumBlocks\
    \x12(\n\x10max_age_duration\x18\x02\x20\x01(\tR\x0emaxAgeDuration\x12\
    \x1b\n\tmax_bytes\x18\x03\x20\x01(\tR\x08maxBytes\"I\n\x19GetConsensusPa\
    ramsRequest\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06height\x12\x14\
    \n\x05prove\x18\x02\x20\x01(\x08R\x05prove\"\xb3\x01\n\x1aGetConsensusPa\
    ramsResponse\x12E\n\x05block\x18\x01\x20\x01(\x0b2/.org.dash.platform.da\
    pi.v0.ConsensusParamsBlockR\x05block\x12N\n\x08evidence\x18\x02\x20\x01(\
    \x0b22.org.dash.platform.dapi.v0.ConsensusParamsEvidenceR\x08evidence2\
    \xc7\x07\n\x08Platform\x12\x93\x01\n\x18broadcastStateTransition\x12:.or\
    g.dash.platform.dapi.v0.BroadcastStateTransitionRequest\x1a;.org.dash.pl\
    atform.dapi.v0.BroadcastStateTransitionResponse\x12l\n\x0bgetIdentity\
    \x12-.org.dash.platform.dapi.v0.GetIdentityRequest\x1a..org.dash.platfor\
    m.dapi.v0.GetIdentityResponse\x12x\n\x0fgetDataContract\x121.org.dash.pl\
    atform.dapi.v0.GetDataContractRequest\x1a2.org.dash.platform.dapi.v0.Get\
    DataContractResponse\x12o\n\x0cgetDocuments\x12..org.dash.platform.dapi.\
    v0.GetDocumentsRequest\x1a/.org.dash.platform.dapi.v0.GetDocumentsRespon\
    se\x12\xa5\x01\n\x1egetIdentitiesByPublicKeyHashes\x12@.org.dash.platfor\
    m.dapi.v0.GetIdentitiesByPublicKeyHashesRequest\x1aA.org.dash.platform.d\
    api.v0.GetIdentitiesByPublicKeyHashesResponse\x12\x9f\x01\n\x1cwaitForSt\
    ateTransitionResult\x12>.org.dash.platform.dapi.v0.WaitForStateTransitio\
    nResultRequest\x1a?.org.dash.platform.dapi.v0.WaitForStateTransitionResu\
    ltResponse\x12\x81\x01\n\x12getConsensusParams\x124.org.dash.platform.da\
    pi.v0.GetConsensusParamsRequest\x1a5.org.dash.platform.dapi.v0.GetConsen\
    susParamsResponseJ\xda\x1e\n\x07\x12\x05\0\0\x85\x01\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\"\n\t\n\x02\x03\0\x12\x03\
    \x04\0)\n\n\n\x02\x06\0\x12\x04\x06\0\x0e\x01\n\n\n\x03\x06\0\x01\x12\
    \x03\x06\x08\x10\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x02l\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x03\x07\x06\x1e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \x07\x20?\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x07Jj\n\x0b\n\x04\x06\0\
    \x02\x01\x12\x03\x08\x02E\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\x06\
    \x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x13%\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x080C\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x02Q\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\t\x06\x15\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03\t\x17-\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t8O\n\x0b\n\
    \x04\x06\0\x02\x03\x12\x03\n\x02H\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \n\x06\x12\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\n\x14'\n\x0c\n\x05\x06\
    \0\x02\x03\x03\x12\x03\n2F\n\x0b\n\x04\x06\0\x02\x04\x12\x03\x0b\x02~\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x0b\x06$\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03\x0b&K\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0bV|\n\x0b\n\
    \x04\x06\0\x02\x05\x12\x03\x0c\x02x\n\x0c\n\x05\x06\0\x02\x05\x01\x12\
    \x03\x0c\x06\"\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x0c$G\n\x0c\n\x05\
    \x06\0\x02\x05\x03\x12\x03\x0cRv\n\x0b\n\x04\x06\0\x02\x06\x12\x03\r\x02\
    Z\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\r\x06\x18\n\x0c\n\x05\x06\0\x02\
    \x06\x02\x12\x03\r\x1a3\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\r>X\n\n\n\
    \x02\x04\0\x12\x04\x10\0\x15\x01\n\n\n\x03\x04\0\x01\x12\x03\x10\x08\r\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x11\x02\x19\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x11\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x08\x14\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x11\x17\x18\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x12\x02\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x12\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x12\x08\x13\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x12\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x13\x02\
    \x16\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x13\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x13\x08\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x13\x14\x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x14\x02\x13\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x14\t\x0e\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x14\x11\x12\n\n\n\
    \x02\x04\x01\x12\x04\x17\0\x1c\x01\n\n\n\x03\x04\x01\x01\x12\x03\x17\x08\
    \x18\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x02\x13\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03\x18\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x18\
    \x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x18\x11\x12\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x19\x02&\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03\x19\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\t!\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x19$%\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x1a\x02\x15\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1a\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x1a\t\x10\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x1a\x13\x14\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1b\x02\
    \x1e\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03\x1b\t\x19\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03\x1b\x1c\x1d\n\n\n\x02\x04\x02\x12\x04\x1e\0\"\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x1e\x08%\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1f\x02\x12\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x1f\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1f\x10\x11\
    \n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x20\x02\x15\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x20\
    \t\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x20\x13\x14\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03!\x02\x11\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03!\x02\x07\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03!\x08\x0c\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03!\x0f\x10\n\n\n\x02\x04\x03\x12\x04$\0&\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03$\x08'\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03%\x02\x1d\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03%\x02\x07\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03%\x08\x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03%\x1b\x1c\n\n\n\x02\x04\x04\x12\x04(\0*\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03(\x08(\n\n\n\x02\x04\x05\x12\x04,\0/\x01\n\n\n\x03\x04\x05\x01\
    \x12\x03,\x08\x1a\n\x0b\n\x04\x04\x05\x02\0\x12\x03-\x02\x0f\n\x0c\n\x05\
    \x04\x05\x02\0\x05\x12\x03-\x02\x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03-\x08\n\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03-\r\x0e\n\x0b\n\x04\x04\
    \x05\x02\x01\x12\x03.\x02\x11\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03.\
    \x02\x06\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03.\x07\x0c\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03.\x0f\x10\n\n\n\x02\x04\x06\x12\x041\05\x01\
    \n\n\n\x03\x04\x06\x01\x12\x031\x08\x1b\n\x0b\n\x04\x04\x06\x02\0\x12\
    \x032\x02\x15\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x032\x02\x07\n\x0c\n\x05\
    \x04\x06\x02\0\x01\x12\x032\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x03\x12\
    \x032\x13\x14\n\x0b\n\x04\x04\x06\x02\x01\x12\x033\x02\x12\n\x0c\n\x05\
    \x04\x06\x02\x01\x06\x12\x033\x02\x07\n\x0c\n\x05\x04\x06\x02\x01\x01\
    \x12\x033\x08\r\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x033\x10\x11\n\x0b\n\
    \x04\x04\x06\x02\x02\x12\x034\x02\x20\n\x0c\n\x05\x04\x06\x02\x02\x06\
    \x12\x034\x02\x12\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x034\x13\x1b\n\x0c\
    \n\x05\x04\x06\x02\x02\x03\x12\x034\x1e\x1f\n\n\n\x02\x04\x07\x12\x047\
    \x01:\x01\n\n\n\x03\x04\x07\x01\x12\x037\t\x1f\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x038\x02\x0f\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x038\x02\x07\n\x0c\n\
    \x05\x04\x07\x02\0\x01\x12\x038\x08\n\n\x0c\n\x05\x04\x07\x02\0\x03\x12\
    \x038\r\x0e\n\x0b\n\x04\x04\x07\x02\x01\x12\x039\x02\x11\n\x0c\n\x05\x04\
    \x07\x02\x01\x05\x12\x039\x02\x06\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x039\x07\x0c\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x039\x0f\x10\n\n\n\x02\
    \x04\x08\x12\x04<\0@\x01\n\n\n\x03\x04\x08\x01\x12\x03<\x08\x1f\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x03=\x02\x1a\n\x0c\n\x05\x04\x08\x02\0\x05\x12\
    \x03=\x02\x07\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03=\x08\x15\n\x0c\n\x05\
    \x04\x08\x02\0\x03\x12\x03=\x18\x19\n\x0b\n\x04\x04\x08\x02\x01\x12\x03>\
    \x02\x12\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03>\x02\x07\n\x0c\n\x05\
    \x04\x08\x02\x01\x01\x12\x03>\x08\r\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\
    \x03>\x10\x11\n\x0b\n\x04\x04\x08\x02\x02\x12\x03?\x02\x20\n\x0c\n\x05\
    \x04\x08\x02\x02\x06\x12\x03?\x02\x12\n\x0c\n\x05\x04\x08\x02\x02\x01\
    \x12\x03?\x13\x1b\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03?\x1e\x1f\n\n\n\
    \x02\x04\t\x12\x04B\0Q\x01\n\n\n\x03\x04\t\x01\x12\x03B\x08\x1b\n\x0b\n\
    \x04\x04\t\x02\0\x12\x03C\x02\x1d\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03C\
    \x02\x07\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03C\x08\x18\n\x0c\n\x05\x04\t\
    \x02\0\x03\x12\x03C\x1b\x1c\n\x0b\n\x04\x04\t\x02\x01\x12\x03D\x02\x1b\n\
    \x0c\n\x05\x04\t\x02\x01\x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\t\x02\x01\
    \x01\x12\x03D\t\x16\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03D\x19\x1a\n\x0b\
    \n\x04\x04\t\x02\x02\x12\x03F\x02\x12\n\x0c\n\x05\x04\t\x02\x02\x05\x12\
    \x03F\x02\x07\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03F\x08\r\n\x0c\n\x05\
    \x04\t\x02\x02\x03\x12\x03F\x10\x11\n\x0b\n\x04\x04\t\x02\x03\x12\x03G\
    \x02\x15\n\x0c\n\x05\x04\t\x02\x03\x05\x12\x03G\x02\x07\n\x0c\n\x05\x04\
    \t\x02\x03\x01\x12\x03G\x08\x10\n\x0c\n\x05\x04\t\x02\x03\x03\x12\x03G\
    \x13\x14\n\x0b\n\x04\x04\t\x02\x04\x12\x03I\x02\x13\n\x0c\n\x05\x04\t\
    \x02\x04\x05\x12\x03I\x02\x08\n\x0c\n\x05\x04\t\x02\x04\x01\x12\x03I\t\
    \x0e\n\x0c\n\x05\x04\t\x02\x04\x03\x12\x03I\x11\x12\n\x0c\n\x04\x04\t\
    \x08\0\x12\x04K\x04N\x05\n\x0c\n\x05\x04\t\x08\0\x01\x12\x03K\n\x0f\n\
    \x0b\n\x04\x04\t\x02\x05\x12\x03L\x06\x1c\n\x0c\n\x05\x04\t\x02\x05\x05\
    \x12\x03L\x06\x0b\n\x0c\n\x05\x04\t\x02\x05\x01\x12\x03L\x0c\x17\n\x0c\n\
    \x05\x04\t\x02\x05\x03\x12\x03L\x1a\x1b\n\x0b\n\x04\x04\t\x02\x06\x12\
    \x03M\x06\x19\n\x0c\n\x05\x04\t\x02\x06\x05\x12\x03M\x06\x0b\n\x0c\n\x05\
    \x04\t\x02\x06\x01\x12\x03M\x0c\x14\n\x0c\n\x05\x04\t\x02\x06\x03\x12\
    \x03M\x17\x18\n\x0b\n\x04\x04\t\x02\x07\x12\x03P\x02\x11\n\x0c\n\x05\x04\
    \t\x02\x07\x05\x12\x03P\x02\x06\n\x0c\n\x05\x04\t\x02\x07\x01\x12\x03P\
    \x07\x0c\n\x0c\n\x05\x04\t\x02\x07\x03\x12\x03P\x0f\x10\n\n\n\x02\x04\n\
    \x12\x04S\0W\x01\n\n\n\x03\x04\n\x01\x12\x03S\x08\x1c\n\x0b\n\x04\x04\n\
    \x02\0\x12\x03T\x02\x1f\n\x0c\n\x05\x04\n\x02\0\x04\x12\x03T\x02\n\n\x0c\
    \n\x05\x04\n\x02\0\x05\x12\x03T\x0b\x10\n\x0c\n\x05\x04\n\x02\0\x01\x12\
    \x03T\x11\x1a\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03T\x1d\x1e\n\x0b\n\x04\
    \x04\n\x02\x01\x12\x03U\x02\x12\n\x0c\n\x05\x04\n\x02\x01\x06\x12\x03U\
    \x02\x07\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03U\x08\r\n\x0c\n\x05\x04\n\
    \x02\x01\x03\x12\x03U\x10\x11\n\x0b\n\x04\x04\n\x02\x02\x12\x03V\x02\x20\
    \n\x0c\n\x05\x04\n\x02\x02\x06\x12\x03V\x02\x12\n\x0c\n\x05\x04\n\x02\
    \x02\x01\x12\x03V\x13\x1b\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03V\x1e\x1f\
    \n\n\n\x02\x04\x0b\x12\x04Y\0\\\x01\n\n\n\x03\x04\x0b\x01\x12\x03Y\x08-\
    \n\x0b\n\x04\x04\x0b\x02\0\x12\x03Z\x02'\n\x0c\n\x05\x04\x0b\x02\0\x04\
    \x12\x03Z\x02\n\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03Z\x0b\x10\n\x0c\n\
    \x05\x04\x0b\x02\0\x01\x12\x03Z\x11\"\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\
    \x03Z%&\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03[\x02\x11\n\x0c\n\x05\x04\x0b\
    \x02\x01\x05\x12\x03[\x02\x06\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03[\
    \x07\x0c\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03[\x0f\x10\n\n\n\x02\x04\
    \x0c\x12\x04^\0b\x01\n\n\n\x03\x04\x0c\x01\x12\x03^\x08.\n\x0b\n\x04\x04\
    \x0c\x02\0\x12\x03_\x02\x20\n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03_\x02\n\
    \n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03_\x0b\x10\n\x0c\n\x05\x04\x0c\x02\
    \0\x01\x12\x03_\x11\x1b\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03_\x1e\x1f\n\
    \x0b\n\x04\x04\x0c\x02\x01\x12\x03`\x02\x12\n\x0c\n\x05\x04\x0c\x02\x01\
    \x06\x12\x03`\x02\x07\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03`\x08\r\n\
    \x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03`\x10\x11\n\x0b\n\x04\x04\x0c\x02\
    \x02\x12\x03a\x02\x20\n\x0c\n\x05\x04\x0c\x02\x02\x06\x12\x03a\x02\x12\n\
    \x0c\n\x05\x04\x0c\x02\x02\x01\x12\x03a\x13\x1b\n\x0c\n\x05\x04\x0c\x02\
    \x02\x03\x12\x03a\x1e\x1f\n\n\n\x02\x04\r\x12\x04d\0g\x01\n\n\n\x03\x04\
    \r\x01\x12\x03d\x08+\n\x0b\n\x04\x04\r\x02\0\x12\x03e\x02\"\n\x0c\n\x05\
    \x04\r\x02\0\x05\x12\x03e\x02\x07\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03e\
    \x08\x1d\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03e\x20!\n\x0b\n\x04\x04\r\x02\
    \x01\x12\x03f\x02\x11\n\x0c\n\x05\x04\r\x02\x01\x05\x12\x03f\x02\x06\n\
    \x0c\n\x05\x04\r\x02\x01\x01\x12\x03f\x07\x0c\n\x0c\n\x05\x04\r\x02\x01\
    \x03\x12\x03f\x0f\x10\n\n\n\x02\x04\x0e\x12\x04i\0o\x01\n\n\n\x03\x04\
    \x0e\x01\x12\x03i\x08,\n\x0c\n\x04\x04\x0e\x08\0\x12\x04j\x02m\x03\n\x0c\
    \n\x05\x04\x0e\x08\0\x01\x12\x03j\x08\x11\n\x0b\n\x04\x04\x0e\x02\0\x12\
    \x03k\x04,\n\x0c\n\x05\x04\x0e\x02\0\x06\x12\x03k\x04!\n\x0c\n\x05\x04\
    \x0e\x02\0\x01\x12\x03k\"'\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03k*+\n\
    \x0b\n\x04\x04\x0e\x02\x01\x12\x03l\x04\x14\n\x0c\n\x05\x04\x0e\x02\x01\
    \x06\x12\x03l\x04\t\n\x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03l\n\x0f\n\x0c\
    \n\x05\x04\x0e\x02\x01\x03\x12\x03l\x12\x13\n\x0b\n\x04\x04\x0e\x02\x02\
    \x12\x03n\x02\x20\n\x0c\n\x05\x04\x0e\x02\x02\x06\x12\x03n\x02\x12\n\x0c\
    \n\x05\x04\x0e\x02\x02\x01\x12\x03n\x13\x1b\n\x0c\n\x05\x04\x0e\x02\x02\
    \x03\x12\x03n\x1e\x1f\n\n\n\x02\x04\x0f\x12\x04q\0u\x01\n\n\n\x03\x04\
    \x0f\x01\x12\x03q\x08\x1c\n\x0b\n\x04\x04\x0f\x02\0\x12\x03r\x02\x17\n\
    \x0c\n\x05\x04\x0f\x02\0\x05\x12\x03r\x02\x08\n\x0c\n\x05\x04\x0f\x02\0\
    \x01\x12\x03r\t\x12\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\x03r\x15\x16\n\x0b\
    \n\x04\x04\x0f\x02\x01\x12\x03s\x02\x15\n\x0c\n\x05\x04\x0f\x02\x01\x05\
    \x12\x03s\x02\x08\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\x03s\t\x10\n\x0c\n\
    \x05\x04\x0f\x02\x01\x03\x12\x03s\x13\x14\n\x0b\n\x04\x04\x0f\x02\x02\
    \x12\x03t\x02\x1a\n\x0c\n\x05\x04\x0f\x02\x02\x05\x12\x03t\x02\x08\n\x0c\
    \n\x05\x04\x0f\x02\x02\x01\x12\x03t\t\x15\n\x0c\n\x05\x04\x0f\x02\x02\
    \x03\x12\x03t\x18\x19\n\n\n\x02\x04\x10\x12\x04w\0{\x01\n\n\n\x03\x04\
    \x10\x01\x12\x03w\x08\x1f\n\x0b\n\x04\x04\x10\x02\0\x12\x03x\x02\x20\n\
    \x0c\n\x05\x04\x10\x02\0\x05\x12\x03x\x02\x08\n\x0c\n\x05\x04\x10\x02\0\
    \x01\x12\x03x\t\x1b\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03x\x1e\x1f\n\x0b\
    \n\x04\x04\x10\x02\x01\x12\x03y\x02\x1e\n\x0c\n\x05\x04\x10\x02\x01\x05\
    \x12\x03y\x02\x08\n\x0c\n\x05\x04\x10\x02\x01\x01\x12\x03y\t\x19\n\x0c\n\
    \x05\x04\x10\x02\x01\x03\x12\x03y\x1c\x1d\n\x0b\n\x04\x04\x10\x02\x02\
    \x12\x03z\x02\x17\n\x0c\n\x05\x04\x10\x02\x02\x05\x12\x03z\x02\x08\n\x0c\
    \n\x05\x04\x10\x02\x02\x01\x12\x03z\t\x12\n\x0c\n\x05\x04\x10\x02\x02\
    \x03\x12\x03z\x15\x16\n\x0b\n\x02\x04\x11\x12\x05}\0\x80\x01\x01\n\n\n\
    \x03\x04\x11\x01\x12\x03}\x08!\n\x0b\n\x04\x04\x11\x02\0\x12\x03~\x02\
    \x13\n\x0c\n\x05\x04\x11\x02\0\x05\x12\x03~\x02\x07\n\x0c\n\x05\x04\x11\
    \x02\0\x01\x12\x03~\x08\x0e\n\x0c\n\x05\x04\x11\x02\0\x03\x12\x03~\x11\
    \x12\n\x0b\n\x04\x04\x11\x02\x01\x12\x03\x7f\x02\x11\n\x0c\n\x05\x04\x11\
    \x02\x01\x05\x12\x03\x7f\x02\x06\n\x0c\n\x05\x04\x11\x02\x01\x01\x12\x03\
    \x7f\x07\x0c\n\x0c\n\x05\x04\x11\x02\x01\x03\x12\x03\x7f\x0f\x10\n\x0c\n\
    \x02\x04\x12\x12\x06\x82\x01\0\x85\x01\x01\n\x0b\n\x03\x04\x12\x01\x12\
    \x04\x82\x01\x08\"\n\x0c\n\x04\x04\x12\x02\0\x12\x04\x83\x01\x02!\n\r\n\
    \x05\x04\x12\x02\0\x06\x12\x04\x83\x01\x02\x16\n\r\n\x05\x04\x12\x02\0\
    \x01\x12\x04\x83\x01\x17\x1c\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\x83\x01\
    \x1f\x20\n\x0c\n\x04\x04\x12\x02\x01\x12\x04\x84\x01\x02'\n\r\n\x05\x04\
    \x12\x02\x01\x06\x12\x04\x84\x01\x02\x19\n\r\n\x05\x04\x12\x02\x01\x01\
    \x12\x04\x84\x01\x1a\"\n\r\n\x05\x04\x12\x02\x01\x03\x12\x04\x84\x01%&b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(19);
            messages.push(Proof::generated_message_descriptor_data());
            messages.push(ResponseMetadata::generated_message_descriptor_data());
            messages.push(StateTransitionBroadcastError::generated_message_descriptor_data());
            messages.push(BroadcastStateTransitionRequest::generated_message_descriptor_data());
            messages.push(BroadcastStateTransitionResponse::generated_message_descriptor_data());
            messages.push(GetIdentityRequest::generated_message_descriptor_data());
            messages.push(GetIdentityResponse::generated_message_descriptor_data());
            messages.push(GetDataContractRequest::generated_message_descriptor_data());
            messages.push(GetDataContractResponse::generated_message_descriptor_data());
            messages.push(GetDocumentsRequest::generated_message_descriptor_data());
            messages.push(GetDocumentsResponse::generated_message_descriptor_data());
            messages.push(GetIdentitiesByPublicKeyHashesRequest::generated_message_descriptor_data());
            messages.push(GetIdentitiesByPublicKeyHashesResponse::generated_message_descriptor_data());
            messages.push(WaitForStateTransitionResultRequest::generated_message_descriptor_data());
            messages.push(WaitForStateTransitionResultResponse::generated_message_descriptor_data());
            messages.push(ConsensusParamsBlock::generated_message_descriptor_data());
            messages.push(ConsensusParamsEvidence::generated_message_descriptor_data());
            messages.push(GetConsensusParamsRequest::generated_message_descriptor_data());
            messages.push(GetConsensusParamsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
