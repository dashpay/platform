// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `platform.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ProvedResult)
pub struct ProvedResult {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ProvedResult.grovedb_proof)
    pub grovedb_proof: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ProvedResult.quorum_hash)
    pub quorum_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ProvedResult.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ProvedResult.round)
    pub round: u32,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ProvedResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProvedResult {
    fn default() -> &'a ProvedResult {
        <ProvedResult as ::protobuf::Message>::default_instance()
    }
}

impl ProvedResult {
    pub fn new() -> ProvedResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grovedb_proof",
            |m: &ProvedResult| { &m.grovedb_proof },
            |m: &mut ProvedResult| { &mut m.grovedb_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quorum_hash",
            |m: &ProvedResult| { &m.quorum_hash },
            |m: &mut ProvedResult| { &mut m.quorum_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &ProvedResult| { &m.signature },
            |m: &mut ProvedResult| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &ProvedResult| { &m.round },
            |m: &mut ProvedResult| { &mut m.round },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProvedResult>(
            "ProvedResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProvedResult {
    const NAME: &'static str = "ProvedResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.grovedb_proof = is.read_bytes()?;
                },
                18 => {
                    self.quorum_hash = is.read_bytes()?;
                },
                26 => {
                    self.signature = is.read_bytes()?;
                },
                32 => {
                    self.round = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.grovedb_proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.grovedb_proof);
        }
        if !self.quorum_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.quorum_hash);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.round);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.grovedb_proof.is_empty() {
            os.write_bytes(1, &self.grovedb_proof)?;
        }
        if !self.quorum_hash.is_empty() {
            os.write_bytes(2, &self.quorum_hash)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        if self.round != 0 {
            os.write_uint32(4, self.round)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProvedResult {
        ProvedResult::new()
    }

    fn clear(&mut self) {
        self.grovedb_proof.clear();
        self.quorum_hash.clear();
        self.signature.clear();
        self.round = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProvedResult {
        static instance: ProvedResult = ProvedResult {
            grovedb_proof: ::std::vec::Vec::new(),
            quorum_hash: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            round: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProvedResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProvedResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProvedResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProvedResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ResponseMetadata)
pub struct ResponseMetadata {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.height)
    pub height: i64,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.core_chain_locked_height)
    pub core_chain_locked_height: u32,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.time_ms)
    pub time_ms: u64,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResponseMetadata.protocol_version)
    pub protocol_version: u32,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ResponseMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResponseMetadata {
    fn default() -> &'a ResponseMetadata {
        <ResponseMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ResponseMetadata {
    pub fn new() -> ResponseMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &ResponseMetadata| { &m.height },
            |m: &mut ResponseMetadata| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "core_chain_locked_height",
            |m: &ResponseMetadata| { &m.core_chain_locked_height },
            |m: &mut ResponseMetadata| { &mut m.core_chain_locked_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_ms",
            |m: &ResponseMetadata| { &m.time_ms },
            |m: &mut ResponseMetadata| { &mut m.time_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "protocol_version",
            |m: &ResponseMetadata| { &m.protocol_version },
            |m: &mut ResponseMetadata| { &mut m.protocol_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResponseMetadata>(
            "ResponseMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResponseMetadata {
    const NAME: &'static str = "ResponseMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                16 => {
                    self.core_chain_locked_height = is.read_uint32()?;
                },
                24 => {
                    self.time_ms = is.read_uint64()?;
                },
                32 => {
                    self.protocol_version = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        if self.core_chain_locked_height != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.core_chain_locked_height);
        }
        if self.time_ms != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.time_ms);
        }
        if self.protocol_version != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.protocol_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if self.core_chain_locked_height != 0 {
            os.write_uint32(2, self.core_chain_locked_height)?;
        }
        if self.time_ms != 0 {
            os.write_uint64(3, self.time_ms)?;
        }
        if self.protocol_version != 0 {
            os.write_uint32(4, self.protocol_version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResponseMetadata {
        ResponseMetadata::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.core_chain_locked_height = 0;
        self.time_ms = 0;
        self.protocol_version = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResponseMetadata {
        static instance: ResponseMetadata = ResponseMetadata {
            height: 0,
            core_chain_locked_height: 0,
            time_ms: 0,
            protocol_version: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResponseMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResponseMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResponseMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.StateTransitionBroadcastError)
pub struct StateTransitionBroadcastError {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.code)
    pub code: u32,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.StateTransitionBroadcastError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StateTransitionBroadcastError {
    fn default() -> &'a StateTransitionBroadcastError {
        <StateTransitionBroadcastError as ::protobuf::Message>::default_instance()
    }
}

impl StateTransitionBroadcastError {
    pub fn new() -> StateTransitionBroadcastError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &StateTransitionBroadcastError| { &m.code },
            |m: &mut StateTransitionBroadcastError| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &StateTransitionBroadcastError| { &m.message },
            |m: &mut StateTransitionBroadcastError| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &StateTransitionBroadcastError| { &m.data },
            |m: &mut StateTransitionBroadcastError| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StateTransitionBroadcastError>(
            "StateTransitionBroadcastError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StateTransitionBroadcastError {
    const NAME: &'static str = "StateTransitionBroadcastError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_uint32()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != 0 {
            os.write_uint32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StateTransitionBroadcastError {
        StateTransitionBroadcastError::new()
    }

    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StateTransitionBroadcastError {
        static instance: StateTransitionBroadcastError = StateTransitionBroadcastError {
            code: 0,
            message: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StateTransitionBroadcastError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StateTransitionBroadcastError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StateTransitionBroadcastError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateTransitionBroadcastError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest)
pub struct BroadcastStateTransitionRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.state_transition)
    pub state_transition: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BroadcastStateTransitionRequest {
    fn default() -> &'a BroadcastStateTransitionRequest {
        <BroadcastStateTransitionRequest as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastStateTransitionRequest {
    pub fn new() -> BroadcastStateTransitionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state_transition",
            |m: &BroadcastStateTransitionRequest| { &m.state_transition },
            |m: &mut BroadcastStateTransitionRequest| { &mut m.state_transition },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BroadcastStateTransitionRequest>(
            "BroadcastStateTransitionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BroadcastStateTransitionRequest {
    const NAME: &'static str = "BroadcastStateTransitionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.state_transition = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.state_transition.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.state_transition);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.state_transition.is_empty() {
            os.write_bytes(1, &self.state_transition)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BroadcastStateTransitionRequest {
        BroadcastStateTransitionRequest::new()
    }

    fn clear(&mut self) {
        self.state_transition.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BroadcastStateTransitionRequest {
        static instance: BroadcastStateTransitionRequest = BroadcastStateTransitionRequest {
            state_transition: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BroadcastStateTransitionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BroadcastStateTransitionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BroadcastStateTransitionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastStateTransitionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.BroadcastStateTransitionResponse)
pub struct BroadcastStateTransitionResponse {
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.BroadcastStateTransitionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BroadcastStateTransitionResponse {
    fn default() -> &'a BroadcastStateTransitionResponse {
        <BroadcastStateTransitionResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastStateTransitionResponse {
    pub fn new() -> BroadcastStateTransitionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BroadcastStateTransitionResponse>(
            "BroadcastStateTransitionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BroadcastStateTransitionResponse {
    const NAME: &'static str = "BroadcastStateTransitionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BroadcastStateTransitionResponse {
        BroadcastStateTransitionResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BroadcastStateTransitionResponse {
        static instance: BroadcastStateTransitionResponse = BroadcastStateTransitionResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BroadcastStateTransitionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BroadcastStateTransitionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BroadcastStateTransitionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastStateTransitionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.SingleItemResponse)
pub struct SingleItemResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.SingleItemResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // message oneof groups
    pub result: ::std::option::Option<single_item_response::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.SingleItemResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SingleItemResponse {
    fn default() -> &'a SingleItemResponse {
        <SingleItemResponse as ::protobuf::Message>::default_instance()
    }
}

impl SingleItemResponse {
    pub fn new() -> SingleItemResponse {
        ::std::default::Default::default()
    }

    // bytes non_proved_result = 1;

    pub fn non_proved_result(&self) -> &[u8] {
        match self.result {
            ::std::option::Option::Some(single_item_response::Result::NonProvedResult(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_non_proved_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_non_proved_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(single_item_response::Result::NonProvedResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_non_proved_result(&mut self, v: ::std::vec::Vec<u8>) {
        self.result = ::std::option::Option::Some(single_item_response::Result::NonProvedResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_non_proved_result(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(single_item_response::Result::NonProvedResult(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(single_item_response::Result::NonProvedResult(::std::vec::Vec::new()));
        }
        match self.result {
            ::std::option::Option::Some(single_item_response::Result::NonProvedResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_non_proved_result(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_non_proved_result() {
            match self.result.take() {
                ::std::option::Option::Some(single_item_response::Result::NonProvedResult(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .org.dash.platform.dapi.v0.ProvedResult proved_result = 2;

    pub fn proved_result(&self) -> &ProvedResult {
        match self.result {
            ::std::option::Option::Some(single_item_response::Result::ProvedResult(ref v)) => v,
            _ => <ProvedResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_proved_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_proved_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(single_item_response::Result::ProvedResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proved_result(&mut self, v: ProvedResult) {
        self.result = ::std::option::Option::Some(single_item_response::Result::ProvedResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proved_result(&mut self) -> &mut ProvedResult {
        if let ::std::option::Option::Some(single_item_response::Result::ProvedResult(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(single_item_response::Result::ProvedResult(ProvedResult::new()));
        }
        match self.result {
            ::std::option::Option::Some(single_item_response::Result::ProvedResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proved_result(&mut self) -> ProvedResult {
        if self.has_proved_result() {
            match self.result.take() {
                ::std::option::Option::Some(single_item_response::Result::ProvedResult(v)) => v,
                _ => panic!(),
            }
        } else {
            ProvedResult::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "non_proved_result",
            SingleItemResponse::has_non_proved_result,
            SingleItemResponse::non_proved_result,
            SingleItemResponse::set_non_proved_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ProvedResult>(
            "proved_result",
            SingleItemResponse::has_proved_result,
            SingleItemResponse::proved_result,
            SingleItemResponse::mut_proved_result,
            SingleItemResponse::set_proved_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &SingleItemResponse| { &m.metadata },
            |m: &mut SingleItemResponse| { &mut m.metadata },
        ));
        oneofs.push(single_item_response::Result::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SingleItemResponse>(
            "SingleItemResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SingleItemResponse {
    const NAME: &'static str = "SingleItemResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = ::std::option::Option::Some(single_item_response::Result::NonProvedResult(is.read_bytes()?));
                },
                18 => {
                    self.result = ::std::option::Option::Some(single_item_response::Result::ProvedResult(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &single_item_response::Result::NonProvedResult(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &single_item_response::Result::ProvedResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &single_item_response::Result::NonProvedResult(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &single_item_response::Result::ProvedResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SingleItemResponse {
        SingleItemResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SingleItemResponse {
        static instance: SingleItemResponse = SingleItemResponse {
            metadata: ::protobuf::MessageField::none(),
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SingleItemResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SingleItemResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SingleItemResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SingleItemResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SingleItemResponse`
pub mod single_item_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:org.dash.platform.dapi.v0.SingleItemResponse.result)
    pub enum Result {
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.SingleItemResponse.non_proved_result)
        NonProvedResult(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.SingleItemResponse.proved_result)
        ProvedResult(super::ProvedResult),
    }

    impl ::protobuf::Oneof for Result {
    }

    impl ::protobuf::OneofFull for Result {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SingleItemResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("result").unwrap()).clone()
        }
    }

    impl Result {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Result>("result")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ResultList)
pub struct ResultList {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ResultList.items)
    pub items: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ResultList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResultList {
    fn default() -> &'a ResultList {
        <ResultList as ::protobuf::Message>::default_instance()
    }
}

impl ResultList {
    pub fn new() -> ResultList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &ResultList| { &m.items },
            |m: &mut ResultList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResultList>(
            "ResultList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResultList {
    const NAME: &'static str = "ResultList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResultList {
        ResultList::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResultList {
        static instance: ResultList = ResultList {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResultList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResultList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResultList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResultList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.MultiItemResponse)
pub struct MultiItemResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.MultiItemResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // message oneof groups
    pub result: ::std::option::Option<multi_item_response::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.MultiItemResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MultiItemResponse {
    fn default() -> &'a MultiItemResponse {
        <MultiItemResponse as ::protobuf::Message>::default_instance()
    }
}

impl MultiItemResponse {
    pub fn new() -> MultiItemResponse {
        ::std::default::Default::default()
    }

    // .org.dash.platform.dapi.v0.ResultList non_proved_results = 1;

    pub fn non_proved_results(&self) -> &ResultList {
        match self.result {
            ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(ref v)) => v,
            _ => <ResultList as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_non_proved_results(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_non_proved_results(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_non_proved_results(&mut self, v: ResultList) {
        self.result = ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(v))
    }

    // Mutable pointer to the field.
    pub fn mut_non_proved_results(&mut self) -> &mut ResultList {
        if let ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(ResultList::new()));
        }
        match self.result {
            ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_non_proved_results(&mut self) -> ResultList {
        if self.has_non_proved_results() {
            match self.result.take() {
                ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(v)) => v,
                _ => panic!(),
            }
        } else {
            ResultList::new()
        }
    }

    // .org.dash.platform.dapi.v0.ProvedResult proved_result = 2;

    pub fn proved_result(&self) -> &ProvedResult {
        match self.result {
            ::std::option::Option::Some(multi_item_response::Result::ProvedResult(ref v)) => v,
            _ => <ProvedResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_proved_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_proved_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(multi_item_response::Result::ProvedResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proved_result(&mut self, v: ProvedResult) {
        self.result = ::std::option::Option::Some(multi_item_response::Result::ProvedResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proved_result(&mut self) -> &mut ProvedResult {
        if let ::std::option::Option::Some(multi_item_response::Result::ProvedResult(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(multi_item_response::Result::ProvedResult(ProvedResult::new()));
        }
        match self.result {
            ::std::option::Option::Some(multi_item_response::Result::ProvedResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proved_result(&mut self) -> ProvedResult {
        if self.has_proved_result() {
            match self.result.take() {
                ::std::option::Option::Some(multi_item_response::Result::ProvedResult(v)) => v,
                _ => panic!(),
            }
        } else {
            ProvedResult::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ResultList>(
            "non_proved_results",
            MultiItemResponse::has_non_proved_results,
            MultiItemResponse::non_proved_results,
            MultiItemResponse::mut_non_proved_results,
            MultiItemResponse::set_non_proved_results,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ProvedResult>(
            "proved_result",
            MultiItemResponse::has_proved_result,
            MultiItemResponse::proved_result,
            MultiItemResponse::mut_proved_result,
            MultiItemResponse::set_proved_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &MultiItemResponse| { &m.metadata },
            |m: &mut MultiItemResponse| { &mut m.metadata },
        ));
        oneofs.push(multi_item_response::Result::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MultiItemResponse>(
            "MultiItemResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MultiItemResponse {
    const NAME: &'static str = "MultiItemResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = ::std::option::Option::Some(multi_item_response::Result::NonProvedResults(is.read_message()?));
                },
                18 => {
                    self.result = ::std::option::Option::Some(multi_item_response::Result::ProvedResult(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &multi_item_response::Result::NonProvedResults(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &multi_item_response::Result::ProvedResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &multi_item_response::Result::NonProvedResults(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &multi_item_response::Result::ProvedResult(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MultiItemResponse {
        MultiItemResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MultiItemResponse {
        static instance: MultiItemResponse = MultiItemResponse {
            metadata: ::protobuf::MessageField::none(),
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MultiItemResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MultiItemResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MultiItemResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MultiItemResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MultiItemResponse`
pub mod multi_item_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:org.dash.platform.dapi.v0.MultiItemResponse.result)
    pub enum Result {
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.MultiItemResponse.non_proved_results)
        NonProvedResults(super::ResultList),
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.MultiItemResponse.proved_result)
        ProvedResult(super::ProvedResult),
    }

    impl ::protobuf::Oneof for Result {
    }

    impl ::protobuf::OneofFull for Result {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MultiItemResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("result").unwrap()).clone()
        }
    }

    impl Result {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Result>("result")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetSingleItemRequest)
pub struct GetSingleItemRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetSingleItemRequest.id)
    pub id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetSingleItemRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetSingleItemRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSingleItemRequest {
    fn default() -> &'a GetSingleItemRequest {
        <GetSingleItemRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSingleItemRequest {
    pub fn new() -> GetSingleItemRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetSingleItemRequest| { &m.id },
            |m: &mut GetSingleItemRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetSingleItemRequest| { &m.prove },
            |m: &mut GetSingleItemRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSingleItemRequest>(
            "GetSingleItemRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSingleItemRequest {
    const NAME: &'static str = "GetSingleItemRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_bytes()?;
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSingleItemRequest {
        GetSingleItemRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSingleItemRequest {
        static instance: GetSingleItemRequest = GetSingleItemRequest {
            id: ::std::vec::Vec::new(),
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSingleItemRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSingleItemRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSingleItemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSingleItemRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetMultiItemRequest)
pub struct GetMultiItemRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetMultiItemRequest.ids)
    pub ids: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetMultiItemRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetMultiItemRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMultiItemRequest {
    fn default() -> &'a GetMultiItemRequest {
        <GetMultiItemRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMultiItemRequest {
    pub fn new() -> GetMultiItemRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ids",
            |m: &GetMultiItemRequest| { &m.ids },
            |m: &mut GetMultiItemRequest| { &mut m.ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetMultiItemRequest| { &m.prove },
            |m: &mut GetMultiItemRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMultiItemRequest>(
            "GetMultiItemRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMultiItemRequest {
    const NAME: &'static str = "GetMultiItemRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ids.push(is.read_bytes()?);
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.ids {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.ids {
            os.write_bytes(1, &v)?;
        };
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMultiItemRequest {
        GetMultiItemRequest::new()
    }

    fn clear(&mut self) {
        self.ids.clear();
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMultiItemRequest {
        static instance: GetMultiItemRequest = GetMultiItemRequest {
            ids: ::std::vec::Vec::new(),
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMultiItemRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMultiItemRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMultiItemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMultiItemRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetDocumentsRequest)
pub struct GetDocumentsRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.data_contract_id)
    pub data_contract_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.document_type)
    pub document_type: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.where)
    pub where_: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.order_by)
    pub order_by: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.limit)
    pub limit: u32,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetDocumentsRequest.prove)
    pub prove: bool,
    // message oneof groups
    pub start: ::std::option::Option<get_documents_request::Start>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetDocumentsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDocumentsRequest {
    fn default() -> &'a GetDocumentsRequest {
        <GetDocumentsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDocumentsRequest {
    pub fn new() -> GetDocumentsRequest {
        ::std::default::Default::default()
    }

    // bytes start_after = 6;

    pub fn start_after(&self) -> &[u8] {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAfter(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_start_after(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start_after(&self) -> bool {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAfter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_after(&mut self, v: ::std::vec::Vec<u8>) {
        self.start = ::std::option::Option::Some(get_documents_request::Start::StartAfter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_after(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(get_documents_request::Start::StartAfter(_)) = self.start {
        } else {
            self.start = ::std::option::Option::Some(get_documents_request::Start::StartAfter(::std::vec::Vec::new()));
        }
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAfter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_after(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_start_after() {
            match self.start.take() {
                ::std::option::Option::Some(get_documents_request::Start::StartAfter(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes start_at = 7;

    pub fn start_at(&self) -> &[u8] {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAt(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_start_at(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start_at(&self) -> bool {
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_at(&mut self, v: ::std::vec::Vec<u8>) {
        self.start = ::std::option::Option::Some(get_documents_request::Start::StartAt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_at(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(get_documents_request::Start::StartAt(_)) = self.start {
        } else {
            self.start = ::std::option::Option::Some(get_documents_request::Start::StartAt(::std::vec::Vec::new()));
        }
        match self.start {
            ::std::option::Option::Some(get_documents_request::Start::StartAt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_at(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_start_at() {
            match self.start.take() {
                ::std::option::Option::Some(get_documents_request::Start::StartAt(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_contract_id",
            |m: &GetDocumentsRequest| { &m.data_contract_id },
            |m: &mut GetDocumentsRequest| { &mut m.data_contract_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "document_type",
            |m: &GetDocumentsRequest| { &m.document_type },
            |m: &mut GetDocumentsRequest| { &mut m.document_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "where",
            |m: &GetDocumentsRequest| { &m.where_ },
            |m: &mut GetDocumentsRequest| { &mut m.where_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_by",
            |m: &GetDocumentsRequest| { &m.order_by },
            |m: &mut GetDocumentsRequest| { &mut m.order_by },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &GetDocumentsRequest| { &m.limit },
            |m: &mut GetDocumentsRequest| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "start_after",
            GetDocumentsRequest::has_start_after,
            GetDocumentsRequest::start_after,
            GetDocumentsRequest::set_start_after,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "start_at",
            GetDocumentsRequest::has_start_at,
            GetDocumentsRequest::start_at,
            GetDocumentsRequest::set_start_at,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetDocumentsRequest| { &m.prove },
            |m: &mut GetDocumentsRequest| { &mut m.prove },
        ));
        oneofs.push(get_documents_request::Start::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDocumentsRequest>(
            "GetDocumentsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDocumentsRequest {
    const NAME: &'static str = "GetDocumentsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_contract_id = is.read_bytes()?;
                },
                18 => {
                    self.document_type = is.read_string()?;
                },
                26 => {
                    self.where_ = is.read_bytes()?;
                },
                34 => {
                    self.order_by = is.read_bytes()?;
                },
                40 => {
                    self.limit = is.read_uint32()?;
                },
                50 => {
                    self.start = ::std::option::Option::Some(get_documents_request::Start::StartAfter(is.read_bytes()?));
                },
                58 => {
                    self.start = ::std::option::Option::Some(get_documents_request::Start::StartAt(is.read_bytes()?));
                },
                64 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data_contract_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data_contract_id);
        }
        if !self.document_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.document_type);
        }
        if !self.where_.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.where_);
        }
        if !self.order_by.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.order_by);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.limit);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.start {
            match v {
                &get_documents_request::Start::StartAfter(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(6, &v);
                },
                &get_documents_request::Start::StartAt(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data_contract_id.is_empty() {
            os.write_bytes(1, &self.data_contract_id)?;
        }
        if !self.document_type.is_empty() {
            os.write_string(2, &self.document_type)?;
        }
        if !self.where_.is_empty() {
            os.write_bytes(3, &self.where_)?;
        }
        if !self.order_by.is_empty() {
            os.write_bytes(4, &self.order_by)?;
        }
        if self.limit != 0 {
            os.write_uint32(5, self.limit)?;
        }
        if self.prove != false {
            os.write_bool(8, self.prove)?;
        }
        if let ::std::option::Option::Some(ref v) = self.start {
            match v {
                &get_documents_request::Start::StartAfter(ref v) => {
                    os.write_bytes(6, v)?;
                },
                &get_documents_request::Start::StartAt(ref v) => {
                    os.write_bytes(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDocumentsRequest {
        GetDocumentsRequest::new()
    }

    fn clear(&mut self) {
        self.data_contract_id.clear();
        self.document_type.clear();
        self.where_.clear();
        self.order_by.clear();
        self.limit = 0;
        self.start = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDocumentsRequest {
        static instance: GetDocumentsRequest = GetDocumentsRequest {
            data_contract_id: ::std::vec::Vec::new(),
            document_type: ::std::string::String::new(),
            where_: ::std::vec::Vec::new(),
            order_by: ::std::vec::Vec::new(),
            limit: 0,
            prove: false,
            start: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDocumentsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDocumentsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDocumentsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDocumentsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GetDocumentsRequest`
pub mod get_documents_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:org.dash.platform.dapi.v0.GetDocumentsRequest.start)
    pub enum Start {
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.GetDocumentsRequest.start_after)
        StartAfter(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.GetDocumentsRequest.start_at)
        StartAt(::std::vec::Vec<u8>),
    }

    impl ::protobuf::Oneof for Start {
    }

    impl ::protobuf::OneofFull for Start {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GetDocumentsRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("start").unwrap()).clone()
        }
    }

    impl Start {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Start>("start")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest)
pub struct WaitForStateTransitionResultRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.state_transition_hash)
    pub state_transition_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WaitForStateTransitionResultRequest {
    fn default() -> &'a WaitForStateTransitionResultRequest {
        <WaitForStateTransitionResultRequest as ::protobuf::Message>::default_instance()
    }
}

impl WaitForStateTransitionResultRequest {
    pub fn new() -> WaitForStateTransitionResultRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state_transition_hash",
            |m: &WaitForStateTransitionResultRequest| { &m.state_transition_hash },
            |m: &mut WaitForStateTransitionResultRequest| { &mut m.state_transition_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &WaitForStateTransitionResultRequest| { &m.prove },
            |m: &mut WaitForStateTransitionResultRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WaitForStateTransitionResultRequest>(
            "WaitForStateTransitionResultRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WaitForStateTransitionResultRequest {
    const NAME: &'static str = "WaitForStateTransitionResultRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.state_transition_hash = is.read_bytes()?;
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.state_transition_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.state_transition_hash);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.state_transition_hash.is_empty() {
            os.write_bytes(1, &self.state_transition_hash)?;
        }
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WaitForStateTransitionResultRequest {
        WaitForStateTransitionResultRequest::new()
    }

    fn clear(&mut self) {
        self.state_transition_hash.clear();
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WaitForStateTransitionResultRequest {
        static instance: WaitForStateTransitionResultRequest = WaitForStateTransitionResultRequest {
            state_transition_hash: ::std::vec::Vec::new(),
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WaitForStateTransitionResultRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WaitForStateTransitionResultRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WaitForStateTransitionResultRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForStateTransitionResultRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse)
pub struct WaitForStateTransitionResultResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.metadata)
    pub metadata: ::protobuf::MessageField<ResponseMetadata>,
    // message oneof groups
    pub responses: ::std::option::Option<wait_for_state_transition_result_response::Responses>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WaitForStateTransitionResultResponse {
    fn default() -> &'a WaitForStateTransitionResultResponse {
        <WaitForStateTransitionResultResponse as ::protobuf::Message>::default_instance()
    }
}

impl WaitForStateTransitionResultResponse {
    pub fn new() -> WaitForStateTransitionResultResponse {
        ::std::default::Default::default()
    }

    // .org.dash.platform.dapi.v0.StateTransitionBroadcastError error = 1;

    pub fn error(&self) -> &StateTransitionBroadcastError {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(ref v)) => v,
            _ => <StateTransitionBroadcastError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_error(&mut self) {
        self.responses = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: StateTransitionBroadcastError) {
        self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut StateTransitionBroadcastError {
        if let ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(_)) = self.responses {
        } else {
            self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(StateTransitionBroadcastError::new()));
        }
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> StateTransitionBroadcastError {
        if self.has_error() {
            match self.responses.take() {
                ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            StateTransitionBroadcastError::new()
        }
    }

    // .org.dash.platform.dapi.v0.ProvedResult proof = 2;

    pub fn proof(&self) -> &ProvedResult {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(ref v)) => v,
            _ => <ProvedResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_proof(&mut self) {
        self.responses = ::std::option::Option::None;
    }

    pub fn has_proof(&self) -> bool {
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ProvedResult) {
        self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proof(&mut self) -> &mut ProvedResult {
        if let ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(_)) = self.responses {
        } else {
            self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(ProvedResult::new()));
        }
        match self.responses {
            ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proof(&mut self) -> ProvedResult {
        if self.has_proof() {
            match self.responses.take() {
                ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(v)) => v,
                _ => panic!(),
            }
        } else {
            ProvedResult::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StateTransitionBroadcastError>(
            "error",
            WaitForStateTransitionResultResponse::has_error,
            WaitForStateTransitionResultResponse::error,
            WaitForStateTransitionResultResponse::mut_error,
            WaitForStateTransitionResultResponse::set_error,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ProvedResult>(
            "proof",
            WaitForStateTransitionResultResponse::has_proof,
            WaitForStateTransitionResultResponse::proof,
            WaitForStateTransitionResultResponse::mut_proof,
            WaitForStateTransitionResultResponse::set_proof,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ResponseMetadata>(
            "metadata",
            |m: &WaitForStateTransitionResultResponse| { &m.metadata },
            |m: &mut WaitForStateTransitionResultResponse| { &mut m.metadata },
        ));
        oneofs.push(wait_for_state_transition_result_response::Responses::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WaitForStateTransitionResultResponse>(
            "WaitForStateTransitionResultResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WaitForStateTransitionResultResponse {
    const NAME: &'static str = "WaitForStateTransitionResultResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Error(is.read_message()?));
                },
                18 => {
                    self.responses = ::std::option::Option::Some(wait_for_state_transition_result_response::Responses::Proof(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.responses {
            match v {
                &wait_for_state_transition_result_response::Responses::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &wait_for_state_transition_result_response::Responses::Proof(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.responses {
            match v {
                &wait_for_state_transition_result_response::Responses::Error(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &wait_for_state_transition_result_response::Responses::Proof(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WaitForStateTransitionResultResponse {
        WaitForStateTransitionResultResponse::new()
    }

    fn clear(&mut self) {
        self.responses = ::std::option::Option::None;
        self.responses = ::std::option::Option::None;
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WaitForStateTransitionResultResponse {
        static instance: WaitForStateTransitionResultResponse = WaitForStateTransitionResultResponse {
            metadata: ::protobuf::MessageField::none(),
            responses: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WaitForStateTransitionResultResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WaitForStateTransitionResultResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WaitForStateTransitionResultResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForStateTransitionResultResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `WaitForStateTransitionResultResponse`
pub mod wait_for_state_transition_result_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.responses)
    pub enum Responses {
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.error)
        Error(super::StateTransitionBroadcastError),
        // @@protoc_insertion_point(oneof_field:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.proof)
        Proof(super::ProvedResult),
    }

    impl ::protobuf::Oneof for Responses {
    }

    impl ::protobuf::OneofFull for Responses {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::WaitForStateTransitionResultResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("responses").unwrap()).clone()
        }
    }

    impl Responses {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Responses>("responses")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ConsensusParamsBlock)
pub struct ConsensusParamsBlock {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_bytes)
    pub max_bytes: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_gas)
    pub max_gas: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsBlock.time_iota_ms)
    pub time_iota_ms: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ConsensusParamsBlock.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsensusParamsBlock {
    fn default() -> &'a ConsensusParamsBlock {
        <ConsensusParamsBlock as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusParamsBlock {
    pub fn new() -> ConsensusParamsBlock {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_bytes",
            |m: &ConsensusParamsBlock| { &m.max_bytes },
            |m: &mut ConsensusParamsBlock| { &mut m.max_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_gas",
            |m: &ConsensusParamsBlock| { &m.max_gas },
            |m: &mut ConsensusParamsBlock| { &mut m.max_gas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_iota_ms",
            |m: &ConsensusParamsBlock| { &m.time_iota_ms },
            |m: &mut ConsensusParamsBlock| { &mut m.time_iota_ms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsensusParamsBlock>(
            "ConsensusParamsBlock",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsensusParamsBlock {
    const NAME: &'static str = "ConsensusParamsBlock";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.max_bytes = is.read_string()?;
                },
                18 => {
                    self.max_gas = is.read_string()?;
                },
                26 => {
                    self.time_iota_ms = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.max_bytes.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.max_bytes);
        }
        if !self.max_gas.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.max_gas);
        }
        if !self.time_iota_ms.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.time_iota_ms);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.max_bytes.is_empty() {
            os.write_string(1, &self.max_bytes)?;
        }
        if !self.max_gas.is_empty() {
            os.write_string(2, &self.max_gas)?;
        }
        if !self.time_iota_ms.is_empty() {
            os.write_string(3, &self.time_iota_ms)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsensusParamsBlock {
        ConsensusParamsBlock::new()
    }

    fn clear(&mut self) {
        self.max_bytes.clear();
        self.max_gas.clear();
        self.time_iota_ms.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsensusParamsBlock {
        static instance: ConsensusParamsBlock = ConsensusParamsBlock {
            max_bytes: ::std::string::String::new(),
            max_gas: ::std::string::String::new(),
            time_iota_ms: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsensusParamsBlock {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsensusParamsBlock").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsensusParamsBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusParamsBlock {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.ConsensusParamsEvidence)
pub struct ConsensusParamsEvidence {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_num_blocks)
    pub max_age_num_blocks: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_duration)
    pub max_age_duration: ::std::string::String,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_bytes)
    pub max_bytes: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.ConsensusParamsEvidence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsensusParamsEvidence {
    fn default() -> &'a ConsensusParamsEvidence {
        <ConsensusParamsEvidence as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusParamsEvidence {
    pub fn new() -> ConsensusParamsEvidence {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_age_num_blocks",
            |m: &ConsensusParamsEvidence| { &m.max_age_num_blocks },
            |m: &mut ConsensusParamsEvidence| { &mut m.max_age_num_blocks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_age_duration",
            |m: &ConsensusParamsEvidence| { &m.max_age_duration },
            |m: &mut ConsensusParamsEvidence| { &mut m.max_age_duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_bytes",
            |m: &ConsensusParamsEvidence| { &m.max_bytes },
            |m: &mut ConsensusParamsEvidence| { &mut m.max_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsensusParamsEvidence>(
            "ConsensusParamsEvidence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsensusParamsEvidence {
    const NAME: &'static str = "ConsensusParamsEvidence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.max_age_num_blocks = is.read_string()?;
                },
                18 => {
                    self.max_age_duration = is.read_string()?;
                },
                26 => {
                    self.max_bytes = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.max_age_num_blocks.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.max_age_num_blocks);
        }
        if !self.max_age_duration.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.max_age_duration);
        }
        if !self.max_bytes.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.max_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.max_age_num_blocks.is_empty() {
            os.write_string(1, &self.max_age_num_blocks)?;
        }
        if !self.max_age_duration.is_empty() {
            os.write_string(2, &self.max_age_duration)?;
        }
        if !self.max_bytes.is_empty() {
            os.write_string(3, &self.max_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsensusParamsEvidence {
        ConsensusParamsEvidence::new()
    }

    fn clear(&mut self) {
        self.max_age_num_blocks.clear();
        self.max_age_duration.clear();
        self.max_bytes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsensusParamsEvidence {
        static instance: ConsensusParamsEvidence = ConsensusParamsEvidence {
            max_age_num_blocks: ::std::string::String::new(),
            max_age_duration: ::std::string::String::new(),
            max_bytes: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsensusParamsEvidence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsensusParamsEvidence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsensusParamsEvidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusParamsEvidence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetConsensusParamsRequest)
pub struct GetConsensusParamsRequest {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsRequest.height)
    pub height: i64,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsRequest.prove)
    pub prove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetConsensusParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetConsensusParamsRequest {
    fn default() -> &'a GetConsensusParamsRequest {
        <GetConsensusParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetConsensusParamsRequest {
    pub fn new() -> GetConsensusParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &GetConsensusParamsRequest| { &m.height },
            |m: &mut GetConsensusParamsRequest| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prove",
            |m: &GetConsensusParamsRequest| { &m.prove },
            |m: &mut GetConsensusParamsRequest| { &mut m.prove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetConsensusParamsRequest>(
            "GetConsensusParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetConsensusParamsRequest {
    const NAME: &'static str = "GetConsensusParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                16 => {
                    self.prove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        if self.prove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if self.prove != false {
            os.write_bool(2, self.prove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetConsensusParamsRequest {
        GetConsensusParamsRequest::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.prove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetConsensusParamsRequest {
        static instance: GetConsensusParamsRequest = GetConsensusParamsRequest {
            height: 0,
            prove: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetConsensusParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetConsensusParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetConsensusParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetConsensusParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.dash.platform.dapi.v0.GetConsensusParamsResponse)
pub struct GetConsensusParamsResponse {
    // message fields
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsResponse.block)
    pub block: ::protobuf::MessageField<ConsensusParamsBlock>,
    // @@protoc_insertion_point(field:org.dash.platform.dapi.v0.GetConsensusParamsResponse.evidence)
    pub evidence: ::protobuf::MessageField<ConsensusParamsEvidence>,
    // special fields
    // @@protoc_insertion_point(special_field:org.dash.platform.dapi.v0.GetConsensusParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetConsensusParamsResponse {
    fn default() -> &'a GetConsensusParamsResponse {
        <GetConsensusParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetConsensusParamsResponse {
    pub fn new() -> GetConsensusParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConsensusParamsBlock>(
            "block",
            |m: &GetConsensusParamsResponse| { &m.block },
            |m: &mut GetConsensusParamsResponse| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConsensusParamsEvidence>(
            "evidence",
            |m: &GetConsensusParamsResponse| { &m.evidence },
            |m: &mut GetConsensusParamsResponse| { &mut m.evidence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetConsensusParamsResponse>(
            "GetConsensusParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetConsensusParamsResponse {
    const NAME: &'static str = "GetConsensusParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.evidence)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.evidence.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.evidence.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetConsensusParamsResponse {
        GetConsensusParamsResponse::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.evidence.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetConsensusParamsResponse {
        static instance: GetConsensusParamsResponse = GetConsensusParamsResponse {
            block: ::protobuf::MessageField::none(),
            evidence: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetConsensusParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetConsensusParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetConsensusParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetConsensusParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eplatform.proto\x12\x19org.dash.platform.dapi.v0\x1a\x1fgoogle/prot\
    obuf/timestamp.proto\"\x88\x01\n\x0cProvedResult\x12#\n\rgrovedb_proof\
    \x18\x01\x20\x01(\x0cR\x0cgrovedbProof\x12\x1f\n\x0bquorum_hash\x18\x02\
    \x20\x01(\x0cR\nquorumHash\x12\x1c\n\tsignature\x18\x03\x20\x01(\x0cR\ts\
    ignature\x12\x14\n\x05round\x18\x04\x20\x01(\rR\x05round\"\xa7\x01\n\x10\
    ResponseMetadata\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06height\x12\
    7\n\x18core_chain_locked_height\x18\x02\x20\x01(\rR\x15coreChainLockedHe\
    ight\x12\x17\n\x07time_ms\x18\x03\x20\x01(\x04R\x06timeMs\x12)\n\x10prot\
    ocol_version\x18\x04\x20\x01(\rR\x0fprotocolVersion\"a\n\x1dStateTransit\
    ionBroadcastError\x12\x12\n\x04code\x18\x01\x20\x01(\rR\x04code\x12\x18\
    \n\x07message\x18\x02\x20\x01(\tR\x07message\x12\x12\n\x04data\x18\x03\
    \x20\x01(\x0cR\x04data\"L\n\x1fBroadcastStateTransitionRequest\x12)\n\
    \x10state_transition\x18\x01\x20\x01(\x0cR\x0fstateTransition\"\"\n\x20B\
    roadcastStateTransitionResponse\"\xe5\x01\n\x12SingleItemResponse\x12,\n\
    \x11non_proved_result\x18\x01\x20\x01(\x0cH\0R\x0fnonProvedResult\x12N\n\
    \rproved_result\x18\x02\x20\x01(\x0b2'.org.dash.platform.dapi.v0.ProvedR\
    esultH\0R\x0cprovedResult\x12G\n\x08metadata\x18\x03\x20\x01(\x0b2+.org.\
    dash.platform.dapi.v0.ResponseMetadataR\x08metadataB\x08\n\x06result\"\"\
    \n\nResultList\x12\x14\n\x05items\x18\x01\x20\x03(\x0cR\x05items\"\x8d\
    \x02\n\x11MultiItemResponse\x12U\n\x12non_proved_results\x18\x01\x20\x01\
    (\x0b2%.org.dash.platform.dapi.v0.ResultListH\0R\x10nonProvedResults\x12\
    N\n\rproved_result\x18\x02\x20\x01(\x0b2'.org.dash.platform.dapi.v0.Prov\
    edResultH\0R\x0cprovedResult\x12G\n\x08metadata\x18\x03\x20\x01(\x0b2+.o\
    rg.dash.platform.dapi.v0.ResponseMetadataR\x08metadataB\x08\n\x06result\
    \"<\n\x14GetSingleItemRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02i\
    d\x12\x14\n\x05prove\x18\x02\x20\x01(\x08R\x05prove\"=\n\x13GetMultiItem\
    Request\x12\x10\n\x03ids\x18\x01\x20\x03(\x0cR\x03ids\x12\x14\n\x05prove\
    \x18\x02\x20\x01(\x08R\x05prove\"\x8a\x02\n\x13GetDocumentsRequest\x12(\
    \n\x10data_contract_id\x18\x01\x20\x01(\x0cR\x0edataContractId\x12#\n\rd\
    ocument_type\x18\x02\x20\x01(\tR\x0cdocumentType\x12\x14\n\x05where\x18\
    \x03\x20\x01(\x0cR\x05where\x12\x19\n\x08order_by\x18\x04\x20\x01(\x0cR\
    \x07orderBy\x12\x14\n\x05limit\x18\x05\x20\x01(\rR\x05limit\x12!\n\x0bst\
    art_after\x18\x06\x20\x01(\x0cH\0R\nstartAfter\x12\x1b\n\x08start_at\x18\
    \x07\x20\x01(\x0cH\0R\x07startAt\x12\x14\n\x05prove\x18\x08\x20\x01(\x08\
    R\x05proveB\x07\n\x05start\"o\n#WaitForStateTransitionResultRequest\x122\
    \n\x15state_transition_hash\x18\x01\x20\x01(\x0cR\x13stateTransitionHash\
    \x12\x14\n\x05prove\x18\x02\x20\x01(\x08R\x05prove\"\x8f\x02\n$WaitForSt\
    ateTransitionResultResponse\x12P\n\x05error\x18\x01\x20\x01(\x0b28.org.d\
    ash.platform.dapi.v0.StateTransitionBroadcastErrorH\0R\x05error\x12?\n\
    \x05proof\x18\x02\x20\x01(\x0b2'.org.dash.platform.dapi.v0.ProvedResultH\
    \0R\x05proof\x12G\n\x08metadata\x18\x03\x20\x01(\x0b2+.org.dash.platform\
    .dapi.v0.ResponseMetadataR\x08metadataB\x0b\n\tresponses\"n\n\x14Consens\
    usParamsBlock\x12\x1b\n\tmax_bytes\x18\x01\x20\x01(\tR\x08maxBytes\x12\
    \x17\n\x07max_gas\x18\x02\x20\x01(\tR\x06maxGas\x12\x20\n\x0ctime_iota_m\
    s\x18\x03\x20\x01(\tR\ntimeIotaMs\"\x8d\x01\n\x17ConsensusParamsEvidence\
    \x12+\n\x12max_age_num_blocks\x18\x01\x20\x01(\tR\x0fmaxAgeNumBlocks\x12\
    (\n\x10max_age_duration\x18\x02\x20\x01(\tR\x0emaxAgeDuration\x12\x1b\n\
    \tmax_bytes\x18\x03\x20\x01(\tR\x08maxBytes\"I\n\x19GetConsensusParamsRe\
    quest\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06height\x12\x14\n\x05p\
    rove\x18\x02\x20\x01(\x08R\x05prove\"\xb3\x01\n\x1aGetConsensusParamsRes\
    ponse\x12E\n\x05block\x18\x01\x20\x01(\x0b2/.org.dash.platform.dapi.v0.C\
    onsensusParamsBlockR\x05block\x12N\n\x08evidence\x18\x02\x20\x01(\x0b22.\
    org.dash.platform.dapi.v0.ConsensusParamsEvidenceR\x08evidence2\x8d\t\n\
    \x08Platform\x12\x93\x01\n\x18broadcastStateTransition\x12:.org.dash.pla\
    tform.dapi.v0.BroadcastStateTransitionRequest\x1a;.org.dash.platform.dap\
    i.v0.BroadcastStateTransitionResponse\x12m\n\x0bgetIdentity\x12/.org.das\
    h.platform.dapi.v0.GetSingleItemRequest\x1a-.org.dash.platform.dapi.v0.S\
    ingleItemResponse\x12t\n\x12getIdentityBalance\x12/.org.dash.platform.da\
    pi.v0.GetSingleItemRequest\x1a-.org.dash.platform.dapi.v0.SingleItemResp\
    onse\x12\x7f\n\x1dgetIdentityBalanceAndRevision\x12/.org.dash.platform.d\
    api.v0.GetSingleItemRequest\x1a-.org.dash.platform.dapi.v0.SingleItemRes\
    ponse\x12q\n\x0fgetDataContract\x12/.org.dash.platform.dapi.v0.GetSingle\
    ItemRequest\x1a-.org.dash.platform.dapi.v0.SingleItemResponse\x12l\n\x0c\
    getDocuments\x12..org.dash.platform.dapi.v0.GetDocumentsRequest\x1a,.org\
    .dash.platform.dapi.v0.MultiItemResponse\x12~\n\x1egetIdentitiesByPublic\
    KeyHashes\x12..org.dash.platform.dapi.v0.GetMultiItemRequest\x1a,.org.da\
    sh.platform.dapi.v0.MultiItemResponse\x12\x9f\x01\n\x1cwaitForStateTrans\
    itionResult\x12>.org.dash.platform.dapi.v0.WaitForStateTransitionResultR\
    equest\x1a?.org.dash.platform.dapi.v0.WaitForStateTransitionResultRespon\
    se\x12\x81\x01\n\x12getConsensusParams\x124.org.dash.platform.dapi.v0.Ge\
    tConsensusParamsRequest\x1a5.org.dash.platform.dapi.v0.GetConsensusParam\
    sResponseJ\xb4\x1c\n\x06\x12\x04\0\0~\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\"\n\t\n\x02\x03\0\x12\x03\x04\0)\n\n\
    \n\x02\x06\0\x12\x04\x06\0\x10\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\
    \x10\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x02l\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\x07\x06\x1e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x20?\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03\x07Jj\n\x0b\n\x04\x06\0\x02\x01\x12\
    \x03\x08\x02F\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\x06\x11\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x03\x08\x13'\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03\x082D\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x02M\n\x0c\n\x05\x06\
    \0\x02\x02\x01\x12\x03\t\x06\x18\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\t\
    \x1a.\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t9K\n\x0b\n\x04\x06\0\x02\
    \x03\x12\x03\n\x02X\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\n\x06#\n\x0c\n\
    \x05\x06\0\x02\x03\x02\x12\x03\n%9\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\
    \nDV\n\x0b\n\x04\x06\0\x02\x04\x12\x03\x0b\x02J\n\x0c\n\x05\x06\0\x02\
    \x04\x01\x12\x03\x0b\x06\x15\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x0b\
    \x17+\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0b6H\n\x0b\n\x04\x06\0\x02\
    \x05\x12\x03\x0c\x02E\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x0c\x06\x12\
    \n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x0c\x14'\n\x0c\n\x05\x06\0\x02\
    \x05\x03\x12\x03\x0c2C\n\x0b\n\x04\x06\0\x02\x06\x12\x03\r\x02W\n\x0c\n\
    \x05\x06\0\x02\x06\x01\x12\x03\r\x06$\n\x0c\n\x05\x06\0\x02\x06\x02\x12\
    \x03\r&9\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\rDU\n\x0b\n\x04\x06\0\x02\
    \x07\x12\x03\x0e\x02x\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\x0e\x06\"\n\
    \x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x0e$G\n\x0c\n\x05\x06\0\x02\x07\x03\
    \x12\x03\x0eRv\n\x0b\n\x04\x06\0\x02\x08\x12\x03\x0f\x02Z\n\x0c\n\x05\
    \x06\0\x02\x08\x01\x12\x03\x0f\x06\x18\n\x0c\n\x05\x06\0\x02\x08\x02\x12\
    \x03\x0f\x1a3\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03\x0f>X\n\n\n\x02\x04\
    \0\x12\x04\x12\0\x17\x01\n\n\n\x03\x04\0\x01\x12\x03\x12\x08\x14\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x13\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x13\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x13\x08\x15\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x13\x18\x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x14\x02\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x14\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x14\x08\x13\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x14\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x15\x02\x16\n\x0c\
    \n\x05\x04\0\x02\x02\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x15\x08\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x15\x14\
    \x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x16\x02\x13\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x16\t\
    \x0e\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x16\x11\x12\n\n\n\x02\x04\x01\
    \x12\x04\x19\0\x1e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x18\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x1a\x02\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x1a\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1a\x08\x0e\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x1a\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x1b\x02&\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1b\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1b\t!\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x1b$%\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1c\x02\x15\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03\x1c\t\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\
    \x1c\x13\x14\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1d\x02\x1e\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\x1d\t\x19\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1d\x1c\x1d\n\
    \n\n\x02\x04\x02\x12\x04\x20\0$\x01\n\n\n\x03\x04\x02\x01\x12\x03\x20\
    \x08%\n\x0b\n\x04\x04\x02\x02\0\x12\x03!\x02\x12\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03!\t\r\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03!\x10\x11\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\"\x02\x15\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\"\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\"\t\x10\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\"\x13\x14\n\x0b\n\x04\x04\x02\x02\x02\x12\x03#\x02\x11\
    \n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03#\x02\x07\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x03#\x08\x0c\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03#\
    \x0f\x10\n\n\n\x02\x04\x03\x12\x04&\0(\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    &\x08'\n\x0b\n\x04\x04\x03\x02\0\x12\x03'\x02\x1d\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03'\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03'\x08\
    \x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03'\x1b\x1c\n\n\n\x02\x04\x04\
    \x12\x04*\0,\x01\n\n\n\x03\x04\x04\x01\x12\x03*\x08(\n\n\n\x02\x04\x05\
    \x12\x04.\04\x01\n\n\n\x03\x04\x05\x01\x12\x03.\x08\x1a\n\x0c\n\x04\x04\
    \x05\x08\0\x12\x04/\x022\x03\n\x0c\n\x05\x04\x05\x08\0\x01\x12\x03/\x08\
    \x0e\n\x0b\n\x04\x04\x05\x02\0\x12\x030\x04\x20\n\x0c\n\x05\x04\x05\x02\
    \0\x05\x12\x030\x04\t\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x030\n\x1b\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x030\x1e\x1f\n\x0b\n\x04\x04\x05\x02\x01\
    \x12\x031\x04#\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x031\x04\x10\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x031\x11\x1e\n\x0c\n\x05\x04\x05\x02\x01\
    \x03\x12\x031!\"\n\x0b\n\x04\x04\x05\x02\x02\x12\x033\x02\x20\n\x0c\n\
    \x05\x04\x05\x02\x02\x06\x12\x033\x02\x12\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x033\x13\x1b\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x033\x1e\x1f\n\
    \n\n\x02\x04\x06\x12\x046\08\x01\n\n\n\x03\x04\x06\x01\x12\x036\x08\x12\
    \n\x0b\n\x04\x04\x06\x02\0\x12\x037\x02\x1b\n\x0c\n\x05\x04\x06\x02\0\
    \x04\x12\x037\x02\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x037\x0b\x10\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x037\x11\x16\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x037\x19\x1a\n\n\n\x02\x04\x07\x12\x04:\0@\x01\n\n\n\x03\x04\x07\
    \x01\x12\x03:\x08\x19\n\x0c\n\x04\x04\x07\x08\0\x12\x04;\x02>\x03\n\x0c\
    \n\x05\x04\x07\x08\0\x01\x12\x03;\x08\x0e\n\x0b\n\x04\x04\x07\x02\0\x12\
    \x03<\x04&\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03<\x04\x0e\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03<\x0f!\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03<$\
    %\n\x0b\n\x04\x04\x07\x02\x01\x12\x03=\x04#\n\x0c\n\x05\x04\x07\x02\x01\
    \x06\x12\x03=\x04\x10\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03=\x11\x1e\n\
    \x0c\n\x05\x04\x07\x02\x01\x03\x12\x03=!\"\n\x0b\n\x04\x04\x07\x02\x02\
    \x12\x03?\x02\x20\n\x0c\n\x05\x04\x07\x02\x02\x06\x12\x03?\x02\x12\n\x0c\
    \n\x05\x04\x07\x02\x02\x01\x12\x03?\x13\x1b\n\x0c\n\x05\x04\x07\x02\x02\
    \x03\x12\x03?\x1e\x1f\n\n\n\x02\x04\x08\x12\x04B\0E\x01\n\n\n\x03\x04\
    \x08\x01\x12\x03B\x08\x1c\n\x0b\n\x04\x04\x08\x02\0\x12\x03C\x02\x0f\n\
    \x0c\n\x05\x04\x08\x02\0\x05\x12\x03C\x02\x07\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03C\x08\n\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03C\r\x0e\n\x0b\n\
    \x04\x04\x08\x02\x01\x12\x03D\x02\x11\n\x0c\n\x05\x04\x08\x02\x01\x05\
    \x12\x03D\x02\x06\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03D\x07\x0c\n\x0c\
    \n\x05\x04\x08\x02\x01\x03\x12\x03D\x0f\x10\n\n\n\x02\x04\t\x12\x04G\0J\
    \x01\n\n\n\x03\x04\t\x01\x12\x03G\x08\x1b\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03H\x02\x19\n\x0c\n\x05\x04\t\x02\0\x04\x12\x03H\x02\n\n\x0c\n\x05\x04\
    \t\x02\0\x05\x12\x03H\x0b\x10\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03H\x11\
    \x14\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03H\x17\x18\n\x0b\n\x04\x04\t\x02\
    \x01\x12\x03I\x02\x11\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03I\x02\x06\n\
    \x0c\n\x05\x04\t\x02\x01\x01\x12\x03I\x07\x0c\n\x0c\n\x05\x04\t\x02\x01\
    \x03\x12\x03I\x0f\x10\n\n\n\x02\x04\n\x12\x04L\0[\x01\n\n\n\x03\x04\n\
    \x01\x12\x03L\x08\x1b\n\x0b\n\x04\x04\n\x02\0\x12\x03M\x02\x1d\n\x0c\n\
    \x05\x04\n\x02\0\x05\x12\x03M\x02\x07\n\x0c\n\x05\x04\n\x02\0\x01\x12\
    \x03M\x08\x18\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03M\x1b\x1c\n\x0b\n\x04\
    \x04\n\x02\x01\x12\x03N\x02\x1b\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03N\
    \x02\x08\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03N\t\x16\n\x0c\n\x05\x04\n\
    \x02\x01\x03\x12\x03N\x19\x1a\n\x0b\n\x04\x04\n\x02\x02\x12\x03P\x02\x12\
    \n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03P\x02\x07\n\x0c\n\x05\x04\n\x02\
    \x02\x01\x12\x03P\x08\r\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03P\x10\x11\n\
    \x0b\n\x04\x04\n\x02\x03\x12\x03Q\x02\x15\n\x0c\n\x05\x04\n\x02\x03\x05\
    \x12\x03Q\x02\x07\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03Q\x08\x10\n\x0c\n\
    \x05\x04\n\x02\x03\x03\x12\x03Q\x13\x14\n\x0b\n\x04\x04\n\x02\x04\x12\
    \x03S\x02\x13\n\x0c\n\x05\x04\n\x02\x04\x05\x12\x03S\x02\x08\n\x0c\n\x05\
    \x04\n\x02\x04\x01\x12\x03S\t\x0e\n\x0c\n\x05\x04\n\x02\x04\x03\x12\x03S\
    \x11\x12\n\x0c\n\x04\x04\n\x08\0\x12\x04U\x04X\x05\n\x0c\n\x05\x04\n\x08\
    \0\x01\x12\x03U\n\x0f\n\x0b\n\x04\x04\n\x02\x05\x12\x03V\x06\x1c\n\x0c\n\
    \x05\x04\n\x02\x05\x05\x12\x03V\x06\x0b\n\x0c\n\x05\x04\n\x02\x05\x01\
    \x12\x03V\x0c\x17\n\x0c\n\x05\x04\n\x02\x05\x03\x12\x03V\x1a\x1b\n\x0b\n\
    \x04\x04\n\x02\x06\x12\x03W\x06\x19\n\x0c\n\x05\x04\n\x02\x06\x05\x12\
    \x03W\x06\x0b\n\x0c\n\x05\x04\n\x02\x06\x01\x12\x03W\x0c\x14\n\x0c\n\x05\
    \x04\n\x02\x06\x03\x12\x03W\x17\x18\n\x0b\n\x04\x04\n\x02\x07\x12\x03Z\
    \x02\x11\n\x0c\n\x05\x04\n\x02\x07\x05\x12\x03Z\x02\x06\n\x0c\n\x05\x04\
    \n\x02\x07\x01\x12\x03Z\x07\x0c\n\x0c\n\x05\x04\n\x02\x07\x03\x12\x03Z\
    \x0f\x10\n\n\n\x02\x04\x0b\x12\x04]\0`\x01\n\n\n\x03\x04\x0b\x01\x12\x03\
    ]\x08+\n\x0b\n\x04\x04\x0b\x02\0\x12\x03^\x02\"\n\x0c\n\x05\x04\x0b\x02\
    \0\x05\x12\x03^\x02\x07\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03^\x08\x1d\n\
    \x0c\n\x05\x04\x0b\x02\0\x03\x12\x03^\x20!\n\x0b\n\x04\x04\x0b\x02\x01\
    \x12\x03_\x02\x11\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03_\x02\x06\n\x0c\
    \n\x05\x04\x0b\x02\x01\x01\x12\x03_\x07\x0c\n\x0c\n\x05\x04\x0b\x02\x01\
    \x03\x12\x03_\x0f\x10\n\n\n\x02\x04\x0c\x12\x04b\0h\x01\n\n\n\x03\x04\
    \x0c\x01\x12\x03b\x08,\n\x0c\n\x04\x04\x0c\x08\0\x12\x04c\x02f\x03\n\x0c\
    \n\x05\x04\x0c\x08\0\x01\x12\x03c\x08\x11\n\x0b\n\x04\x04\x0c\x02\0\x12\
    \x03d\x04,\n\x0c\n\x05\x04\x0c\x02\0\x06\x12\x03d\x04!\n\x0c\n\x05\x04\
    \x0c\x02\0\x01\x12\x03d\"'\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03d*+\n\
    \x0b\n\x04\x04\x0c\x02\x01\x12\x03e\x04\x1b\n\x0c\n\x05\x04\x0c\x02\x01\
    \x06\x12\x03e\x04\x10\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03e\x11\x16\n\
    \x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03e\x19\x1a\n\x0b\n\x04\x04\x0c\x02\
    \x02\x12\x03g\x02\x20\n\x0c\n\x05\x04\x0c\x02\x02\x06\x12\x03g\x02\x12\n\
    \x0c\n\x05\x04\x0c\x02\x02\x01\x12\x03g\x13\x1b\n\x0c\n\x05\x04\x0c\x02\
    \x02\x03\x12\x03g\x1e\x1f\n\n\n\x02\x04\r\x12\x04j\0n\x01\n\n\n\x03\x04\
    \r\x01\x12\x03j\x08\x1c\n\x0b\n\x04\x04\r\x02\0\x12\x03k\x02\x17\n\x0c\n\
    \x05\x04\r\x02\0\x05\x12\x03k\x02\x08\n\x0c\n\x05\x04\r\x02\0\x01\x12\
    \x03k\t\x12\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03k\x15\x16\n\x0b\n\x04\x04\
    \r\x02\x01\x12\x03l\x02\x15\n\x0c\n\x05\x04\r\x02\x01\x05\x12\x03l\x02\
    \x08\n\x0c\n\x05\x04\r\x02\x01\x01\x12\x03l\t\x10\n\x0c\n\x05\x04\r\x02\
    \x01\x03\x12\x03l\x13\x14\n\x0b\n\x04\x04\r\x02\x02\x12\x03m\x02\x1a\n\
    \x0c\n\x05\x04\r\x02\x02\x05\x12\x03m\x02\x08\n\x0c\n\x05\x04\r\x02\x02\
    \x01\x12\x03m\t\x15\n\x0c\n\x05\x04\r\x02\x02\x03\x12\x03m\x18\x19\n\n\n\
    \x02\x04\x0e\x12\x04p\0t\x01\n\n\n\x03\x04\x0e\x01\x12\x03p\x08\x1f\n\
    \x0b\n\x04\x04\x0e\x02\0\x12\x03q\x02\x20\n\x0c\n\x05\x04\x0e\x02\0\x05\
    \x12\x03q\x02\x08\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\x03q\t\x1b\n\x0c\n\
    \x05\x04\x0e\x02\0\x03\x12\x03q\x1e\x1f\n\x0b\n\x04\x04\x0e\x02\x01\x12\
    \x03r\x02\x1e\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03r\x02\x08\n\x0c\n\
    \x05\x04\x0e\x02\x01\x01\x12\x03r\t\x19\n\x0c\n\x05\x04\x0e\x02\x01\x03\
    \x12\x03r\x1c\x1d\n\x0b\n\x04\x04\x0e\x02\x02\x12\x03s\x02\x17\n\x0c\n\
    \x05\x04\x0e\x02\x02\x05\x12\x03s\x02\x08\n\x0c\n\x05\x04\x0e\x02\x02\
    \x01\x12\x03s\t\x12\n\x0c\n\x05\x04\x0e\x02\x02\x03\x12\x03s\x15\x16\n\n\
    \n\x02\x04\x0f\x12\x04v\0y\x01\n\n\n\x03\x04\x0f\x01\x12\x03v\x08!\n\x0b\
    \n\x04\x04\x0f\x02\0\x12\x03w\x02\x13\n\x0c\n\x05\x04\x0f\x02\0\x05\x12\
    \x03w\x02\x07\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03w\x08\x0e\n\x0c\n\x05\
    \x04\x0f\x02\0\x03\x12\x03w\x11\x12\n\x0b\n\x04\x04\x0f\x02\x01\x12\x03x\
    \x02\x11\n\x0c\n\x05\x04\x0f\x02\x01\x05\x12\x03x\x02\x06\n\x0c\n\x05\
    \x04\x0f\x02\x01\x01\x12\x03x\x07\x0c\n\x0c\n\x05\x04\x0f\x02\x01\x03\
    \x12\x03x\x0f\x10\n\n\n\x02\x04\x10\x12\x04{\0~\x01\n\n\n\x03\x04\x10\
    \x01\x12\x03{\x08\"\n\x0b\n\x04\x04\x10\x02\0\x12\x03|\x02!\n\x0c\n\x05\
    \x04\x10\x02\0\x06\x12\x03|\x02\x16\n\x0c\n\x05\x04\x10\x02\0\x01\x12\
    \x03|\x17\x1c\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03|\x1f\x20\n\x0b\n\x04\
    \x04\x10\x02\x01\x12\x03}\x02'\n\x0c\n\x05\x04\x10\x02\x01\x06\x12\x03}\
    \x02\x19\n\x0c\n\x05\x04\x10\x02\x01\x01\x12\x03}\x1a\"\n\x0c\n\x05\x04\
    \x10\x02\x01\x03\x12\x03}%&b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(17);
            messages.push(ProvedResult::generated_message_descriptor_data());
            messages.push(ResponseMetadata::generated_message_descriptor_data());
            messages.push(StateTransitionBroadcastError::generated_message_descriptor_data());
            messages.push(BroadcastStateTransitionRequest::generated_message_descriptor_data());
            messages.push(BroadcastStateTransitionResponse::generated_message_descriptor_data());
            messages.push(SingleItemResponse::generated_message_descriptor_data());
            messages.push(ResultList::generated_message_descriptor_data());
            messages.push(MultiItemResponse::generated_message_descriptor_data());
            messages.push(GetSingleItemRequest::generated_message_descriptor_data());
            messages.push(GetMultiItemRequest::generated_message_descriptor_data());
            messages.push(GetDocumentsRequest::generated_message_descriptor_data());
            messages.push(WaitForStateTransitionResultRequest::generated_message_descriptor_data());
            messages.push(WaitForStateTransitionResultResponse::generated_message_descriptor_data());
            messages.push(ConsensusParamsBlock::generated_message_descriptor_data());
            messages.push(ConsensusParamsEvidence::generated_message_descriptor_data());
            messages.push(GetConsensusParamsRequest::generated_message_descriptor_data());
            messages.push(GetConsensusParamsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
