// This file is @generated by prost-build.
/// Proof message includes cryptographic proofs for validating responses
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Proof {
    /// GroveDB proof for the data
    #[prost(bytes = "vec", tag = "1")]
    pub grovedb_proof: ::prost::alloc::vec::Vec<u8>,
    /// Hash of the quorum validating the data
    #[prost(bytes = "vec", tag = "2")]
    pub quorum_hash: ::prost::alloc::vec::Vec<u8>,
    /// Signature proving data authenticity
    #[prost(bytes = "vec", tag = "3")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Consensus round number
    #[prost(uint32, tag = "4")]
    pub round: u32,
    /// Hash of the block ID
    #[prost(bytes = "vec", tag = "5")]
    pub block_id_hash: ::prost::alloc::vec::Vec<u8>,
    /// Type of the quorum
    #[prost(uint32, tag = "6")]
    pub quorum_type: u32,
}
/// ResponseMetadata provides metadata about the blockchain state at the time of response
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResponseMetadata {
    /// Current blockchain height
    #[prost(uint64, tag = "1")]
    pub height: u64,
    /// Latest known core height in consensus
    #[prost(uint32, tag = "2")]
    pub core_chain_locked_height: u32,
    /// Current epoch number
    #[prost(uint32, tag = "3")]
    pub epoch: u32,
    /// Timestamp in milliseconds
    #[prost(uint64, tag = "4")]
    pub time_ms: u64,
    /// Protocol version
    #[prost(uint32, tag = "5")]
    pub protocol_version: u32,
    /// Identifier of the blockchain
    #[prost(string, tag = "6")]
    pub chain_id: ::prost::alloc::string::String,
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StateTransitionBroadcastError {
    #[prost(uint32, tag = "1")]
    pub code: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BroadcastStateTransitionRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub state_transition: ::prost::alloc::vec::Vec<u8>,
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BroadcastStateTransitionResponse {}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityRequest {
    #[prost(oneof = "get_identity_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_request::Version>,
}
/// Nested message and enum types in `GetIdentityRequest`.
pub mod get_identity_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityRequestV0 {
        /// The ID of the identity being requested
        #[prost(bytes = "vec", tag = "1")]
        pub id: ::prost::alloc::vec::Vec<u8>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityNonceRequest {
    #[prost(oneof = "get_identity_nonce_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_nonce_request::Version>,
}
/// Nested message and enum types in `GetIdentityNonceRequest`.
pub mod get_identity_nonce_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityNonceRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub identity_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityNonceRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityContractNonceRequest {
    #[prost(oneof = "get_identity_contract_nonce_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_contract_nonce_request::Version>,
}
/// Nested message and enum types in `GetIdentityContractNonceRequest`.
pub mod get_identity_contract_nonce_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityContractNonceRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub identity_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", tag = "2")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityContractNonceRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityBalanceRequest {
    #[prost(oneof = "get_identity_balance_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_balance_request::Version>,
}
/// Nested message and enum types in `GetIdentityBalanceRequest`.
pub mod get_identity_balance_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityBalanceRequestV0 {
        /// ID of the identity whose balance is requested
        #[prost(bytes = "vec", tag = "1")]
        pub id: ::prost::alloc::vec::Vec<u8>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityBalanceRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityBalanceAndRevisionRequest {
    #[prost(
        oneof = "get_identity_balance_and_revision_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_identity_balance_and_revision_request::Version>,
}
/// Nested message and enum types in `GetIdentityBalanceAndRevisionRequest`.
pub mod get_identity_balance_and_revision_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityBalanceAndRevisionRequestV0 {
        /// ID of the identity for balance and revision
        #[prost(bytes = "vec", tag = "1")]
        pub id: ::prost::alloc::vec::Vec<u8>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityBalanceAndRevisionRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityResponse {
    #[prost(oneof = "get_identity_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_response::Version>,
}
/// Nested message and enum types in `GetIdentityResponse`.
pub mod get_identity_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_identity_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_identity_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityResponseV0`.
    pub mod get_identity_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The requested identity data
            #[prost(bytes, tag = "1")]
            Identity(::prost::alloc::vec::Vec<u8>),
            /// Proof of the identity data, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityNonceResponse {
    #[prost(oneof = "get_identity_nonce_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_nonce_response::Version>,
}
/// Nested message and enum types in `GetIdentityNonceResponse`.
pub mod get_identity_nonce_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityNonceResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_identity_nonce_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_identity_nonce_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityNonceResponseV0`.
    pub mod get_identity_nonce_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(uint64, tag = "1")]
            IdentityNonce(u64),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityNonceResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityContractNonceResponse {
    #[prost(oneof = "get_identity_contract_nonce_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_contract_nonce_response::Version>,
}
/// Nested message and enum types in `GetIdentityContractNonceResponse`.
pub mod get_identity_contract_nonce_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityContractNonceResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_identity_contract_nonce_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_identity_contract_nonce_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityContractNonceResponseV0`.
    pub mod get_identity_contract_nonce_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(uint64, tag = "1")]
            IdentityContractNonce(u64),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityContractNonceResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityBalanceResponse {
    #[prost(oneof = "get_identity_balance_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_balance_response::Version>,
}
/// Nested message and enum types in `GetIdentityBalanceResponse`.
pub mod get_identity_balance_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityBalanceResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_identity_balance_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_identity_balance_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityBalanceResponseV0`.
    pub mod get_identity_balance_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The balance of the requested identity
            #[prost(uint64, tag = "1")]
            Balance(u64),
            /// Proof of the balance, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityBalanceResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityBalanceAndRevisionResponse {
    #[prost(
        oneof = "get_identity_balance_and_revision_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_identity_balance_and_revision_response::Version>,
}
/// Nested message and enum types in `GetIdentityBalanceAndRevisionResponse`.
pub mod get_identity_balance_and_revision_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityBalanceAndRevisionResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_identity_balance_and_revision_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_identity_balance_and_revision_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityBalanceAndRevisionResponseV0`.
    pub mod get_identity_balance_and_revision_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct BalanceAndRevision {
            /// Balance of the identity
            #[prost(uint64, tag = "1")]
            pub balance: u64,
            /// Revision number of the identity
            #[prost(uint64, tag = "2")]
            pub revision: u64,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The balance and revision data
            #[prost(message, tag = "1")]
            BalanceAndRevision(BalanceAndRevision),
            /// Proof of the data, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityBalanceAndRevisionResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyRequestType {
    #[prost(oneof = "key_request_type::Request", tags = "1, 2, 3")]
    pub request: ::core::option::Option<key_request_type::Request>,
}
/// Nested message and enum types in `KeyRequestType`.
pub mod key_request_type {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        /// Request for all keys
        #[prost(message, tag = "1")]
        AllKeys(super::AllKeys),
        /// Request for specific keys by their IDs
        #[prost(message, tag = "2")]
        SpecificKeys(super::SpecificKeys),
        /// Request for keys based on a search criteria
        #[prost(message, tag = "3")]
        SearchKey(super::SearchKey),
    }
}
/// AllKeys is an empty message used to signify a request for all keys
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AllKeys {}
/// SpecificKeys is used to request specific keys by their IDs
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpecificKeys {
    /// List of key IDs
    #[prost(uint32, repeated, tag = "1")]
    pub key_ids: ::prost::alloc::vec::Vec<u32>,
}
/// SearchKey represents a request to search for keys based on specific criteria
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchKey {
    /// Map of purposes to their security level maps
    #[prost(map = "uint32, message", tag = "1")]
    pub purpose_map: ::std::collections::HashMap<u32, SecurityLevelMap>,
}
/// SecurityLevelMap maps security levels to a request type for key retrieval
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityLevelMap {
    /// Maps security levels to key request types
    #[prost(
        map = "uint32, enumeration(security_level_map::KeyKindRequestType)",
        tag = "1"
    )]
    pub security_level_map: ::std::collections::HashMap<u32, i32>,
}
/// Nested message and enum types in `SecurityLevelMap`.
pub mod security_level_map {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum KeyKindRequestType {
        /// Request the current key of a particular kind
        CurrentKeyOfKindRequest = 0,
        /// Request all keys of a particular kind
        AllKeysOfKindRequest = 1,
    }
    impl KeyKindRequestType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                KeyKindRequestType::CurrentKeyOfKindRequest => "CURRENT_KEY_OF_KIND_REQUEST",
                KeyKindRequestType::AllKeysOfKindRequest => "ALL_KEYS_OF_KIND_REQUEST",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CURRENT_KEY_OF_KIND_REQUEST" => Some(Self::CurrentKeyOfKindRequest),
                "ALL_KEYS_OF_KIND_REQUEST" => Some(Self::AllKeysOfKindRequest),
                _ => None,
            }
        }
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityKeysRequest {
    #[prost(oneof = "get_identity_keys_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_keys_request::Version>,
}
/// Nested message and enum types in `GetIdentityKeysRequest`.
pub mod get_identity_keys_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityKeysRequestV0 {
        /// ID of the identity for key retrieval
        #[prost(bytes = "vec", tag = "1")]
        pub identity_id: ::prost::alloc::vec::Vec<u8>,
        /// Type of key request: all, specific, or search
        #[prost(message, optional, tag = "2")]
        pub request_type: ::core::option::Option<super::KeyRequestType>,
        /// Limit on the number of keys to be returned
        #[prost(message, optional, tag = "3")]
        pub limit: ::core::option::Option<u32>,
        /// Offset for pagination through the keys
        #[prost(message, optional, tag = "4")]
        pub offset: ::core::option::Option<u32>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "5")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityKeysRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityKeysResponse {
    #[prost(oneof = "get_identity_keys_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_keys_response::Version>,
}
/// Nested message and enum types in `GetIdentityKeysResponse`.
pub mod get_identity_keys_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityKeysResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_identity_keys_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_identity_keys_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityKeysResponseV0`.
    pub mod get_identity_keys_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Keys {
            #[prost(bytes = "vec", repeated, tag = "1")]
            pub keys_bytes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual key data
            #[prost(message, tag = "1")]
            Keys(Keys),
            /// Proof of the keys data, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityKeysResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesContractKeysRequest {
    #[prost(oneof = "get_identities_contract_keys_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_contract_keys_request::Version>,
}
/// Nested message and enum types in `GetIdentitiesContractKeysRequest`.
pub mod get_identities_contract_keys_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesContractKeysRequestV0 {
        #[prost(bytes = "vec", repeated, tag = "1")]
        pub identities_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bytes = "vec", tag = "2")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(string, optional, tag = "3")]
        pub document_type_name: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(enumeration = "super::KeyPurpose", repeated, tag = "4")]
        pub purposes: ::prost::alloc::vec::Vec<i32>,
        #[prost(bool, tag = "5")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesContractKeysRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesContractKeysResponse {
    #[prost(oneof = "get_identities_contract_keys_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_contract_keys_response::Version>,
}
/// Nested message and enum types in `GetIdentitiesContractKeysResponse`.
pub mod get_identities_contract_keys_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesContractKeysResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_identities_contract_keys_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_identities_contract_keys_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentitiesContractKeysResponseV0`.
    pub mod get_identities_contract_keys_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct PurposeKeys {
            #[prost(enumeration = "super::super::KeyPurpose", tag = "1")]
            pub purpose: i32,
            #[prost(bytes = "vec", repeated, tag = "2")]
            pub keys_bytes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IdentityKeys {
            #[prost(bytes = "vec", tag = "1")]
            pub identity_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(message, repeated, tag = "2")]
            pub keys: ::prost::alloc::vec::Vec<PurposeKeys>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IdentitiesKeys {
            #[prost(message, repeated, tag = "1")]
            pub entries: ::prost::alloc::vec::Vec<IdentityKeys>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            IdentitiesKeys(IdentitiesKeys),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesContractKeysResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEvonodesProposedEpochBlocksByIdsRequest {
    #[prost(
        oneof = "get_evonodes_proposed_epoch_blocks_by_ids_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_evonodes_proposed_epoch_blocks_by_ids_request::Version>,
}
/// Nested message and enum types in `GetEvonodesProposedEpochBlocksByIdsRequest`.
pub mod get_evonodes_proposed_epoch_blocks_by_ids_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetEvonodesProposedEpochBlocksByIdsRequestV0 {
        /// The epoch we are querying for, if none is set, get current epoch
        #[prost(uint32, optional, tag = "1")]
        pub epoch: ::core::option::Option<u32>,
        /// IDs of the evonodes for which we want to get their proposed blocks
        #[prost(bytes = "vec", repeated, tag = "2")]
        pub ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetEvonodesProposedEpochBlocksByIdsRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEvonodesProposedEpochBlocksResponse {
    #[prost(
        oneof = "get_evonodes_proposed_epoch_blocks_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_evonodes_proposed_epoch_blocks_response::Version>,
}
/// Nested message and enum types in `GetEvonodesProposedEpochBlocksResponse`.
pub mod get_evonodes_proposed_epoch_blocks_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetEvonodesProposedEpochBlocksResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_evonodes_proposed_epoch_blocks_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_evonodes_proposed_epoch_blocks_response_v0::Result>,
    }
    /// Nested message and enum types in `GetEvonodesProposedEpochBlocksResponseV0`.
    pub mod get_evonodes_proposed_epoch_blocks_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EvonodeProposedBlocks {
            #[prost(bytes = "vec", tag = "1")]
            pub pro_tx_hash: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint64, tag = "2")]
            pub count: u64,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EvonodesProposedBlocks {
            #[prost(message, repeated, tag = "1")]
            pub evonodes_proposed_block_counts: ::prost::alloc::vec::Vec<EvonodeProposedBlocks>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual result
            #[prost(message, tag = "1")]
            EvonodesProposedBlockCountsInfo(EvonodesProposedBlocks),
            /// Proof of the keys data, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetEvonodesProposedEpochBlocksResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEvonodesProposedEpochBlocksByRangeRequest {
    #[prost(
        oneof = "get_evonodes_proposed_epoch_blocks_by_range_request::Version",
        tags = "1"
    )]
    pub version:
        ::core::option::Option<get_evonodes_proposed_epoch_blocks_by_range_request::Version>,
}
/// Nested message and enum types in `GetEvonodesProposedEpochBlocksByRangeRequest`.
pub mod get_evonodes_proposed_epoch_blocks_by_range_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetEvonodesProposedEpochBlocksByRangeRequestV0 {
        /// The epoch we are querying for, if none is set, get current epoch
        #[prost(uint32, optional, tag = "1")]
        pub epoch: ::core::option::Option<u32>,
        /// Maximum number of evonodes proposed epoch blocks to return
        #[prost(uint32, optional, tag = "2")]
        pub limit: ::core::option::Option<u32>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "5")]
        pub prove: bool,
        #[prost(
            oneof = "get_evonodes_proposed_epoch_blocks_by_range_request_v0::Start",
            tags = "3, 4"
        )]
        pub start:
            ::core::option::Option<get_evonodes_proposed_epoch_blocks_by_range_request_v0::Start>,
    }
    /// Nested message and enum types in `GetEvonodesProposedEpochBlocksByRangeRequestV0`.
    pub mod get_evonodes_proposed_epoch_blocks_by_range_request_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Start {
            /// Start retrieval after this document
            #[prost(bytes, tag = "3")]
            StartAfter(::prost::alloc::vec::Vec<u8>),
            /// Start retrieval at this document
            #[prost(bytes, tag = "4")]
            StartAt(::prost::alloc::vec::Vec<u8>),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetEvonodesProposedEpochBlocksByRangeRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesBalancesRequest {
    #[prost(oneof = "get_identities_balances_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_balances_request::Version>,
}
/// Nested message and enum types in `GetIdentitiesBalancesRequest`.
pub mod get_identities_balances_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesBalancesRequestV0 {
        #[prost(bytes = "vec", repeated, tag = "1")]
        pub ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesBalancesRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesBalancesResponse {
    #[prost(oneof = "get_identities_balances_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_balances_response::Version>,
}
/// Nested message and enum types in `GetIdentitiesBalancesResponse`.
pub mod get_identities_balances_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesBalancesResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_identities_balances_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_identities_balances_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentitiesBalancesResponseV0`.
    pub mod get_identities_balances_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IdentityBalance {
            #[prost(bytes = "vec", tag = "1")]
            pub identity_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint64, optional, tag = "2")]
            pub balance: ::core::option::Option<u64>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IdentitiesBalances {
            #[prost(message, repeated, tag = "1")]
            pub entries: ::prost::alloc::vec::Vec<IdentityBalance>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            IdentitiesBalances(IdentitiesBalances),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesBalancesResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataContractRequest {
    #[prost(oneof = "get_data_contract_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_data_contract_request::Version>,
}
/// Nested message and enum types in `GetDataContractRequest`.
pub mod get_data_contract_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDataContractRequestV0 {
        /// The ID of the data contract being requested
        #[prost(bytes = "vec", tag = "1")]
        pub id: ::prost::alloc::vec::Vec<u8>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDataContractRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataContractResponse {
    #[prost(oneof = "get_data_contract_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_data_contract_response::Version>,
}
/// Nested message and enum types in `GetDataContractResponse`.
pub mod get_data_contract_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDataContractResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_data_contract_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_data_contract_response_v0::Result>,
    }
    /// Nested message and enum types in `GetDataContractResponseV0`.
    pub mod get_data_contract_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual data contract in binary form
            #[prost(bytes, tag = "1")]
            DataContract(::prost::alloc::vec::Vec<u8>),
            /// Cryptographic proof of the data contract, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDataContractResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataContractsRequest {
    #[prost(oneof = "get_data_contracts_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_data_contracts_request::Version>,
}
/// Nested message and enum types in `GetDataContractsRequest`.
pub mod get_data_contracts_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDataContractsRequestV0 {
        /// A list of unique IDs for the data contracts being requested
        #[prost(bytes = "vec", repeated, tag = "1")]
        pub ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDataContractsRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataContractsResponse {
    #[prost(oneof = "get_data_contracts_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_data_contracts_response::Version>,
}
/// Nested message and enum types in `GetDataContractsResponse`.
pub mod get_data_contracts_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DataContractEntry {
        /// The unique identifier of the data contract
        #[prost(bytes = "vec", tag = "1")]
        pub identifier: ::prost::alloc::vec::Vec<u8>,
        /// The actual data contract content
        #[prost(message, optional, tag = "2")]
        pub data_contract: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    }
    /// DataContracts is a collection of data contract entries.
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DataContracts {
        /// A list of data contract entries
        #[prost(message, repeated, tag = "1")]
        pub data_contract_entries: ::prost::alloc::vec::Vec<DataContractEntry>,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDataContractsResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_data_contracts_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_data_contracts_response_v0::Result>,
    }
    /// Nested message and enum types in `GetDataContractsResponseV0`.
    pub mod get_data_contracts_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual data contracts requested
            #[prost(message, tag = "1")]
            DataContracts(super::DataContracts),
            /// Cryptographic proof for the data contracts, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDataContractsResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataContractHistoryRequest {
    #[prost(oneof = "get_data_contract_history_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_data_contract_history_request::Version>,
}
/// Nested message and enum types in `GetDataContractHistoryRequest`.
pub mod get_data_contract_history_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDataContractHistoryRequestV0 {
        /// The unique ID of the data contract
        #[prost(bytes = "vec", tag = "1")]
        pub id: ::prost::alloc::vec::Vec<u8>,
        /// The maximum number of history entries to return
        #[prost(message, optional, tag = "2")]
        pub limit: ::core::option::Option<u32>,
        /// The offset for pagination through the contract history
        #[prost(message, optional, tag = "3")]
        pub offset: ::core::option::Option<u32>,
        /// Only return results starting at this time in milliseconds
        #[prost(uint64, tag = "4")]
        pub start_at_ms: u64,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "5")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDataContractHistoryRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataContractHistoryResponse {
    #[prost(oneof = "get_data_contract_history_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_data_contract_history_response::Version>,
}
/// Nested message and enum types in `GetDataContractHistoryResponse`.
pub mod get_data_contract_history_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDataContractHistoryResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_data_contract_history_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_data_contract_history_response_v0::Result>,
    }
    /// Nested message and enum types in `GetDataContractHistoryResponseV0`.
    pub mod get_data_contract_history_response_v0 {
        /// Represents a single entry in the data contract's history
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct DataContractHistoryEntry {
            /// The date of the history entry
            #[prost(uint64, tag = "1")]
            pub date: u64,
            /// The value of the data contract at this point in history
            #[prost(bytes = "vec", tag = "2")]
            pub value: ::prost::alloc::vec::Vec<u8>,
        }
        /// Collection of data contract history entries
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct DataContractHistory {
            /// List of history entries
            #[prost(message, repeated, tag = "1")]
            pub data_contract_entries: ::prost::alloc::vec::Vec<DataContractHistoryEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual history of the data contract
            #[prost(message, tag = "1")]
            DataContractHistory(DataContractHistory),
            /// Cryptographic proof of the data contract history, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDataContractHistoryResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDocumentsRequest {
    #[prost(oneof = "get_documents_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_documents_request::Version>,
}
/// Nested message and enum types in `GetDocumentsRequest`.
pub mod get_documents_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDocumentsRequestV0 {
        /// The ID of the data contract containing the documents
        #[prost(bytes = "vec", tag = "1")]
        pub data_contract_id: ::prost::alloc::vec::Vec<u8>,
        /// The type of document being requested
        #[prost(string, tag = "2")]
        pub document_type: ::prost::alloc::string::String,
        /// Conditions to be met by the requested documents
        #[prost(bytes = "vec", tag = "3")]
        pub r#where: ::prost::alloc::vec::Vec<u8>,
        /// Ordering criteria for the documents
        #[prost(bytes = "vec", tag = "4")]
        pub order_by: ::prost::alloc::vec::Vec<u8>,
        /// Maximum number of documents to return
        #[prost(uint32, tag = "5")]
        pub limit: u32,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "8")]
        pub prove: bool,
        /// Specifies the starting point for the document retrieval
        #[prost(oneof = "get_documents_request_v0::Start", tags = "6, 7")]
        pub start: ::core::option::Option<get_documents_request_v0::Start>,
    }
    /// Nested message and enum types in `GetDocumentsRequestV0`.
    pub mod get_documents_request_v0 {
        /// Specifies the starting point for the document retrieval
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Start {
            /// Start retrieval after this document
            #[prost(bytes, tag = "6")]
            StartAfter(::prost::alloc::vec::Vec<u8>),
            /// Start retrieval at this document
            #[prost(bytes, tag = "7")]
            StartAt(::prost::alloc::vec::Vec<u8>),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDocumentsRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDocumentsResponse {
    #[prost(oneof = "get_documents_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_documents_response::Version>,
}
/// Nested message and enum types in `GetDocumentsResponse`.
pub mod get_documents_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetDocumentsResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_documents_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_documents_response_v0::Result>,
    }
    /// Nested message and enum types in `GetDocumentsResponseV0`.
    pub mod get_documents_response_v0 {
        /// Represents a collection of documents
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Documents {
            /// The actual documents in binary form
            #[prost(bytes = "vec", repeated, tag = "1")]
            pub documents: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual documents requested
            #[prost(message, tag = "1")]
            Documents(Documents),
            /// Cryptographic proof of the documents, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetDocumentsResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityByPublicKeyHashRequest {
    #[prost(oneof = "get_identity_by_public_key_hash_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_by_public_key_hash_request::Version>,
}
/// Nested message and enum types in `GetIdentityByPublicKeyHashRequest`.
pub mod get_identity_by_public_key_hash_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityByPublicKeyHashRequestV0 {
        /// The public key hash of the identity being requested
        #[prost(bytes = "vec", tag = "1")]
        pub public_key_hash: ::prost::alloc::vec::Vec<u8>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityByPublicKeyHashRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityByPublicKeyHashResponse {
    #[prost(
        oneof = "get_identity_by_public_key_hash_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_identity_by_public_key_hash_response::Version>,
}
/// Nested message and enum types in `GetIdentityByPublicKeyHashResponse`.
pub mod get_identity_by_public_key_hash_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityByPublicKeyHashResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_identity_by_public_key_hash_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_identity_by_public_key_hash_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityByPublicKeyHashResponseV0`.
    pub mod get_identity_by_public_key_hash_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual identity data corresponding to the requested public key hash
            #[prost(bytes, tag = "1")]
            Identity(::prost::alloc::vec::Vec<u8>),
            /// Cryptographic proof for the identity data, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityByPublicKeyHashResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WaitForStateTransitionResultRequest {
    #[prost(
        oneof = "wait_for_state_transition_result_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<wait_for_state_transition_result_request::Version>,
}
/// Nested message and enum types in `WaitForStateTransitionResultRequest`.
pub mod wait_for_state_transition_result_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct WaitForStateTransitionResultRequestV0 {
        /// The hash of the state transition to wait for
        #[prost(bytes = "vec", tag = "1")]
        pub state_transition_hash: ::prost::alloc::vec::Vec<u8>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(WaitForStateTransitionResultRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WaitForStateTransitionResultResponse {
    #[prost(
        oneof = "wait_for_state_transition_result_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<wait_for_state_transition_result_response::Version>,
}
/// Nested message and enum types in `WaitForStateTransitionResultResponse`.
pub mod wait_for_state_transition_result_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct WaitForStateTransitionResultResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "wait_for_state_transition_result_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<wait_for_state_transition_result_response_v0::Result>,
    }
    /// Nested message and enum types in `WaitForStateTransitionResultResponseV0`.
    pub mod wait_for_state_transition_result_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// Any error that occurred during the state transition broadcast
            #[prost(message, tag = "1")]
            Error(super::super::StateTransitionBroadcastError),
            /// Cryptographic proof for the state transition, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(WaitForStateTransitionResultResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetConsensusParamsRequest {
    #[prost(oneof = "get_consensus_params_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_consensus_params_request::Version>,
}
/// Nested message and enum types in `GetConsensusParamsRequest`.
pub mod get_consensus_params_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GetConsensusParamsRequestV0 {
        /// The blockchain height at which to get the consensus parameters
        #[prost(int32, tag = "1")]
        pub height: i32,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetConsensusParamsRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConsensusParamsResponse {
    #[prost(oneof = "get_consensus_params_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_consensus_params_response::Version>,
}
/// Nested message and enum types in `GetConsensusParamsResponse`.
pub mod get_consensus_params_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ConsensusParamsBlock {
        /// The maximum size of a block in bytes
        #[prost(string, tag = "1")]
        pub max_bytes: ::prost::alloc::string::String,
        /// The maximum gas allowed in a block
        #[prost(string, tag = "2")]
        pub max_gas: ::prost::alloc::string::String,
        /// The minimum time increment between consecutive blocks, in milliseconds
        #[prost(string, tag = "3")]
        pub time_iota_ms: ::prost::alloc::string::String,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ConsensusParamsEvidence {
        /// The maximum age of evidence, in number of blocks
        #[prost(string, tag = "1")]
        pub max_age_num_blocks: ::prost::alloc::string::String,
        /// The maximum age of evidence, as a duration
        #[prost(string, tag = "2")]
        pub max_age_duration: ::prost::alloc::string::String,
        /// The maximum size of evidence in bytes
        #[prost(string, tag = "3")]
        pub max_bytes: ::prost::alloc::string::String,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetConsensusParamsResponseV0 {
        /// Consensus parameters related to block creation and validation
        #[prost(message, optional, tag = "1")]
        pub block: ::core::option::Option<ConsensusParamsBlock>,
        /// Consensus parameters related to evidence
        #[prost(message, optional, tag = "2")]
        pub evidence: ::core::option::Option<ConsensusParamsEvidence>,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetConsensusParamsResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetProtocolVersionUpgradeStateRequest {
    #[prost(
        oneof = "get_protocol_version_upgrade_state_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_protocol_version_upgrade_state_request::Version>,
}
/// Nested message and enum types in `GetProtocolVersionUpgradeStateRequest`.
pub mod get_protocol_version_upgrade_state_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GetProtocolVersionUpgradeStateRequestV0 {
        /// Flag to request a proof as the response
        #[prost(bool, tag = "1")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetProtocolVersionUpgradeStateRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProtocolVersionUpgradeStateResponse {
    #[prost(
        oneof = "get_protocol_version_upgrade_state_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_protocol_version_upgrade_state_response::Version>,
}
/// Nested message and enum types in `GetProtocolVersionUpgradeStateResponse`.
pub mod get_protocol_version_upgrade_state_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetProtocolVersionUpgradeStateResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_protocol_version_upgrade_state_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_protocol_version_upgrade_state_response_v0::Result>,
    }
    /// Nested message and enum types in `GetProtocolVersionUpgradeStateResponseV0`.
    pub mod get_protocol_version_upgrade_state_response_v0 {
        /// Versions holds a collection of version entries
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Versions {
            /// List of protocol version entries
            #[prost(message, repeated, tag = "1")]
            pub versions: ::prost::alloc::vec::Vec<VersionEntry>,
        }
        /// VersionEntry represents a single entry of a protocol version
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct VersionEntry {
            /// The protocol version number
            #[prost(uint32, tag = "1")]
            pub version_number: u32,
            /// The vote count for this protocol version
            #[prost(uint32, tag = "2")]
            pub vote_count: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual protocol version information
            #[prost(message, tag = "1")]
            Versions(Versions),
            /// Cryptographic proof of the protocol version information, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetProtocolVersionUpgradeStateResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProtocolVersionUpgradeVoteStatusRequest {
    #[prost(
        oneof = "get_protocol_version_upgrade_vote_status_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_protocol_version_upgrade_vote_status_request::Version>,
}
/// Nested message and enum types in `GetProtocolVersionUpgradeVoteStatusRequest`.
pub mod get_protocol_version_upgrade_vote_status_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetProtocolVersionUpgradeVoteStatusRequestV0 {
        /// The starting masternode provider transaction hash to filter the votes by
        #[prost(bytes = "vec", tag = "1")]
        pub start_pro_tx_hash: ::prost::alloc::vec::Vec<u8>,
        /// The number of vote entries to retrieve
        #[prost(uint32, tag = "2")]
        pub count: u32,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetProtocolVersionUpgradeVoteStatusRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProtocolVersionUpgradeVoteStatusResponse {
    #[prost(
        oneof = "get_protocol_version_upgrade_vote_status_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_protocol_version_upgrade_vote_status_response::Version>,
}
/// Nested message and enum types in `GetProtocolVersionUpgradeVoteStatusResponse`.
pub mod get_protocol_version_upgrade_vote_status_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetProtocolVersionUpgradeVoteStatusResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_protocol_version_upgrade_vote_status_response_v0::Result",
            tags = "1, 2"
        )]
        pub result:
            ::core::option::Option<get_protocol_version_upgrade_vote_status_response_v0::Result>,
    }
    /// Nested message and enum types in `GetProtocolVersionUpgradeVoteStatusResponseV0`.
    pub mod get_protocol_version_upgrade_vote_status_response_v0 {
        /// VersionSignals holds a collection of version signal entries
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct VersionSignals {
            /// List of version signal entries
            #[prost(message, repeated, tag = "1")]
            pub version_signals: ::prost::alloc::vec::Vec<VersionSignal>,
        }
        /// VersionSignal represents a single voting signal for a protocol version
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct VersionSignal {
            /// The masternode provider transaction hash associated with the vote
            #[prost(bytes = "vec", tag = "1")]
            pub pro_tx_hash: ::prost::alloc::vec::Vec<u8>,
            /// The protocol version number that is being voted on
            #[prost(uint32, tag = "2")]
            pub version: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual version signal information
            #[prost(message, tag = "1")]
            Versions(VersionSignals),
            /// Cryptographic proof of the version signal information, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetProtocolVersionUpgradeVoteStatusResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEpochsInfoRequest {
    #[prost(oneof = "get_epochs_info_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_epochs_info_request::Version>,
}
/// Nested message and enum types in `GetEpochsInfoRequest`.
pub mod get_epochs_info_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GetEpochsInfoRequestV0 {
        /// The starting epoch for the request
        #[prost(message, optional, tag = "1")]
        pub start_epoch: ::core::option::Option<u32>,
        /// The number of epochs to retrieve information for
        #[prost(uint32, tag = "2")]
        pub count: u32,
        /// Flag indicating if the epochs should be listed in ascending order
        #[prost(bool, tag = "3")]
        pub ascending: bool,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "4")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetEpochsInfoRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEpochsInfoResponse {
    #[prost(oneof = "get_epochs_info_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_epochs_info_response::Version>,
}
/// Nested message and enum types in `GetEpochsInfoResponse`.
pub mod get_epochs_info_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetEpochsInfoResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_epochs_info_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_epochs_info_response_v0::Result>,
    }
    /// Nested message and enum types in `GetEpochsInfoResponseV0`.
    pub mod get_epochs_info_response_v0 {
        /// EpochInfos holds a collection of epoch information entries
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EpochInfos {
            /// List of information for each requested epoch
            #[prost(message, repeated, tag = "1")]
            pub epoch_infos: ::prost::alloc::vec::Vec<EpochInfo>,
        }
        /// EpochInfo represents information about a single epoch
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct EpochInfo {
            /// The number of the epoch
            #[prost(uint32, tag = "1")]
            pub number: u32,
            /// The height of the first block in this epoch
            #[prost(uint64, tag = "2")]
            pub first_block_height: u64,
            /// The height of the first Core block in this epoch
            #[prost(uint32, tag = "3")]
            pub first_core_block_height: u32,
            /// The start time of the epoch
            #[prost(uint64, tag = "4")]
            pub start_time: u64,
            /// The fee multiplier applicable in this epoch
            #[prost(double, tag = "5")]
            pub fee_multiplier: f64,
            #[prost(uint32, tag = "6")]
            pub protocol_version: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// The actual information about the requested epochs
            #[prost(message, tag = "1")]
            Epochs(EpochInfos),
            /// Cryptographic proof of the epoch information, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetEpochsInfoResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourcesRequest {
    #[prost(oneof = "get_contested_resources_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_contested_resources_request::Version>,
}
/// Nested message and enum types in `GetContestedResourcesRequest`.
pub mod get_contested_resources_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourcesRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(string, tag = "2")]
        pub document_type_name: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub index_name: ::prost::alloc::string::String,
        #[prost(bytes = "vec", repeated, tag = "4")]
        pub start_index_values: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bytes = "vec", repeated, tag = "5")]
        pub end_index_values: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(message, optional, tag = "6")]
        pub start_at_value_info:
            ::core::option::Option<get_contested_resources_request_v0::StartAtValueInfo>,
        #[prost(uint32, optional, tag = "7")]
        pub count: ::core::option::Option<u32>,
        #[prost(bool, tag = "8")]
        pub order_ascending: bool,
        #[prost(bool, tag = "9")]
        pub prove: bool,
    }
    /// Nested message and enum types in `GetContestedResourcesRequestV0`.
    pub mod get_contested_resources_request_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StartAtValueInfo {
            #[prost(bytes = "vec", tag = "1")]
            pub start_value: ::prost::alloc::vec::Vec<u8>,
            #[prost(bool, tag = "2")]
            pub start_value_included: bool,
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourcesRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourcesResponse {
    #[prost(oneof = "get_contested_resources_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_contested_resources_response::Version>,
}
/// Nested message and enum types in `GetContestedResourcesResponse`.
pub mod get_contested_resources_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourcesResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_contested_resources_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_contested_resources_response_v0::Result>,
    }
    /// Nested message and enum types in `GetContestedResourcesResponseV0`.
    pub mod get_contested_resources_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContestedResourceValues {
            #[prost(bytes = "vec", repeated, tag = "1")]
            pub contested_resource_values: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            ContestedResourceValues(ContestedResourceValues),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourcesResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetVotePollsByEndDateRequest {
    #[prost(oneof = "get_vote_polls_by_end_date_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_vote_polls_by_end_date_request::Version>,
}
/// Nested message and enum types in `GetVotePollsByEndDateRequest`.
pub mod get_vote_polls_by_end_date_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GetVotePollsByEndDateRequestV0 {
        #[prost(message, optional, tag = "1")]
        pub start_time_info:
            ::core::option::Option<get_vote_polls_by_end_date_request_v0::StartAtTimeInfo>,
        #[prost(message, optional, tag = "2")]
        pub end_time_info:
            ::core::option::Option<get_vote_polls_by_end_date_request_v0::EndAtTimeInfo>,
        #[prost(uint32, optional, tag = "3")]
        pub limit: ::core::option::Option<u32>,
        #[prost(uint32, optional, tag = "4")]
        pub offset: ::core::option::Option<u32>,
        #[prost(bool, tag = "5")]
        pub ascending: bool,
        #[prost(bool, tag = "6")]
        pub prove: bool,
    }
    /// Nested message and enum types in `GetVotePollsByEndDateRequestV0`.
    pub mod get_vote_polls_by_end_date_request_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct StartAtTimeInfo {
            #[prost(uint64, tag = "1")]
            pub start_time_ms: u64,
            #[prost(bool, tag = "2")]
            pub start_time_included: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct EndAtTimeInfo {
            #[prost(uint64, tag = "1")]
            pub end_time_ms: u64,
            #[prost(bool, tag = "2")]
            pub end_time_included: bool,
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetVotePollsByEndDateRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVotePollsByEndDateResponse {
    #[prost(oneof = "get_vote_polls_by_end_date_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_vote_polls_by_end_date_response::Version>,
}
/// Nested message and enum types in `GetVotePollsByEndDateResponse`.
pub mod get_vote_polls_by_end_date_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetVotePollsByEndDateResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_vote_polls_by_end_date_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_vote_polls_by_end_date_response_v0::Result>,
    }
    /// Nested message and enum types in `GetVotePollsByEndDateResponseV0`.
    pub mod get_vote_polls_by_end_date_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct SerializedVotePollsByTimestamp {
            #[prost(uint64, tag = "1")]
            pub timestamp: u64,
            #[prost(bytes = "vec", repeated, tag = "2")]
            pub serialized_vote_polls: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct SerializedVotePollsByTimestamps {
            #[prost(message, repeated, tag = "1")]
            pub vote_polls_by_timestamps: ::prost::alloc::vec::Vec<SerializedVotePollsByTimestamp>,
            #[prost(bool, tag = "2")]
            pub finished_results: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            VotePollsByTimestamps(SerializedVotePollsByTimestamps),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetVotePollsByEndDateResponseV0),
    }
}
/// What's the state of a contested resource vote? (ie who is winning?)
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourceVoteStateRequest {
    #[prost(
        oneof = "get_contested_resource_vote_state_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_contested_resource_vote_state_request::Version>,
}
/// Nested message and enum types in `GetContestedResourceVoteStateRequest`.
pub mod get_contested_resource_vote_state_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourceVoteStateRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(string, tag = "2")]
        pub document_type_name: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub index_name: ::prost::alloc::string::String,
        #[prost(bytes = "vec", repeated, tag = "4")]
        pub index_values: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(
            enumeration = "get_contested_resource_vote_state_request_v0::ResultType",
            tag = "5"
        )]
        pub result_type: i32,
        #[prost(bool, tag = "6")]
        pub allow_include_locked_and_abstaining_vote_tally: bool,
        #[prost(message, optional, tag = "7")]
        pub start_at_identifier_info: ::core::option::Option<
            get_contested_resource_vote_state_request_v0::StartAtIdentifierInfo,
        >,
        #[prost(uint32, optional, tag = "8")]
        pub count: ::core::option::Option<u32>,
        #[prost(bool, tag = "9")]
        pub prove: bool,
    }
    /// Nested message and enum types in `GetContestedResourceVoteStateRequestV0`.
    pub mod get_contested_resource_vote_state_request_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StartAtIdentifierInfo {
            #[prost(bytes = "vec", tag = "1")]
            pub start_identifier: ::prost::alloc::vec::Vec<u8>,
            #[prost(bool, tag = "2")]
            pub start_identifier_included: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(
            Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,
        )]
        #[repr(i32)]
        pub enum ResultType {
            Documents = 0,
            VoteTally = 1,
            DocumentsAndVoteTally = 2,
        }
        impl ResultType {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    ResultType::Documents => "DOCUMENTS",
                    ResultType::VoteTally => "VOTE_TALLY",
                    ResultType::DocumentsAndVoteTally => "DOCUMENTS_AND_VOTE_TALLY",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "DOCUMENTS" => Some(Self::Documents),
                    "VOTE_TALLY" => Some(Self::VoteTally),
                    "DOCUMENTS_AND_VOTE_TALLY" => Some(Self::DocumentsAndVoteTally),
                    _ => None,
                }
            }
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourceVoteStateRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourceVoteStateResponse {
    #[prost(
        oneof = "get_contested_resource_vote_state_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_contested_resource_vote_state_response::Version>,
}
/// Nested message and enum types in `GetContestedResourceVoteStateResponse`.
pub mod get_contested_resource_vote_state_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourceVoteStateResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_contested_resource_vote_state_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_contested_resource_vote_state_response_v0::Result>,
    }
    /// Nested message and enum types in `GetContestedResourceVoteStateResponseV0`.
    pub mod get_contested_resource_vote_state_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct FinishedVoteInfo {
            #[prost(enumeration = "finished_vote_info::FinishedVoteOutcome", tag = "1")]
            pub finished_vote_outcome: i32,
            /// Only used when vote_choice_type is TOWARDS_IDENTITY
            #[prost(bytes = "vec", optional, tag = "2")]
            pub won_by_identity_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
            #[prost(uint64, tag = "3")]
            pub finished_at_block_height: u64,
            #[prost(uint32, tag = "4")]
            pub finished_at_core_block_height: u32,
            #[prost(uint64, tag = "5")]
            pub finished_at_block_time_ms: u64,
            #[prost(uint32, tag = "6")]
            pub finished_at_epoch: u32,
        }
        /// Nested message and enum types in `FinishedVoteInfo`.
        pub mod finished_vote_info {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[derive(
                Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,
            )]
            #[repr(i32)]
            pub enum FinishedVoteOutcome {
                TowardsIdentity = 0,
                Locked = 1,
                NoPreviousWinner = 2,
            }
            impl FinishedVoteOutcome {
                /// String value of the enum field names used in the ProtoBuf definition.
                ///
                /// The values are not transformed in any way and thus are considered stable
                /// (if the ProtoBuf definition does not change) and safe for programmatic use.
                pub fn as_str_name(&self) -> &'static str {
                    match self {
                        FinishedVoteOutcome::TowardsIdentity => "TOWARDS_IDENTITY",
                        FinishedVoteOutcome::Locked => "LOCKED",
                        FinishedVoteOutcome::NoPreviousWinner => "NO_PREVIOUS_WINNER",
                    }
                }
                /// Creates an enum from field names used in the ProtoBuf definition.
                pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                    match value {
                        "TOWARDS_IDENTITY" => Some(Self::TowardsIdentity),
                        "LOCKED" => Some(Self::Locked),
                        "NO_PREVIOUS_WINNER" => Some(Self::NoPreviousWinner),
                        _ => None,
                    }
                }
            }
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContestedResourceContenders {
            #[prost(message, repeated, tag = "1")]
            pub contenders: ::prost::alloc::vec::Vec<Contender>,
            #[prost(uint32, optional, tag = "2")]
            pub abstain_vote_tally: ::core::option::Option<u32>,
            #[prost(uint32, optional, tag = "3")]
            pub lock_vote_tally: ::core::option::Option<u32>,
            #[prost(message, optional, tag = "4")]
            pub finished_vote_info: ::core::option::Option<FinishedVoteInfo>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Contender {
            #[prost(bytes = "vec", tag = "1")]
            pub identifier: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint32, optional, tag = "2")]
            pub vote_count: ::core::option::Option<u32>,
            #[prost(bytes = "vec", optional, tag = "3")]
            pub document: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            ContestedResourceContenders(ContestedResourceContenders),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourceVoteStateResponseV0),
    }
}
/// Who voted for a contested resource to go to a specific identity?
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourceVotersForIdentityRequest {
    #[prost(
        oneof = "get_contested_resource_voters_for_identity_request::Version",
        tags = "1"
    )]
    pub version:
        ::core::option::Option<get_contested_resource_voters_for_identity_request::Version>,
}
/// Nested message and enum types in `GetContestedResourceVotersForIdentityRequest`.
pub mod get_contested_resource_voters_for_identity_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourceVotersForIdentityRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(string, tag = "2")]
        pub document_type_name: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub index_name: ::prost::alloc::string::String,
        #[prost(bytes = "vec", repeated, tag = "4")]
        pub index_values: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bytes = "vec", tag = "5")]
        pub contestant_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "6")]
        pub start_at_identifier_info: ::core::option::Option<
            get_contested_resource_voters_for_identity_request_v0::StartAtIdentifierInfo,
        >,
        #[prost(uint32, optional, tag = "7")]
        pub count: ::core::option::Option<u32>,
        #[prost(bool, tag = "8")]
        pub order_ascending: bool,
        #[prost(bool, tag = "9")]
        pub prove: bool,
    }
    /// Nested message and enum types in `GetContestedResourceVotersForIdentityRequestV0`.
    pub mod get_contested_resource_voters_for_identity_request_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StartAtIdentifierInfo {
            #[prost(bytes = "vec", tag = "1")]
            pub start_identifier: ::prost::alloc::vec::Vec<u8>,
            #[prost(bool, tag = "2")]
            pub start_identifier_included: bool,
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourceVotersForIdentityRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourceVotersForIdentityResponse {
    #[prost(
        oneof = "get_contested_resource_voters_for_identity_response::Version",
        tags = "1"
    )]
    pub version:
        ::core::option::Option<get_contested_resource_voters_for_identity_response::Version>,
}
/// Nested message and enum types in `GetContestedResourceVotersForIdentityResponse`.
pub mod get_contested_resource_voters_for_identity_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourceVotersForIdentityResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_contested_resource_voters_for_identity_response_v0::Result",
            tags = "1, 2"
        )]
        pub result:
            ::core::option::Option<get_contested_resource_voters_for_identity_response_v0::Result>,
    }
    /// Nested message and enum types in `GetContestedResourceVotersForIdentityResponseV0`.
    pub mod get_contested_resource_voters_for_identity_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContestedResourceVoters {
            #[prost(bytes = "vec", repeated, tag = "1")]
            pub voters: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
            #[prost(bool, tag = "2")]
            pub finished_results: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            ContestedResourceVoters(ContestedResourceVoters),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourceVotersForIdentityResponseV0),
    }
}
/// How did an identity vote?
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourceIdentityVotesRequest {
    #[prost(
        oneof = "get_contested_resource_identity_votes_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_contested_resource_identity_votes_request::Version>,
}
/// Nested message and enum types in `GetContestedResourceIdentityVotesRequest`.
pub mod get_contested_resource_identity_votes_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourceIdentityVotesRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub identity_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "2")]
        pub limit: ::core::option::Option<u32>,
        #[prost(message, optional, tag = "3")]
        pub offset: ::core::option::Option<u32>,
        #[prost(bool, tag = "4")]
        pub order_ascending: bool,
        #[prost(message, optional, tag = "5")]
        pub start_at_vote_poll_id_info: ::core::option::Option<
            get_contested_resource_identity_votes_request_v0::StartAtVotePollIdInfo,
        >,
        #[prost(bool, tag = "6")]
        pub prove: bool,
    }
    /// Nested message and enum types in `GetContestedResourceIdentityVotesRequestV0`.
    pub mod get_contested_resource_identity_votes_request_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StartAtVotePollIdInfo {
            #[prost(bytes = "vec", tag = "1")]
            pub start_at_poll_identifier: ::prost::alloc::vec::Vec<u8>,
            #[prost(bool, tag = "2")]
            pub start_poll_identifier_included: bool,
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourceIdentityVotesRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContestedResourceIdentityVotesResponse {
    #[prost(
        oneof = "get_contested_resource_identity_votes_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_contested_resource_identity_votes_response::Version>,
}
/// Nested message and enum types in `GetContestedResourceIdentityVotesResponse`.
pub mod get_contested_resource_identity_votes_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetContestedResourceIdentityVotesResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_contested_resource_identity_votes_response_v0::Result",
            tags = "1, 2"
        )]
        pub result:
            ::core::option::Option<get_contested_resource_identity_votes_response_v0::Result>,
    }
    /// Nested message and enum types in `GetContestedResourceIdentityVotesResponseV0`.
    pub mod get_contested_resource_identity_votes_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContestedResourceIdentityVotes {
            #[prost(message, repeated, tag = "1")]
            pub contested_resource_identity_votes:
                ::prost::alloc::vec::Vec<ContestedResourceIdentityVote>,
            #[prost(bool, tag = "2")]
            pub finished_results: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ResourceVoteChoice {
            #[prost(enumeration = "resource_vote_choice::VoteChoiceType", tag = "1")]
            pub vote_choice_type: i32,
            /// Only used when vote_choice_type is TOWARDS_IDENTITY
            #[prost(bytes = "vec", optional, tag = "2")]
            pub identity_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
        }
        /// Nested message and enum types in `ResourceVoteChoice`.
        pub mod resource_vote_choice {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[derive(
                Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,
            )]
            #[repr(i32)]
            pub enum VoteChoiceType {
                TowardsIdentity = 0,
                Abstain = 1,
                Lock = 2,
            }
            impl VoteChoiceType {
                /// String value of the enum field names used in the ProtoBuf definition.
                ///
                /// The values are not transformed in any way and thus are considered stable
                /// (if the ProtoBuf definition does not change) and safe for programmatic use.
                pub fn as_str_name(&self) -> &'static str {
                    match self {
                        VoteChoiceType::TowardsIdentity => "TOWARDS_IDENTITY",
                        VoteChoiceType::Abstain => "ABSTAIN",
                        VoteChoiceType::Lock => "LOCK",
                    }
                }
                /// Creates an enum from field names used in the ProtoBuf definition.
                pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                    match value {
                        "TOWARDS_IDENTITY" => Some(Self::TowardsIdentity),
                        "ABSTAIN" => Some(Self::Abstain),
                        "LOCK" => Some(Self::Lock),
                        _ => None,
                    }
                }
            }
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContestedResourceIdentityVote {
            #[prost(bytes = "vec", tag = "1")]
            pub contract_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(string, tag = "2")]
            pub document_type_name: ::prost::alloc::string::String,
            #[prost(bytes = "vec", repeated, tag = "3")]
            pub serialized_index_storage_values:
                ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
            #[prost(message, optional, tag = "4")]
            pub vote_choice: ::core::option::Option<ResourceVoteChoice>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            Votes(ContestedResourceIdentityVotes),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetContestedResourceIdentityVotesResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPrefundedSpecializedBalanceRequest {
    #[prost(
        oneof = "get_prefunded_specialized_balance_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_prefunded_specialized_balance_request::Version>,
}
/// Nested message and enum types in `GetPrefundedSpecializedBalanceRequest`.
pub mod get_prefunded_specialized_balance_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetPrefundedSpecializedBalanceRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetPrefundedSpecializedBalanceRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPrefundedSpecializedBalanceResponse {
    #[prost(
        oneof = "get_prefunded_specialized_balance_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_prefunded_specialized_balance_response::Version>,
}
/// Nested message and enum types in `GetPrefundedSpecializedBalanceResponse`.
pub mod get_prefunded_specialized_balance_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetPrefundedSpecializedBalanceResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_prefunded_specialized_balance_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_prefunded_specialized_balance_response_v0::Result>,
    }
    /// Nested message and enum types in `GetPrefundedSpecializedBalanceResponseV0`.
    pub mod get_prefunded_specialized_balance_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(uint64, tag = "1")]
            Balance(u64),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetPrefundedSpecializedBalanceResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTotalCreditsInPlatformRequest {
    #[prost(oneof = "get_total_credits_in_platform_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_total_credits_in_platform_request::Version>,
}
/// Nested message and enum types in `GetTotalCreditsInPlatformRequest`.
pub mod get_total_credits_in_platform_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GetTotalCreditsInPlatformRequestV0 {
        #[prost(bool, tag = "1")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTotalCreditsInPlatformRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTotalCreditsInPlatformResponse {
    #[prost(oneof = "get_total_credits_in_platform_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_total_credits_in_platform_response::Version>,
}
/// Nested message and enum types in `GetTotalCreditsInPlatformResponse`.
pub mod get_total_credits_in_platform_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTotalCreditsInPlatformResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_total_credits_in_platform_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_total_credits_in_platform_response_v0::Result>,
    }
    /// Nested message and enum types in `GetTotalCreditsInPlatformResponseV0`.
    pub mod get_total_credits_in_platform_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(uint64, tag = "1")]
            Credits(u64),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTotalCreditsInPlatformResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPathElementsRequest {
    #[prost(oneof = "get_path_elements_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_path_elements_request::Version>,
}
/// Nested message and enum types in `GetPathElementsRequest`.
pub mod get_path_elements_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetPathElementsRequestV0 {
        #[prost(bytes = "vec", repeated, tag = "1")]
        pub path: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bytes = "vec", repeated, tag = "2")]
        pub keys: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetPathElementsRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPathElementsResponse {
    #[prost(oneof = "get_path_elements_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_path_elements_response::Version>,
}
/// Nested message and enum types in `GetPathElementsResponse`.
pub mod get_path_elements_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetPathElementsResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_path_elements_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_path_elements_response_v0::Result>,
    }
    /// Nested message and enum types in `GetPathElementsResponseV0`.
    pub mod get_path_elements_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Elements {
            #[prost(bytes = "vec", repeated, tag = "1")]
            pub elements: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            Elements(Elements),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetPathElementsResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStatusRequest {
    #[prost(oneof = "get_status_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_status_request::Version>,
}
/// Nested message and enum types in `GetStatusRequest`.
pub mod get_status_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GetStatusRequestV0 {}
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetStatusRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStatusResponse {
    #[prost(oneof = "get_status_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_status_response::Version>,
}
/// Nested message and enum types in `GetStatusResponse`.
pub mod get_status_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetStatusResponseV0 {
        #[prost(message, optional, tag = "1")]
        pub version: ::core::option::Option<get_status_response_v0::Version>,
        #[prost(message, optional, tag = "2")]
        pub node: ::core::option::Option<get_status_response_v0::Node>,
        #[prost(message, optional, tag = "3")]
        pub chain: ::core::option::Option<get_status_response_v0::Chain>,
        #[prost(message, optional, tag = "4")]
        pub network: ::core::option::Option<get_status_response_v0::Network>,
        #[prost(message, optional, tag = "5")]
        pub state_sync: ::core::option::Option<get_status_response_v0::StateSync>,
        #[prost(message, optional, tag = "6")]
        pub time: ::core::option::Option<get_status_response_v0::Time>,
    }
    /// Nested message and enum types in `GetStatusResponseV0`.
    pub mod get_status_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Version {
            #[prost(message, optional, tag = "1")]
            pub software: ::core::option::Option<version::Software>,
            #[prost(message, optional, tag = "2")]
            pub protocol: ::core::option::Option<version::Protocol>,
        }
        /// Nested message and enum types in `Version`.
        pub mod version {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[derive(::dapi_grpc_macros::Mockable)]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct Software {
                #[prost(string, tag = "1")]
                pub dapi: ::prost::alloc::string::String,
                /// It will be missing if Drive is not responding
                #[prost(string, optional, tag = "2")]
                pub drive: ::core::option::Option<::prost::alloc::string::String>,
                /// It will be missing if Tenderdash is not responding
                #[prost(string, optional, tag = "3")]
                pub tenderdash: ::core::option::Option<::prost::alloc::string::String>,
            }
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[derive(::dapi_grpc_macros::Mockable)]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, Copy, PartialEq, ::prost::Message)]
            pub struct Protocol {
                #[prost(message, optional, tag = "1")]
                pub tenderdash: ::core::option::Option<protocol::Tenderdash>,
                #[prost(message, optional, tag = "2")]
                pub drive: ::core::option::Option<protocol::Drive>,
            }
            /// Nested message and enum types in `Protocol`.
            pub mod protocol {
                #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
                #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
                #[derive(::dapi_grpc_macros::Mockable)]
                #[allow(clippy::derive_partial_eq_without_eq)]
                #[derive(Clone, Copy, PartialEq, ::prost::Message)]
                pub struct Tenderdash {
                    #[prost(uint32, tag = "1")]
                    pub p2p: u32,
                    #[prost(uint32, tag = "2")]
                    pub block: u32,
                }
                #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
                #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
                #[derive(::dapi_grpc_macros::Mockable)]
                #[allow(clippy::derive_partial_eq_without_eq)]
                #[derive(Clone, Copy, PartialEq, ::prost::Message)]
                pub struct Drive {
                    #[prost(uint32, tag = "3")]
                    pub latest: u32,
                    #[prost(uint32, tag = "4")]
                    pub current: u32,
                }
            }
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct Time {
            #[prost(uint64, tag = "1")]
            pub local: u64,
            /// It will be missing if Drive is not responding
            #[prost(uint64, optional, tag = "2")]
            pub block: ::core::option::Option<u64>,
            /// It will be missing if Drive is not responding
            #[prost(uint64, optional, tag = "3")]
            pub genesis: ::core::option::Option<u64>,
            /// It will be missing if Drive is not responding
            #[prost(uint32, optional, tag = "4")]
            pub epoch: ::core::option::Option<u32>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Node {
            /// Platform node ID
            #[prost(bytes = "vec", tag = "1")]
            pub id: ::prost::alloc::vec::Vec<u8>,
            /// Evo masternode pro tx hash. It will be absent if the node is a fullnode
            #[prost(bytes = "vec", optional, tag = "2")]
            pub pro_tx_hash: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Chain {
            #[prost(bool, tag = "1")]
            pub catching_up: bool,
            #[prost(bytes = "vec", tag = "2")]
            pub latest_block_hash: ::prost::alloc::vec::Vec<u8>,
            #[prost(bytes = "vec", tag = "3")]
            pub latest_app_hash: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint64, tag = "4")]
            pub latest_block_height: u64,
            #[prost(bytes = "vec", tag = "5")]
            pub earliest_block_hash: ::prost::alloc::vec::Vec<u8>,
            #[prost(bytes = "vec", tag = "6")]
            pub earliest_app_hash: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint64, tag = "7")]
            pub earliest_block_height: u64,
            #[prost(uint64, tag = "9")]
            pub max_peer_block_height: u64,
            /// Latest known core height in consensus.
            /// It will be missing if Drive is not responding
            #[prost(uint32, optional, tag = "10")]
            pub core_chain_locked_height: ::core::option::Option<u32>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Network {
            #[prost(string, tag = "1")]
            pub chain_id: ::prost::alloc::string::String,
            #[prost(uint32, tag = "2")]
            pub peers_count: u32,
            #[prost(bool, tag = "3")]
            pub listening: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct StateSync {
            #[prost(uint64, tag = "1")]
            pub total_synced_time: u64,
            #[prost(uint64, tag = "2")]
            pub remaining_time: u64,
            #[prost(uint32, tag = "3")]
            pub total_snapshots: u32,
            #[prost(uint64, tag = "4")]
            pub chunk_process_avg_time: u64,
            #[prost(uint64, tag = "5")]
            pub snapshot_height: u64,
            #[prost(uint64, tag = "6")]
            pub snapshot_chunks_count: u64,
            #[prost(uint64, tag = "7")]
            pub backfilled_blocks: u64,
            #[prost(uint64, tag = "8")]
            pub backfill_blocks_total: u64,
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetStatusResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurrentQuorumsInfoRequest {
    #[prost(oneof = "get_current_quorums_info_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_current_quorums_info_request::Version>,
}
/// Nested message and enum types in `GetCurrentQuorumsInfoRequest`.
pub mod get_current_quorums_info_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GetCurrentQuorumsInfoRequestV0 {}
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetCurrentQuorumsInfoRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurrentQuorumsInfoResponse {
    #[prost(oneof = "get_current_quorums_info_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_current_quorums_info_response::Version>,
}
/// Nested message and enum types in `GetCurrentQuorumsInfoResponse`.
pub mod get_current_quorums_info_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ValidatorV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub pro_tx_hash: ::prost::alloc::vec::Vec<u8>,
        #[prost(string, tag = "2")]
        pub node_ip: ::prost::alloc::string::String,
        #[prost(bool, tag = "3")]
        pub is_banned: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ValidatorSetV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub quorum_hash: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint32, tag = "2")]
        pub core_height: u32,
        #[prost(message, repeated, tag = "3")]
        pub members: ::prost::alloc::vec::Vec<ValidatorV0>,
        #[prost(bytes = "vec", tag = "4")]
        pub threshold_public_key: ::prost::alloc::vec::Vec<u8>,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetCurrentQuorumsInfoResponseV0 {
        #[prost(bytes = "vec", repeated, tag = "1")]
        pub quorum_hashes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bytes = "vec", tag = "2")]
        pub current_quorum_hash: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, repeated, tag = "3")]
        pub validator_sets: ::prost::alloc::vec::Vec<ValidatorSetV0>,
        #[prost(bytes = "vec", tag = "4")]
        pub last_block_proposer: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "5")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetCurrentQuorumsInfoResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityTokenBalancesRequest {
    #[prost(oneof = "get_identity_token_balances_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_token_balances_request::Version>,
}
/// Nested message and enum types in `GetIdentityTokenBalancesRequest`.
pub mod get_identity_token_balances_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityTokenBalancesRequestV0 {
        /// ID of the identity
        #[prost(bytes = "vec", tag = "1")]
        pub identity_id: ::prost::alloc::vec::Vec<u8>,
        /// List of token IDs
        #[prost(bytes = "vec", repeated, tag = "2")]
        pub token_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityTokenBalancesRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityTokenBalancesResponse {
    #[prost(oneof = "get_identity_token_balances_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_token_balances_response::Version>,
}
/// Nested message and enum types in `GetIdentityTokenBalancesResponse`.
pub mod get_identity_token_balances_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityTokenBalancesResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_identity_token_balances_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_identity_token_balances_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityTokenBalancesResponseV0`.
    pub mod get_identity_token_balances_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenBalanceEntry {
            /// Token ID
            #[prost(bytes = "vec", tag = "1")]
            pub token_id: ::prost::alloc::vec::Vec<u8>,
            /// Token balance for the contract
            #[prost(uint64, optional, tag = "2")]
            pub balance: ::core::option::Option<u64>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenBalances {
            /// List of token balances
            #[prost(message, repeated, tag = "1")]
            pub token_balances: ::prost::alloc::vec::Vec<TokenBalanceEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// Actual token balances
            #[prost(message, tag = "1")]
            TokenBalances(TokenBalances),
            /// Proof of the token balances, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityTokenBalancesResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesTokenBalancesRequest {
    #[prost(oneof = "get_identities_token_balances_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_token_balances_request::Version>,
}
/// Nested message and enum types in `GetIdentitiesTokenBalancesRequest`.
pub mod get_identities_token_balances_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesTokenBalancesRequestV0 {
        /// Token ID
        #[prost(bytes = "vec", tag = "1")]
        pub token_id: ::prost::alloc::vec::Vec<u8>,
        /// List of identity IDs
        #[prost(bytes = "vec", repeated, tag = "2")]
        pub identity_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        /// Flag to request a proof as the response
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesTokenBalancesRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesTokenBalancesResponse {
    #[prost(oneof = "get_identities_token_balances_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_token_balances_response::Version>,
}
/// Nested message and enum types in `GetIdentitiesTokenBalancesResponse`.
pub mod get_identities_token_balances_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesTokenBalancesResponseV0 {
        /// Metadata about the blockchain state
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_identities_token_balances_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_identities_token_balances_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentitiesTokenBalancesResponseV0`.
    pub mod get_identities_token_balances_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IdentityTokenBalanceEntry {
            /// Identity ID
            #[prost(bytes = "vec", tag = "1")]
            pub identity_id: ::prost::alloc::vec::Vec<u8>,
            /// Token balance for the identity
            #[prost(uint64, optional, tag = "2")]
            pub balance: ::core::option::Option<u64>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IdentityTokenBalances {
            /// List of identity token balances
            #[prost(message, repeated, tag = "1")]
            pub identity_token_balances: ::prost::alloc::vec::Vec<IdentityTokenBalanceEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            /// Actual identity token balances
            #[prost(message, tag = "1")]
            IdentityTokenBalances(IdentityTokenBalances),
            /// Proof of the balances, if requested
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesTokenBalancesResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityTokenInfosRequest {
    #[prost(oneof = "get_identity_token_infos_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_token_infos_request::Version>,
}
/// Nested message and enum types in `GetIdentityTokenInfosRequest`.
pub mod get_identity_token_infos_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityTokenInfosRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub identity_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", repeated, tag = "2")]
        pub token_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityTokenInfosRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentityTokenInfosResponse {
    #[prost(oneof = "get_identity_token_infos_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identity_token_infos_response::Version>,
}
/// Nested message and enum types in `GetIdentityTokenInfosResponse`.
pub mod get_identity_token_infos_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentityTokenInfosResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_identity_token_infos_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_identity_token_infos_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentityTokenInfosResponseV0`.
    pub mod get_identity_token_infos_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct TokenIdentityInfoEntry {
            #[prost(bool, tag = "1")]
            pub frozen: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenInfoEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub token_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(message, optional, tag = "2")]
            pub info: ::core::option::Option<TokenIdentityInfoEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenInfos {
            #[prost(message, repeated, tag = "1")]
            pub token_infos: ::prost::alloc::vec::Vec<TokenInfoEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            TokenInfos(TokenInfos),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentityTokenInfosResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesTokenInfosRequest {
    #[prost(oneof = "get_identities_token_infos_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_token_infos_request::Version>,
}
/// Nested message and enum types in `GetIdentitiesTokenInfosRequest`.
pub mod get_identities_token_infos_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesTokenInfosRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub token_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bytes = "vec", repeated, tag = "2")]
        pub identity_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesTokenInfosRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentitiesTokenInfosResponse {
    #[prost(oneof = "get_identities_token_infos_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_identities_token_infos_response::Version>,
}
/// Nested message and enum types in `GetIdentitiesTokenInfosResponse`.
pub mod get_identities_token_infos_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetIdentitiesTokenInfosResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_identities_token_infos_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_identities_token_infos_response_v0::Result>,
    }
    /// Nested message and enum types in `GetIdentitiesTokenInfosResponseV0`.
    pub mod get_identities_token_infos_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct TokenIdentityInfoEntry {
            #[prost(bool, tag = "1")]
            pub frozen: bool,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenInfoEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub identity_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(message, optional, tag = "2")]
            pub info: ::core::option::Option<TokenIdentityInfoEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IdentityTokenInfos {
            #[prost(message, repeated, tag = "1")]
            pub token_infos: ::prost::alloc::vec::Vec<TokenInfoEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            IdentityTokenInfos(IdentityTokenInfos),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetIdentitiesTokenInfosResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenStatusesRequest {
    #[prost(oneof = "get_token_statuses_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_token_statuses_request::Version>,
}
/// Nested message and enum types in `GetTokenStatusesRequest`.
pub mod get_token_statuses_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenStatusesRequestV0 {
        #[prost(bytes = "vec", repeated, tag = "1")]
        pub token_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenStatusesRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenStatusesResponse {
    #[prost(oneof = "get_token_statuses_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_token_statuses_response::Version>,
}
/// Nested message and enum types in `GetTokenStatusesResponse`.
pub mod get_token_statuses_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenStatusesResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_token_statuses_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_token_statuses_response_v0::Result>,
    }
    /// Nested message and enum types in `GetTokenStatusesResponseV0`.
    pub mod get_token_statuses_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenStatusEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub token_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(bool, optional, tag = "2")]
            pub paused: ::core::option::Option<bool>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenStatuses {
            #[prost(message, repeated, tag = "1")]
            pub token_statuses: ::prost::alloc::vec::Vec<TokenStatusEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            TokenStatuses(TokenStatuses),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenStatusesResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenDirectPurchasePricesRequest {
    #[prost(
        oneof = "get_token_direct_purchase_prices_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_token_direct_purchase_prices_request::Version>,
}
/// Nested message and enum types in `GetTokenDirectPurchasePricesRequest`.
pub mod get_token_direct_purchase_prices_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenDirectPurchasePricesRequestV0 {
        #[prost(bytes = "vec", repeated, tag = "1")]
        pub token_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenDirectPurchasePricesRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenDirectPurchasePricesResponse {
    #[prost(
        oneof = "get_token_direct_purchase_prices_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_token_direct_purchase_prices_response::Version>,
}
/// Nested message and enum types in `GetTokenDirectPurchasePricesResponse`.
pub mod get_token_direct_purchase_prices_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenDirectPurchasePricesResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_token_direct_purchase_prices_response_v0::Result",
            tags = "1, 2"
        )]
        pub result: ::core::option::Option<get_token_direct_purchase_prices_response_v0::Result>,
    }
    /// Nested message and enum types in `GetTokenDirectPurchasePricesResponseV0`.
    pub mod get_token_direct_purchase_prices_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct PriceForQuantity {
            #[prost(uint64, tag = "1")]
            pub quantity: u64,
            #[prost(uint64, tag = "2")]
            pub price: u64,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct PricingSchedule {
            #[prost(message, repeated, tag = "1")]
            pub price_for_quantity: ::prost::alloc::vec::Vec<PriceForQuantity>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Price {
            #[prost(oneof = "price::Price", tags = "1, 2")]
            pub price: ::core::option::Option<price::Price>,
        }
        /// Nested message and enum types in `Price`.
        pub mod price {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum Price {
                #[prost(uint64, tag = "1")]
                FixedPrice(u64),
                #[prost(message, tag = "2")]
                VariablePrice(super::PricingSchedule),
            }
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenDirectPurchasePriceEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub token_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(message, optional, tag = "2")]
            pub price: ::core::option::Option<Price>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenDirectPurchasePrices {
            #[prost(message, repeated, tag = "1")]
            pub token_direct_purchase_price:
                ::prost::alloc::vec::Vec<TokenDirectPurchasePriceEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            TokenDirectPurchasePrices(TokenDirectPurchasePrices),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenDirectPurchasePricesResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenPreProgrammedDistributionsRequest {
    #[prost(
        oneof = "get_token_pre_programmed_distributions_request::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_token_pre_programmed_distributions_request::Version>,
}
/// Nested message and enum types in `GetTokenPreProgrammedDistributionsRequest`.
pub mod get_token_pre_programmed_distributions_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenPreProgrammedDistributionsRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub token_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "2")]
        pub start_at_info:
            ::core::option::Option<get_token_pre_programmed_distributions_request_v0::StartAtInfo>,
        #[prost(uint32, optional, tag = "3")]
        pub limit: ::core::option::Option<u32>,
        #[prost(bool, tag = "4")]
        pub prove: bool,
    }
    /// Nested message and enum types in `GetTokenPreProgrammedDistributionsRequestV0`.
    pub mod get_token_pre_programmed_distributions_request_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StartAtInfo {
            #[prost(uint64, tag = "1")]
            pub start_time_ms: u64,
            #[prost(bytes = "vec", optional, tag = "2")]
            pub start_recipient: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
            #[prost(bool, optional, tag = "3")]
            pub start_recipient_included: ::core::option::Option<bool>,
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenPreProgrammedDistributionsRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenPreProgrammedDistributionsResponse {
    #[prost(
        oneof = "get_token_pre_programmed_distributions_response::Version",
        tags = "1"
    )]
    pub version: ::core::option::Option<get_token_pre_programmed_distributions_response::Version>,
}
/// Nested message and enum types in `GetTokenPreProgrammedDistributionsResponse`.
pub mod get_token_pre_programmed_distributions_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenPreProgrammedDistributionsResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(
            oneof = "get_token_pre_programmed_distributions_response_v0::Result",
            tags = "1, 2"
        )]
        pub result:
            ::core::option::Option<get_token_pre_programmed_distributions_response_v0::Result>,
    }
    /// Nested message and enum types in `GetTokenPreProgrammedDistributionsResponseV0`.
    pub mod get_token_pre_programmed_distributions_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenDistributionEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub recipient_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint64, tag = "2")]
            pub amount: u64,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenTimedDistributionEntry {
            #[prost(uint64, tag = "1")]
            pub timestamp: u64,
            #[prost(message, repeated, tag = "2")]
            pub distributions: ::prost::alloc::vec::Vec<TokenDistributionEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenDistributions {
            #[prost(message, repeated, tag = "1")]
            pub token_distributions: ::prost::alloc::vec::Vec<TokenTimedDistributionEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            TokenDistributions(TokenDistributions),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenPreProgrammedDistributionsResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenTotalSupplyRequest {
    #[prost(oneof = "get_token_total_supply_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_token_total_supply_request::Version>,
}
/// Nested message and enum types in `GetTokenTotalSupplyRequest`.
pub mod get_token_total_supply_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenTotalSupplyRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub token_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "2")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenTotalSupplyRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenTotalSupplyResponse {
    #[prost(oneof = "get_token_total_supply_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_token_total_supply_response::Version>,
}
/// Nested message and enum types in `GetTokenTotalSupplyResponse`.
pub mod get_token_total_supply_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetTokenTotalSupplyResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_token_total_supply_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_token_total_supply_response_v0::Result>,
    }
    /// Nested message and enum types in `GetTokenTotalSupplyResponseV0`.
    pub mod get_token_total_supply_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenTotalSupplyEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub token_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint64, tag = "2")]
            pub total_aggregated_amount_in_user_accounts: u64,
            #[prost(uint64, tag = "3")]
            pub total_system_amount: u64,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            TokenTotalSupply(TokenTotalSupplyEntry),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetTokenTotalSupplyResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupInfoRequest {
    #[prost(oneof = "get_group_info_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_info_request::Version>,
}
/// Nested message and enum types in `GetGroupInfoRequest`.
pub mod get_group_info_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupInfoRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint32, tag = "2")]
        pub group_contract_position: u32,
        #[prost(bool, tag = "3")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupInfoRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupInfoResponse {
    #[prost(oneof = "get_group_info_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_info_response::Version>,
}
/// Nested message and enum types in `GetGroupInfoResponse`.
pub mod get_group_info_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupInfoResponseV0 {
        #[prost(message, optional, tag = "4")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_group_info_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_group_info_response_v0::Result>,
    }
    /// Nested message and enum types in `GetGroupInfoResponseV0`.
    pub mod get_group_info_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupMemberEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub member_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint32, tag = "2")]
            pub power: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupInfoEntry {
            #[prost(message, repeated, tag = "1")]
            pub members: ::prost::alloc::vec::Vec<GroupMemberEntry>,
            #[prost(uint32, tag = "2")]
            pub group_required_power: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupInfo {
            #[prost(message, optional, tag = "1")]
            pub group_info: ::core::option::Option<GroupInfoEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            GroupInfo(GroupInfo),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupInfoResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupInfosRequest {
    #[prost(oneof = "get_group_infos_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_infos_request::Version>,
}
/// Nested message and enum types in `GetGroupInfosRequest`.
pub mod get_group_infos_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct StartAtGroupContractPosition {
        #[prost(uint32, tag = "1")]
        pub start_group_contract_position: u32,
        #[prost(bool, tag = "2")]
        pub start_group_contract_position_included: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupInfosRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "2")]
        pub start_at_group_contract_position: ::core::option::Option<StartAtGroupContractPosition>,
        #[prost(uint32, optional, tag = "3")]
        pub count: ::core::option::Option<u32>,
        #[prost(bool, tag = "4")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupInfosRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupInfosResponse {
    #[prost(oneof = "get_group_infos_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_infos_response::Version>,
}
/// Nested message and enum types in `GetGroupInfosResponse`.
pub mod get_group_infos_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupInfosResponseV0 {
        #[prost(message, optional, tag = "4")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_group_infos_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_group_infos_response_v0::Result>,
    }
    /// Nested message and enum types in `GetGroupInfosResponseV0`.
    pub mod get_group_infos_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupMemberEntry {
            #[prost(bytes = "vec", tag = "1")]
            pub member_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint32, tag = "2")]
            pub power: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupPositionInfoEntry {
            #[prost(uint32, tag = "1")]
            pub group_contract_position: u32,
            #[prost(message, repeated, tag = "2")]
            pub members: ::prost::alloc::vec::Vec<GroupMemberEntry>,
            #[prost(uint32, tag = "3")]
            pub group_required_power: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupInfos {
            #[prost(message, repeated, tag = "1")]
            pub group_infos: ::prost::alloc::vec::Vec<GroupPositionInfoEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            GroupInfos(GroupInfos),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupInfosResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupActionsRequest {
    #[prost(oneof = "get_group_actions_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_actions_request::Version>,
}
/// Nested message and enum types in `GetGroupActionsRequest`.
pub mod get_group_actions_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct StartAtActionId {
        #[prost(bytes = "vec", tag = "1")]
        pub start_action_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "2")]
        pub start_action_id_included: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupActionsRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint32, tag = "2")]
        pub group_contract_position: u32,
        #[prost(enumeration = "ActionStatus", tag = "3")]
        pub status: i32,
        #[prost(message, optional, tag = "4")]
        pub start_at_action_id: ::core::option::Option<StartAtActionId>,
        #[prost(uint32, optional, tag = "5")]
        pub count: ::core::option::Option<u32>,
        #[prost(bool, tag = "6")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum ActionStatus {
        /// Request the active actions
        Active = 0,
        /// Request the closed actions
        Closed = 1,
    }
    impl ActionStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ActionStatus::Active => "ACTIVE",
                ActionStatus::Closed => "CLOSED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ACTIVE" => Some(Self::Active),
                "CLOSED" => Some(Self::Closed),
                _ => None,
            }
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupActionsRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupActionsResponse {
    #[prost(oneof = "get_group_actions_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_actions_response::Version>,
}
/// Nested message and enum types in `GetGroupActionsResponse`.
pub mod get_group_actions_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupActionsResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_group_actions_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_group_actions_response_v0::Result>,
    }
    /// Nested message and enum types in `GetGroupActionsResponseV0`.
    pub mod get_group_actions_response_v0 {
        /// Mint event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct MintEvent {
            /// Amount to mint
            #[prost(uint64, tag = "1")]
            pub amount: u64,
            /// Recipient identifier
            #[prost(bytes = "vec", tag = "2")]
            pub recipient_id: ::prost::alloc::vec::Vec<u8>,
            /// Public note
            #[prost(string, optional, tag = "3")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
        }
        /// Burn event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct BurnEvent {
            /// Amount to burn
            #[prost(uint64, tag = "1")]
            pub amount: u64,
            /// Public note
            #[prost(string, optional, tag = "2")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
        }
        /// Freeze event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct FreezeEvent {
            /// Identifier of the frozen entity
            #[prost(bytes = "vec", tag = "1")]
            pub frozen_id: ::prost::alloc::vec::Vec<u8>,
            /// Public note
            #[prost(string, optional, tag = "2")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
        }
        /// Unfreeze event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct UnfreezeEvent {
            /// Identifier of the unfrozen entity
            #[prost(bytes = "vec", tag = "1")]
            pub frozen_id: ::prost::alloc::vec::Vec<u8>,
            /// Public note
            #[prost(string, optional, tag = "2")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
        }
        /// Destroy frozen funds event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct DestroyFrozenFundsEvent {
            /// Identifier of the frozen entity
            #[prost(bytes = "vec", tag = "1")]
            pub frozen_id: ::prost::alloc::vec::Vec<u8>,
            /// Amount to destroy
            #[prost(uint64, tag = "2")]
            pub amount: u64,
            /// Public note
            #[prost(string, optional, tag = "3")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
        }
        /// Shared encrypted note
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct SharedEncryptedNote {
            /// Sender key index
            #[prost(uint32, tag = "1")]
            pub sender_key_index: u32,
            /// Recipient key index
            #[prost(uint32, tag = "2")]
            pub recipient_key_index: u32,
            /// Encrypted data
            #[prost(bytes = "vec", tag = "3")]
            pub encrypted_data: ::prost::alloc::vec::Vec<u8>,
        }
        /// Personal encrypted note
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct PersonalEncryptedNote {
            /// Root encryption key index
            #[prost(uint32, tag = "1")]
            pub root_encryption_key_index: u32,
            /// Derivation encryption key index
            #[prost(uint32, tag = "2")]
            pub derivation_encryption_key_index: u32,
            /// Encrypted data
            #[prost(bytes = "vec", tag = "3")]
            pub encrypted_data: ::prost::alloc::vec::Vec<u8>,
        }
        /// Emergency action event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EmergencyActionEvent {
            /// Emergency action type
            #[prost(enumeration = "emergency_action_event::ActionType", tag = "1")]
            pub action_type: i32,
            /// Public note
            #[prost(string, optional, tag = "2")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
        }
        /// Nested message and enum types in `EmergencyActionEvent`.
        pub mod emergency_action_event {
            /// Enum for emergency action types
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[derive(
                Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration,
            )]
            #[repr(i32)]
            pub enum ActionType {
                /// Pause action
                Pause = 0,
                /// Resume action
                Resume = 1,
            }
            impl ActionType {
                /// String value of the enum field names used in the ProtoBuf definition.
                ///
                /// The values are not transformed in any way and thus are considered stable
                /// (if the ProtoBuf definition does not change) and safe for programmatic use.
                pub fn as_str_name(&self) -> &'static str {
                    match self {
                        ActionType::Pause => "PAUSE",
                        ActionType::Resume => "RESUME",
                    }
                }
                /// Creates an enum from field names used in the ProtoBuf definition.
                pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                    match value {
                        "PAUSE" => Some(Self::Pause),
                        "RESUME" => Some(Self::Resume),
                        _ => None,
                    }
                }
            }
        }
        /// Token config update event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenConfigUpdateEvent {
            /// Token config update item
            #[prost(bytes = "vec", tag = "1")]
            pub token_config_update_item: ::prost::alloc::vec::Vec<u8>,
            /// Public note
            #[prost(string, optional, tag = "2")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
        }
        /// UpdatePrice event
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct UpdateDirectPurchasePriceEvent {
            /// Public note
            #[prost(string, optional, tag = "3")]
            pub public_note: ::core::option::Option<::prost::alloc::string::String>,
            #[prost(oneof = "update_direct_purchase_price_event::Price", tags = "1, 2")]
            pub price: ::core::option::Option<update_direct_purchase_price_event::Price>,
        }
        /// Nested message and enum types in `UpdateDirectPurchasePriceEvent`.
        pub mod update_direct_purchase_price_event {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[derive(::dapi_grpc_macros::Mockable)]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, Copy, PartialEq, ::prost::Message)]
            pub struct PriceForQuantity {
                #[prost(uint64, tag = "1")]
                pub quantity: u64,
                #[prost(uint64, tag = "2")]
                pub price: u64,
            }
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[derive(::dapi_grpc_macros::Mockable)]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct PricingSchedule {
                #[prost(message, repeated, tag = "1")]
                pub price_for_quantity: ::prost::alloc::vec::Vec<PriceForQuantity>,
            }
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum Price {
                #[prost(uint64, tag = "1")]
                FixedPrice(u64),
                #[prost(message, tag = "2")]
                VariablePrice(PricingSchedule),
            }
        }
        /// Event associated with this action
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupActionEvent {
            #[prost(oneof = "group_action_event::EventType", tags = "1, 2, 3")]
            pub event_type: ::core::option::Option<group_action_event::EventType>,
        }
        /// Nested message and enum types in `GroupActionEvent`.
        pub mod group_action_event {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum EventType {
                /// Token event details
                #[prost(message, tag = "1")]
                TokenEvent(super::TokenEvent),
                #[prost(message, tag = "2")]
                DocumentEvent(super::DocumentEvent),
                #[prost(message, tag = "3")]
                ContractEvent(super::ContractEvent),
            }
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct DocumentEvent {
            #[prost(oneof = "document_event::Type", tags = "1")]
            pub r#type: ::core::option::Option<document_event::Type>,
        }
        /// Nested message and enum types in `DocumentEvent`.
        pub mod document_event {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum Type {
                /// Create event details
                #[prost(message, tag = "1")]
                Create(super::DocumentCreateEvent),
            }
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct DocumentCreateEvent {
            #[prost(bytes = "vec", tag = "1")]
            pub created_document: ::prost::alloc::vec::Vec<u8>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContractUpdateEvent {
            #[prost(bytes = "vec", tag = "1")]
            pub updated_contract: ::prost::alloc::vec::Vec<u8>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContractEvent {
            #[prost(oneof = "contract_event::Type", tags = "1")]
            pub r#type: ::core::option::Option<contract_event::Type>,
        }
        /// Nested message and enum types in `ContractEvent`.
        pub mod contract_event {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum Type {
                /// Contract update event
                #[prost(message, tag = "1")]
                Update(super::ContractUpdateEvent),
            }
        }
        /// Details for token events
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct TokenEvent {
            #[prost(oneof = "token_event::Type", tags = "1, 2, 3, 4, 5, 6, 7, 8")]
            pub r#type: ::core::option::Option<token_event::Type>,
        }
        /// Nested message and enum types in `TokenEvent`.
        pub mod token_event {
            #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
            #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
            #[allow(clippy::derive_partial_eq_without_eq)]
            #[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum Type {
                /// Mint event details
                #[prost(message, tag = "1")]
                Mint(super::MintEvent),
                /// Burn event details
                #[prost(message, tag = "2")]
                Burn(super::BurnEvent),
                /// Freeze event details
                #[prost(message, tag = "3")]
                Freeze(super::FreezeEvent),
                /// Unfreeze event details
                #[prost(message, tag = "4")]
                Unfreeze(super::UnfreezeEvent),
                /// Destroy frozen funds
                #[prost(message, tag = "5")]
                DestroyFrozenFunds(super::DestroyFrozenFundsEvent),
                /// Emergency action details
                #[prost(message, tag = "6")]
                EmergencyAction(super::EmergencyActionEvent),
                /// Token configuration update details
                #[prost(message, tag = "7")]
                TokenConfigUpdate(super::TokenConfigUpdateEvent),
                /// Updating the token direct selling price
                #[prost(message, tag = "8")]
                UpdatePrice(super::UpdateDirectPurchasePriceEvent),
            }
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupActionEntry {
            /// Unique identifier for the action
            #[prost(bytes = "vec", tag = "1")]
            pub action_id: ::prost::alloc::vec::Vec<u8>,
            /// The event data
            #[prost(message, optional, tag = "2")]
            pub event: ::core::option::Option<GroupActionEvent>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupActions {
            #[prost(message, repeated, tag = "1")]
            pub group_actions: ::prost::alloc::vec::Vec<GroupActionEntry>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            GroupActions(GroupActions),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupActionsResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupActionSignersRequest {
    #[prost(oneof = "get_group_action_signers_request::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_action_signers_request::Version>,
}
/// Nested message and enum types in `GetGroupActionSignersRequest`.
pub mod get_group_action_signers_request {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupActionSignersRequestV0 {
        #[prost(bytes = "vec", tag = "1")]
        pub contract_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(uint32, tag = "2")]
        pub group_contract_position: u32,
        #[prost(enumeration = "ActionStatus", tag = "3")]
        pub status: i32,
        #[prost(bytes = "vec", tag = "4")]
        pub action_id: ::prost::alloc::vec::Vec<u8>,
        #[prost(bool, tag = "5")]
        pub prove: bool,
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum ActionStatus {
        /// Request the active actions
        Active = 0,
        /// Request the closed actions
        Closed = 1,
    }
    impl ActionStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ActionStatus::Active => "ACTIVE",
                ActionStatus::Closed => "CLOSED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ACTIVE" => Some(Self::Active),
                "CLOSED" => Some(Self::Closed),
                _ => None,
            }
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupActionSignersRequestV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(::dapi_grpc_macros::Mockable)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupActionSignersResponse {
    #[prost(oneof = "get_group_action_signers_response::Version", tags = "1")]
    pub version: ::core::option::Option<get_group_action_signers_response::Version>,
}
/// Nested message and enum types in `GetGroupActionSignersResponse`.
pub mod get_group_action_signers_response {
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[derive(::dapi_grpc_macros::Mockable)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GetGroupActionSignersResponseV0 {
        #[prost(message, optional, tag = "3")]
        pub metadata: ::core::option::Option<super::ResponseMetadata>,
        #[prost(oneof = "get_group_action_signers_response_v0::Result", tags = "1, 2")]
        pub result: ::core::option::Option<get_group_action_signers_response_v0::Result>,
    }
    /// Nested message and enum types in `GetGroupActionSignersResponseV0`.
    pub mod get_group_action_signers_response_v0 {
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupActionSigner {
            #[prost(bytes = "vec", tag = "1")]
            pub signer_id: ::prost::alloc::vec::Vec<u8>,
            #[prost(uint32, tag = "2")]
            pub power: u32,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[derive(::dapi_grpc_macros::Mockable)]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GroupActionSigners {
            #[prost(message, repeated, tag = "1")]
            pub signers: ::prost::alloc::vec::Vec<GroupActionSigner>,
        }
        #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
        #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Result {
            #[prost(message, tag = "1")]
            GroupActionSigners(GroupActionSigners),
            #[prost(message, tag = "2")]
            Proof(super::super::Proof),
        }
    }
    #[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
    #[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        V0(GetGroupActionSignersResponseV0),
    }
}
#[cfg_attr(feature = "serde", derive(::serde::Serialize, ::serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(rename_all = "snake_case"))]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum KeyPurpose {
    Authentication = 0,
    Encryption = 1,
    Decryption = 2,
    Transfer = 3,
    Voting = 5,
}
impl KeyPurpose {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            KeyPurpose::Authentication => "AUTHENTICATION",
            KeyPurpose::Encryption => "ENCRYPTION",
            KeyPurpose::Decryption => "DECRYPTION",
            KeyPurpose::Transfer => "TRANSFER",
            KeyPurpose::Voting => "VOTING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHENTICATION" => Some(Self::Authentication),
            "ENCRYPTION" => Some(Self::Encryption),
            "DECRYPTION" => Some(Self::Decryption),
            "TRANSFER" => Some(Self::Transfer),
            "VOTING" => Some(Self::Voting),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod platform_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct PlatformClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PlatformClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PlatformClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PlatformClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            PlatformClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn broadcast_state_transition(
            &mut self,
            request: impl tonic::IntoRequest<super::BroadcastStateTransitionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BroadcastStateTransitionResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/broadcastStateTransition",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "broadcastStateTransition",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityRequest>,
        ) -> std::result::Result<tonic::Response<super::GetIdentityResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentity",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentity",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityKeysRequest>,
        ) -> std::result::Result<tonic::Response<super::GetIdentityKeysResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityKeys",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identities_contract_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentitiesContractKeysRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentitiesContractKeysResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentitiesContractKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentitiesContractKeys",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_nonce(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityNonceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetIdentityNonceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityNonce",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityNonce",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_contract_nonce(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityContractNonceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityContractNonceResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityContractNonce",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityContractNonce",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_balance(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityBalanceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetIdentityBalanceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityBalance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityBalance",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identities_balances(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentitiesBalancesRequest>,
        ) -> std::result::Result<tonic::Response<super::GetIdentitiesBalancesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentitiesBalances",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentitiesBalances",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_balance_and_revision(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityBalanceAndRevisionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityBalanceAndRevisionResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityBalanceAndRevision",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityBalanceAndRevision",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_evonodes_proposed_epoch_blocks_by_ids(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEvonodesProposedEpochBlocksByIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEvonodesProposedEpochBlocksResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getEvonodesProposedEpochBlocksByIds",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getEvonodesProposedEpochBlocksByIds",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_evonodes_proposed_epoch_blocks_by_range(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEvonodesProposedEpochBlocksByRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEvonodesProposedEpochBlocksResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getEvonodesProposedEpochBlocksByRange",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getEvonodesProposedEpochBlocksByRange",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_data_contract(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDataContractRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDataContractResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getDataContract",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getDataContract",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_data_contract_history(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDataContractHistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDataContractHistoryResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getDataContractHistory",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getDataContractHistory",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_data_contracts(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDataContractsRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDataContractsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getDataContracts",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getDataContracts",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_documents(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDocumentsRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDocumentsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getDocuments",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getDocuments",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_by_public_key_hash(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityByPublicKeyHashRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityByPublicKeyHashResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityByPublicKeyHash",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityByPublicKeyHash",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn wait_for_state_transition_result(
            &mut self,
            request: impl tonic::IntoRequest<super::WaitForStateTransitionResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WaitForStateTransitionResultResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/waitForStateTransitionResult",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "waitForStateTransitionResult",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_consensus_params(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConsensusParamsRequest>,
        ) -> std::result::Result<tonic::Response<super::GetConsensusParamsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getConsensusParams",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getConsensusParams",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_protocol_version_upgrade_state(
            &mut self,
            request: impl tonic::IntoRequest<super::GetProtocolVersionUpgradeStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetProtocolVersionUpgradeStateResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getProtocolVersionUpgradeState",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getProtocolVersionUpgradeState",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_protocol_version_upgrade_vote_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetProtocolVersionUpgradeVoteStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetProtocolVersionUpgradeVoteStatusResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getProtocolVersionUpgradeVoteStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getProtocolVersionUpgradeVoteStatus",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_epochs_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEpochsInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::GetEpochsInfoResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getEpochsInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getEpochsInfo",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// What votes are currently happening for a specific contested index
        pub async fn get_contested_resources(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContestedResourcesRequest>,
        ) -> std::result::Result<tonic::Response<super::GetContestedResourcesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getContestedResources",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getContestedResources",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// What's the state of a contested resource vote? (ie who is winning?)
        pub async fn get_contested_resource_vote_state(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContestedResourceVoteStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContestedResourceVoteStateResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getContestedResourceVoteState",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getContestedResourceVoteState",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Who voted for a contested resource to go to a specific identity?
        pub async fn get_contested_resource_voters_for_identity(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContestedResourceVotersForIdentityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContestedResourceVotersForIdentityResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getContestedResourceVotersForIdentity",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getContestedResourceVotersForIdentity",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// How did an identity vote?
        pub async fn get_contested_resource_identity_votes(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContestedResourceIdentityVotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContestedResourceIdentityVotesResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getContestedResourceIdentityVotes",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getContestedResourceIdentityVotes",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// What vote polls will end soon?
        pub async fn get_vote_polls_by_end_date(
            &mut self,
            request: impl tonic::IntoRequest<super::GetVotePollsByEndDateRequest>,
        ) -> std::result::Result<tonic::Response<super::GetVotePollsByEndDateResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getVotePollsByEndDate",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getVotePollsByEndDate",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_prefunded_specialized_balance(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPrefundedSpecializedBalanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPrefundedSpecializedBalanceResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getPrefundedSpecializedBalance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getPrefundedSpecializedBalance",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_total_credits_in_platform(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTotalCreditsInPlatformRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTotalCreditsInPlatformResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getTotalCreditsInPlatform",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getTotalCreditsInPlatform",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_path_elements(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPathElementsRequest>,
        ) -> std::result::Result<tonic::Response<super::GetPathElementsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getPathElements",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getPathElements",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetStatusRequest>,
        ) -> std::result::Result<tonic::Response<super::GetStatusResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getStatus",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_current_quorums_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCurrentQuorumsInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::GetCurrentQuorumsInfoResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getCurrentQuorumsInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getCurrentQuorumsInfo",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_token_balances(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityTokenBalancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentityTokenBalancesResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityTokenBalances",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityTokenBalances",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identities_token_balances(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentitiesTokenBalancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentitiesTokenBalancesResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentitiesTokenBalances",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentitiesTokenBalances",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identity_token_infos(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentityTokenInfosRequest>,
        ) -> std::result::Result<tonic::Response<super::GetIdentityTokenInfosResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentityTokenInfos",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentityTokenInfos",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_identities_token_infos(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentitiesTokenInfosRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentitiesTokenInfosResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getIdentitiesTokenInfos",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getIdentitiesTokenInfos",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_token_statuses(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTokenStatusesRequest>,
        ) -> std::result::Result<tonic::Response<super::GetTokenStatusesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getTokenStatuses",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getTokenStatuses",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_token_direct_purchase_prices(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTokenDirectPurchasePricesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTokenDirectPurchasePricesResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getTokenDirectPurchasePrices",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getTokenDirectPurchasePrices",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_token_pre_programmed_distributions(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTokenPreProgrammedDistributionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTokenPreProgrammedDistributionsResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getTokenPreProgrammedDistributions",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getTokenPreProgrammedDistributions",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_token_total_supply(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTokenTotalSupplyRequest>,
        ) -> std::result::Result<tonic::Response<super::GetTokenTotalSupplyResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getTokenTotalSupply",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getTokenTotalSupply",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_group_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::GetGroupInfoResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getGroupInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getGroupInfo",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_group_infos(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupInfosRequest>,
        ) -> std::result::Result<tonic::Response<super::GetGroupInfosResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getGroupInfos",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getGroupInfos",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_group_actions(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupActionsRequest>,
        ) -> std::result::Result<tonic::Response<super::GetGroupActionsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getGroupActions",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getGroupActions",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_group_action_signers(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupActionSignersRequest>,
        ) -> std::result::Result<tonic::Response<super::GetGroupActionSignersResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/org.dash.platform.dapi.v0.Platform/getGroupActionSigners",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "org.dash.platform.dapi.v0.Platform",
                "getGroupActionSigners",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
