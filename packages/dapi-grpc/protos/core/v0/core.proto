syntax = "proto3";

package org.dash.platform.dapi.v0;

service Core {
  rpc getBlockchainStatus (GetBlockchainStatusRequest) returns (GetBlockchainStatusResponse);
  rpc getMasternodeStatus (GetMasternodeStatusRequest) returns (GetMasternodeStatusResponse);
  rpc getBlock (GetBlockRequest) returns (GetBlockResponse);
  rpc getBestBlockHeight (GetBestBlockHeightRequest) returns (GetBestBlockHeightResponse);
  rpc broadcastTransaction (BroadcastTransactionRequest) returns (BroadcastTransactionResponse);
  rpc getTransaction (GetTransactionRequest) returns (GetTransactionResponse);
  rpc getEstimatedTransactionFee (GetEstimatedTransactionFeeRequest) returns (GetEstimatedTransactionFeeResponse);
  rpc subscribeToBlockHeadersWithChainLocks (BlockHeadersWithChainLocksRequest) returns (stream BlockHeadersWithChainLocksResponse);
  rpc subscribeToTransactionsWithProofs (TransactionsWithProofsRequest) returns (stream TransactionsWithProofsResponse);
  rpc subscribeToMasternodeList (MasternodeListRequest) returns (stream MasternodeListResponse);
}

message GetBlockchainStatusRequest {

}

message GetBlockchainStatusResponse {
  message Version {
    uint32 protocol = 1;
    uint32 software = 2;
    string agent = 3;
  }

  message Time {
    uint32 now = 1;
    int32 offset = 2;
    uint32 median = 3;
  }

  enum Status {
    NOT_STARTED = 0;
    SYNCING = 1;
    READY = 2;
    ERROR = 3;
  }

  message Chain {
    string name = 1;
    uint32 headers_count = 2;
    uint32 blocks_count = 3;
    bytes best_block_hash = 4;
    double difficulty = 5;
    bytes chain_work = 6;
    bool is_synced = 7;
    double sync_progress = 8;
  }

  message NetworkFee {
    double relay = 1;
    double incremental = 2;
  }

  message Network {
    uint32 peers_count = 1;
    NetworkFee fee = 2;
  }

  Version version = 1;
  Time time = 2;
  Status status = 3;
  double sync_progress = 4;
  Chain chain = 5;
  Network network = 7;
}

message GetMasternodeStatusRequest {

}

message GetMasternodeStatusResponse {
  enum Status {
    UNKNOWN = 0;
    WAITING_FOR_PROTX = 1;
    POSE_BANNED = 2;
    REMOVED = 3;
    OPERATOR_KEY_CHANGED = 4;
    PROTX_IP_CHANGED = 5;
    READY = 6;
    ERROR = 7;
  }

  Status status = 1;
  bytes pro_tx_hash = 2;
  uint32 pose_penalty = 3;
  bool is_synced = 4;
  double sync_progress = 5;
}

message GetBlockRequest {
  oneof block {
    uint32 height = 1;
    string hash = 2;
  }
}

message GetBlockResponse {
  bytes block = 1;
}

message GetBestBlockHeightRequest {

}

message GetBestBlockHeightResponse {
  uint32 height = 1;
}

message BroadcastTransactionRequest {
  bytes transaction = 1;
  bool allow_high_fees = 2;
  bool bypass_limits = 3;
}

message BroadcastTransactionResponse {
  string transaction_id = 1;
}

message GetTransactionRequest {
  string id = 1;
}

message GetTransactionResponse {
  bytes transaction = 1;
  bytes block_hash = 2;
  uint32 height = 3;
  uint32 confirmations = 4;
  bool is_instant_locked = 5;
  bool is_chain_locked = 6;
}

message BlockHeadersWithChainLocksRequest {
  oneof from_block {
    bytes from_block_hash = 1;
    uint32 from_block_height = 2;
  }

  uint32 count = 3;
}

message BlockHeadersWithChainLocksResponse {
  oneof responses {
    BlockHeaders block_headers = 1;
    bytes chain_lock = 2;
  }
}

message BlockHeaders {
  repeated bytes headers = 1;
}

message GetEstimatedTransactionFeeRequest {
  uint32 blocks = 1;
}

message GetEstimatedTransactionFeeResponse {
  double fee = 1;
}

message TransactionsWithProofsRequest {
  BloomFilter bloom_filter = 1;

  oneof from_block {
    bytes from_block_hash = 2;
    uint32 from_block_height = 3;
  }

  uint32 count = 4;

  bool send_transaction_hashes = 5;
}

message BloomFilter {
  bytes v_data = 1;
  uint32 n_hash_funcs = 2;
  uint32 n_tweak = 3;
  uint32 n_flags = 4;
}

message TransactionsWithProofsResponse {
  oneof responses {
    RawTransactions raw_transactions = 1;
    InstantSendLockMessages instant_send_lock_messages = 2;
    bytes raw_merkle_block = 3;
  }
}

message RawTransactions {
  repeated bytes transactions = 1;
}

message InstantSendLockMessages {
  repeated bytes messages = 1;
}

message MasternodeListRequest {

}

message MasternodeListResponse {
  bytes masternode_list_diff = 1;
}
