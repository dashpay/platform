syntax = "proto3";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

package org.dash.platform.dapi.v0;

import "google/protobuf/timestamp.proto";

service Platform {
  rpc broadcastStateTransition(BroadcastStateTransitionRequest)
      returns (BroadcastStateTransitionResponse);
  rpc getIdentity(GetIdentityRequest) returns (GetIdentityResponse);
  rpc getIdentities(GetIdentitiesRequest) returns (GetIdentitiesResponse);
  rpc getIdentityKeys(GetIdentityKeysRequest) returns (GetIdentityKeysResponse);
  rpc getIdentityBalance(GetIdentityBalanceRequest)
      returns (GetIdentityBalanceResponse);
  rpc getIdentityBalanceAndRevision(GetIdentityBalanceAndRevisionRequest)
      returns (GetIdentityBalanceAndRevisionResponse);
  rpc getProofs(GetProofsRequest) returns (GetProofsResponse);
  rpc getDataContract(GetDataContractRequest) returns (GetDataContractResponse);
  rpc getDataContractHistory(GetDataContractHistoryRequest)
      returns (GetDataContractHistoryResponse);
  rpc getDataContracts(GetDataContractsRequest)
      returns (GetDataContractsResponse);
  rpc getDocuments(GetDocumentsRequest) returns (GetDocumentsResponse);
  rpc getIdentitiesByPublicKeyHashes(GetIdentitiesByPublicKeyHashesRequest)
      returns (GetIdentitiesByPublicKeyHashesResponse);
  rpc getIdentityByPublicKeyHash(GetIdentityByPublicKeyHashRequest)
      returns (GetIdentityByPublicKeyHashResponse);
  rpc waitForStateTransitionResult(WaitForStateTransitionResultRequest)
      returns (WaitForStateTransitionResultResponse);
  rpc getConsensusParams(GetConsensusParamsRequest)
      returns (GetConsensusParamsResponse);
  rpc getProtocolVersionUpgradeState(GetProtocolVersionUpgradeStateRequest) returns (GetProtocolVersionUpgradeStateResponse);
  rpc getProtocolVersionUpgradeVoteStatus(GetProtocolVersionUpgradeVoteStatusRequest) returns (GetProtocolVersionUpgradeVoteStatusResponse);
  rpc getEpochsInfo(GetEpochsInfoRequest) returns (GetEpochsInfoResponse);
}

// Proof message includes cryptographic proofs for validating responses
message Proof {
  bytes grovedb_proof = 1;  // GroveDB proof for the data
  bytes quorum_hash = 2;    // Hash of the quorum validating the data
  bytes signature = 3;      // Signature proving data authenticity
  uint32 round = 4;         // Consensus round number
  bytes block_id_hash = 5;  // Hash of the block ID
  uint32 quorum_type = 6;   // Type of the quorum
}

// ResponseMetadata provides metadata about the blockchain state at the time of response
message ResponseMetadata {
  uint64 height = 1;                    // Current blockchain height
  uint32 core_chain_locked_height = 2;  // Height of the core ChainLock
  uint32 epoch = 3;                     // Current epoch number
  uint64 time_ms = 4;                   // Timestamp in milliseconds
  uint32 protocol_version = 5;          // Protocol version
  string chain_id = 6;                  // Identifier of the blockchain
}

message StateTransitionBroadcastError {
  uint32 code = 1;
  string message = 2;
  bytes data = 3;
}

message BroadcastStateTransitionRequest { bytes state_transition = 1; }

message BroadcastStateTransitionResponse {}

message GetIdentityRequest {

  message GetIdentityRequestV0 {
    bytes id = 1;    // The ID of the identity being requested
    bool prove = 2;  // Flag to request a proof as the response
  }

  oneof version { GetIdentityRequestV0 v0 = 1; }
}

message GetIdentityBalanceRequest {

  message GetIdentityBalanceRequestV0 {
    bytes id = 1;    // ID of the identity whose balance is requested
    bool prove = 2;  // Flag to request a proof as the response
  }

  oneof version { GetIdentityBalanceRequestV0 v0 = 1; }
}

message GetIdentityBalanceAndRevisionRequest {

  message GetIdentityBalanceAndRevisionRequestV0 {
    bytes id = 1;    // ID of the identity for balance and revision
    bool prove = 2;  // Flag to request a proof as the response
  }

  oneof version { GetIdentityBalanceAndRevisionRequestV0 v0 = 1; }
}

message GetIdentityResponse {

  message GetIdentityResponseV0 {
    oneof result {
      bytes identity = 1;  // The requested identity data
      Proof proof = 2;     // Proof of the identity data, if requested
    }
    ResponseMetadata metadata = 3;  // Metadata about the blockchain state
  }

  oneof version { GetIdentityResponseV0 v0 = 1; }
}

message GetIdentitiesRequest {

  message GetIdentitiesRequestV0 {
    repeated bytes ids = 1;  // List of identity IDs to retrieve
    bool prove = 2;          // Flag to request a proof as the response
  }

  oneof version { GetIdentitiesRequestV0 v0 = 1; }
}

message GetIdentitiesResponse {

  message IdentityValue { bytes value = 1; }  // Represents a single identity's value

  message IdentityEntry {
    bytes key = 1;           // The key associated with the identity
    IdentityValue value = 2; // The value of the identity
  }

  message Identities { repeated IdentityEntry identity_entries = 1; }  // Collection of identity entries

  message GetIdentitiesResponseV0 {
    oneof result {
      Identities identities = 1;  // The actual identities retrieved
      Proof proof = 2;            // Proof of the identities, if requested
    }
    ResponseMetadata metadata = 3;  // Metadata about the blockchain state
  }
  oneof version { GetIdentitiesResponseV0 v0 = 1; }
}

message GetIdentityBalanceResponse {

  message GetIdentityBalanceResponseV0 {
    oneof result {
      uint64 balance = 1;  // The balance of the requested identity
      Proof proof = 2;     // Proof of the balance, if requested
    }
    ResponseMetadata metadata = 3;  // Metadata about the blockchain state
  }

  oneof version { GetIdentityBalanceResponseV0 v0 = 1; }
}

message GetIdentityBalanceAndRevisionResponse {

  message GetIdentityBalanceAndRevisionResponseV0 {
    message BalanceAndRevision {
      uint64 balance = 1;   // Balance of the identity
      uint64 revision = 2;  // Revision number of the identity
    }

    oneof result {
      BalanceAndRevision balance_and_revision = 1;  // The balance and revision data
      Proof proof = 2;                              // Proof of the data, if requested
    }
    ResponseMetadata metadata = 3;  // Metadata about the blockchain state
  }

  oneof version { GetIdentityBalanceAndRevisionResponseV0 v0 = 1; }
}

message KeyRequestType {
  oneof request {
    AllKeys all_keys = 1;              // Request for all keys
    SpecificKeys specific_keys = 2;    // Request for specific keys by their IDs
    SearchKey search_key = 3;          // Request for keys based on a search criteria
  }
}

// AllKeys is an empty message used to signify a request for all keys
message AllKeys {}

// SpecificKeys is used to request specific keys by their IDs
message SpecificKeys {
  repeated uint32 key_ids = 1;  // List of key IDs
}

// SearchKey represents a request to search for keys based on specific criteria
message SearchKey {
  map<uint32, SecurityLevelMap> purpose_map = 1;  // Map of purposes to their security level maps
}

// SecurityLevelMap maps security levels to a request type for key retrieval
message SecurityLevelMap {
  enum KeyKindRequestType {
    CURRENT_KEY_OF_KIND_REQUEST = 0;  // Request the current key of a particular kind
    ALL_KEYS_OF_KIND_REQUEST = 1;     // Request all keys of a particular kind
  }
  map<uint32, KeyKindRequestType> security_level_map = 1;  // Maps security levels to key request types
}

message GetIdentityKeysRequest {

  message GetIdentityKeysRequestV0 {
    bytes identity_id = 1;                   // ID of the identity for key retrieval
    KeyRequestType request_type = 2;         // Type of key request: all, specific, or search
    google.protobuf.UInt32Value limit = 3;   // Limit on the number of keys to be returned
    google.protobuf.UInt32Value offset = 4;  // Offset for pagination through the keys
    bool prove = 5;                          // Flag to request a proof as the response
  }

  oneof version { GetIdentityKeysRequestV0 v0 = 1; }
}

message GetIdentityKeysResponse {

  message GetIdentityKeysResponseV0 {
    message Keys { repeated bytes keys_bytes = 1; }  // Collection of keys as byte sequences

    oneof result {
      Keys keys = 1;    // The actual key data
      Proof proof = 2;  // Proof of the keys data, if requested
    }
    ResponseMetadata metadata = 3;  // Metadata about the blockchain state
  }
  oneof version { GetIdentityKeysResponseV0 v0 = 1; }
}

message GetProofsRequest {
  message GetProofsRequestV0 {
    message DocumentRequest {
      bytes contract_id = 1;
      string document_type = 2;
      bool document_type_keeps_history = 3;
      bytes document_id = 4;
    }

    message IdentityRequest {
      enum Type {
        FULL_IDENTITY = 0;
        BALANCE = 1;
        KEYS = 2;
      }
      bytes identity_id = 1;
      Type request_type = 2;
    }

    message ContractRequest { bytes contract_id = 1; }

    repeated IdentityRequest identities = 1;
    repeated ContractRequest contracts = 2;
    repeated DocumentRequest documents = 3;
  }

  oneof version { GetProofsRequestV0 v0 = 1; }
}

message GetProofsResponse {
  message GetProofsResponseV0 {
    oneof result { Proof proof = 1; }

    ResponseMetadata metadata = 2;
  }
  oneof version { GetProofsResponseV0 v0 = 1; }
}

message GetDataContractRequest {
  message GetDataContractRequestV0 {
    bytes id = 1;
    bool prove = 2;
  }
  oneof version { GetDataContractRequestV0 v0 = 1; }
}

message GetDataContractResponse {
  message GetDataContractResponseV0 {
    oneof result {
      bytes data_contract = 1;
      Proof proof = 2;
    }
    ResponseMetadata metadata = 3;
  }
  oneof version { GetDataContractResponseV0 v0 = 1; }
}

message GetDataContractsRequest {
  message GetDataContractsRequestV0 {
    repeated bytes ids = 1;
    bool prove = 2;
  }
  oneof version { GetDataContractsRequestV0 v0 = 1; }
}

message GetDataContractsResponse {
  message DataContractEntry {
    bytes identifier = 1;
    google.protobuf.BytesValue data_contract = 2;
  }
  message DataContracts {
    repeated DataContractEntry data_contract_entries = 1;
  }

  message GetDataContractsResponseV0 {
    oneof result {
      DataContracts data_contracts = 1;
      Proof proof = 2;
    }
    ResponseMetadata metadata = 3;
  }
  oneof version { GetDataContractsResponseV0 v0 = 1; }
}

message GetDataContractHistoryRequest {
  message GetDataContractHistoryRequestV0 {
    bytes id = 1;
    google.protobuf.UInt32Value limit = 2;
    google.protobuf.UInt32Value offset = 3;
    uint64 start_at_ms = 4;
    bool prove = 5;
  }
  oneof version { GetDataContractHistoryRequestV0 v0 = 1; }
}

message GetDataContractHistoryResponse {
  message GetDataContractHistoryResponseV0 {
    message DataContractHistoryEntry {
      uint64 date = 1;
      bytes value = 2;
    }

    message DataContractHistory {
      repeated DataContractHistoryEntry data_contract_entries = 1;
    }

    oneof result {
      DataContractHistory data_contract_history = 1;
      Proof proof = 2;
    }

    ResponseMetadata metadata = 3;
  }
  oneof version { GetDataContractHistoryResponseV0 v0 = 1; }
}

message GetDocumentsRequest {
  message GetDocumentsRequestV0 {
    bytes data_contract_id = 1;
    string document_type = 2;
    bytes where = 3;
    bytes order_by = 4;
    uint32 limit = 5;
    oneof start {
      bytes start_after = 6;
      bytes start_at = 7;
    }
    bool prove = 8;
  }
  oneof version { GetDocumentsRequestV0 v0 = 1; }
}

message GetDocumentsResponse {
  message GetDocumentsResponseV0 {
    message Documents { repeated bytes documents = 1; }

    oneof result {
      Documents documents = 1;
      Proof proof = 2;
    }
    ResponseMetadata metadata = 3;
  }
  oneof version { GetDocumentsResponseV0 v0 = 1; }
}

message GetIdentitiesByPublicKeyHashesRequest {
  message GetIdentitiesByPublicKeyHashesRequestV0 {
    repeated bytes public_key_hashes = 1;  // List of public key hashes for which identities are requested
    bool prove = 2;                        // Flag to request a proof as the response
  }
  oneof version { GetIdentitiesByPublicKeyHashesRequestV0 v0 = 1; }
}

message GetIdentitiesByPublicKeyHashesResponse {
  // Represents a single entry of identity associated with a public key hash.
  message PublicKeyHashIdentityEntry {
    bytes public_key_hash = 1;             // The public key hash
    google.protobuf.BytesValue value = 2;  // The value of the identity associated with the public key hash
  }

  // A collection of identity entries indexed by public key hashes
  message IdentitiesByPublicKeyHashes {
    repeated PublicKeyHashIdentityEntry identity_entries = 1;  // List of identity entries
  }

  message GetIdentitiesByPublicKeyHashesResponseV0 {
    oneof result {
      IdentitiesByPublicKeyHashes identities = 1;  // The actual identities associated with the provided public key hashes
      Proof proof = 2;                             // Cryptographic proof for the response data, if requested
    }

    ResponseMetadata metadata = 3;  // Metadata about the blockchain state
  }
  oneof version { GetIdentitiesByPublicKeyHashesResponseV0 v0 = 1; }
}

message GetIdentityByPublicKeyHashRequest {
  message GetIdentityByPublicKeyHashRequestV0 {
    bytes public_key_hash = 1;  // The public key hash of the identity being requested
    bool prove = 2;             // Flag to request a proof as the response
  }
  oneof version { GetIdentityByPublicKeyHashRequestV0 v0 = 1; }
}

message GetIdentityByPublicKeyHashResponse {
  message GetIdentityByPublicKeyHashResponseV0 {
    oneof result {
      bytes identity = 1;  // The actual identity data corresponding to the requested public key hash
      Proof proof = 2;     // Cryptographic proof for the identity data, if requested
    }

    ResponseMetadata metadata = 3;  // Metadata about the blockchain state
  }
  oneof version { GetIdentityByPublicKeyHashResponseV0 v0 = 1; }
}

message WaitForStateTransitionResultRequest {
  message WaitForStateTransitionResultRequestV0 {
    bytes state_transition_hash = 1;
    bool prove = 2;
  }
  oneof version { WaitForStateTransitionResultRequestV0 v0 = 1; }
}

message WaitForStateTransitionResultResponse {
  message WaitForStateTransitionResultResponseV0 {
    oneof result {
      StateTransitionBroadcastError error = 1;
      Proof proof = 2;
    }
    ResponseMetadata metadata = 3;
  }
  oneof version { WaitForStateTransitionResultResponseV0 v0 = 1; }
}

message GetConsensusParamsRequest {
  message GetConsensusParamsRequestV0 {
    int32 height = 1;
    bool prove = 2;
  }
  oneof version { GetConsensusParamsRequestV0 v0 = 1; }
}

message GetConsensusParamsResponse {
  message ConsensusParamsBlock {
    string max_bytes = 1;
    string max_gas = 2;
    string time_iota_ms = 3;
  }

  message ConsensusParamsEvidence {
    string max_age_num_blocks = 1;
    string max_age_duration = 2;
    string max_bytes = 3;
  }

  message GetConsensusParamsResponseV0 {
    ConsensusParamsBlock block = 1;
    ConsensusParamsEvidence evidence = 2;
  }
  oneof version { GetConsensusParamsResponseV0 v0 = 1; }
}


message GetProtocolVersionUpgradeStateRequest {
  message GetProtocolVersionUpgradeStateRequestV0 {
    bool prove = 1;
  }

  oneof version {
    GetProtocolVersionUpgradeStateRequestV0 v0 = 1;
  }
}

message GetProtocolVersionUpgradeStateResponse {
  message GetProtocolVersionUpgradeStateResponseV0 {
    message Versions {
      repeated VersionEntry versions = 1;
    }

    message VersionEntry {
      uint32 version_number = 1;
      uint32 vote_count = 2;
    }

    oneof result {
      Versions versions = 1;
      Proof proof = 2;
    }
    ResponseMetadata metadata = 3;
  }

  oneof version {
    GetProtocolVersionUpgradeStateResponseV0 v0 = 1;
  }
}

message GetProtocolVersionUpgradeVoteStatusRequest {
  message GetProtocolVersionUpgradeVoteStatusRequestV0 {
    bytes start_pro_tx_hash = 1;
    uint32 count = 2;
    bool prove = 3;
  }

  oneof version {
    GetProtocolVersionUpgradeVoteStatusRequestV0 v0 = 1;
  }
}

message GetProtocolVersionUpgradeVoteStatusResponse {
  message GetProtocolVersionUpgradeVoteStatusResponseV0 {
    message VersionSignals {
      repeated VersionSignal version_signals = 1;
    }

    message VersionSignal {
      bytes pro_tx_hash = 1;
      uint32 version = 2;
    }

    oneof result {
      VersionSignals versions = 1;
      Proof proof = 2;
    }
    ResponseMetadata metadata = 3;
  }

  oneof version {
    GetProtocolVersionUpgradeVoteStatusResponseV0 v0 = 1;
  }
}

message GetEpochsInfoRequest {
  message GetEpochsInfoRequestV0 {
    google.protobuf.UInt32Value start_epoch = 1;
    uint32 count = 2;
    bool ascending = 3;
    bool prove = 4;
  }

  oneof version {
    GetEpochsInfoRequestV0 v0 = 1;
  }
}

message GetEpochsInfoResponse {
  message GetEpochsInfoResponseV0 {
    message EpochInfos {
      repeated EpochInfo epoch_infos = 1;
    }

    message EpochInfo {
      uint32 number = 1;
      uint64 first_block_height = 2;
      uint32 first_core_block_height = 3;
      uint64 start_time = 4;
      double fee_multiplier = 5;
    }

    oneof result {
      EpochInfos epochs = 1;
      Proof proof = 2;
    }
    ResponseMetadata metadata = 3;
  }

  oneof version {
    GetEpochsInfoResponseV0 v0 = 1;
  }
}
