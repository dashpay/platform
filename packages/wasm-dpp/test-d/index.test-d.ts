// TS typings test
import { expectType } from 'tsd';

import loadDpp, { DPPModule, DashPlatformProtocol, Identifier } from "..";

// Tests that loadDpp resolves DPPModule
expectType<Promise<DPPModule>>(loadDpp());

// Tests that dist exports wasm-dpp exported classes  (from WASM bindings)
const dppInstance = new DashPlatformProtocol({}, 1);
expectType<DashPlatformProtocol>(dppInstance);

// Tests that library exports Identifier class (from TS code in lib)
expectType<Identifier>(new Identifier(Buffer.alloc(32)));

// Tests that typings properly handle optional arguments (second argument of createFromBuffer)
// This test will fail if we pass JS code built by wasm-bindgen through TypeScript compilation
// instead of putting it directly to dist.
// If we do it this way, proper typings generated by wasm-bindgen will be ignored, and incorrect
// ones will be generated by TypeScript compiler.
dppInstance.stateTransition.createFromBuffer(Buffer.alloc(32), { });
