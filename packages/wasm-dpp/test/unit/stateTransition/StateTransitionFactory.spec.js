const getDataContractFixture = require('../../../lib/test/fixtures/getDataContractFixture');

// const createStateRepositoryMock = require('../../../lib/test/mocks/createStateRepositoryMock');

const { default: loadWasmDpp } = require('../../..');
// const getBlsAdapterMock = require('../../../lib/test/mocks/getBlsAdapterMock');

describe('StateTransitionFactory', function main() {
  this.timeout(100000);

  let factory;
  let stateTransition;
  let rawStateTransition;
  // let stateRepositoryMock;
  let StateTransitionFactory;
  let DataContractCreateTransition;
  let InvalidStateTransitionError;
  let MissingStateTransitionTypeError;

  before(async () => {
    ({
      DataContractCreateTransition,
      StateTransitionFactory,
      InvalidStateTransitionError,
      MissingStateTransitionTypeError,
    } = await loadWasmDpp());
  });

  beforeEach(async () => {
    const dataContract = await getDataContractFixture();

    const rawDataContract = dataContract.toObject();

    stateTransition = new DataContractCreateTransition({
      dataContract: rawDataContract,
      entropy: dataContract.getEntropy(),
      signature: Buffer.alloc(65),
      signaturePublicKeyId: 0,
    });

    rawStateTransition = stateTransition.toObject();

    factory = new StateTransitionFactory();
  });

  describe.skip('createFromObject', () => {
    it('should return new State Transition with data from passed object', async () => {
      const result = await factory.createFromObject(rawStateTransition);

      expect(result.toObject()).to.deep.equal(stateTransition.toObject());
    });

    it('should return new State Transition without validation if "skipValidation" option is passed', async () => {
      const result = await factory.createFromObject(rawStateTransition, { skipValidation: true });

      expect(result.toObject()).to.deep.equal(stateTransition.toObject());
    });

    it('should throw InvalidStateTransition error in case validation failed', async () => {
      rawStateTransition.type = undefined;

      try {
        await factory.createFromObject(rawStateTransition);
        expect.fail('should throw an error');
      } catch (e) {
        expect(e).to.be.an.instanceOf(InvalidStateTransitionError);

        const [error] = e.getErrors();

        expect(error).to.be.an.instanceOf(MissingStateTransitionTypeError);
      }
    });
  });

  // TODO: It should work
  describe.skip('createFromBuffer', () => {
    it('should return new State Transition from serialized contract', async () => {
      const buffer = stateTransition.toBuffer();

      const result = await factory.createFromBuffer(buffer);

      expect(result.toObject()).to.deep.equal(stateTransition.toObject());
    });

    it.skip('should throw InvalidStateTransition error in case validation failed', async () => {
      // CBOR that have invalid "type" property
      // TODO: make it an actually missing field instead of an invalid value
      const stateTransitionHex = '01a56c64617461436f6e7472616374a66f70726f746f636f6c56657273696f6e0163246964982018a318b611186f184718781848187d186318441830182c185518fe18e318ff188b18eb185918490218ac1831187b1873184a182c18d9189b1886182418bf6724736368656d61783468747470733a2f2f736368656d612e646173682e6f72672f6470702d302d342d302f6d6574612f646174612d636f6e74726163746776657273696f6e01676f776e657249649820187618a6185c189e18651833183d18aa02189e0d18a61869182818c107183e188908184f183818d018220418c01839161860187418ae18dd189969646f63756d656e7473a76f696e6465786564446f63756d656e74a56474797065666f626a65637467696e646963657386a3646e616d6566696e646578316a70726f7065727469657382a168246f776e6572496463617363a16966697273744e616d656361736366756e69717565f5a3646e616d6566696e646578326a70726f7065727469657382a168246f776e6572496463617363a1686c6173744e616d656361736366756e69717565f5a3646e616d6566696e646578336a70726f7065727469657381a1686c6173744e616d656361736366756e69717565f4a2646e616d6566696e646578346a70726f7065727469657382a16a2463726561746564417463617363a16a2475706461746564417463617363a2646e616d6566696e646578356a70726f7065727469657381a16a2475706461746564417463617363a2646e616d6566696e646578366a70726f7065727469657381a16a24637265617465644174636173636a70726f70657274696573a36966697273744e616d65a2647479706566737472696e67696d61784c656e677468183f686c6173744e616d65a2647479706566737472696e67696d61784c656e677468183f6d6f7468657250726f7065727479a2647479706566737472696e67696d61784c656e677468182a687265717569726564846966697273744e616d656a246372656174656441746a24757064617465644174686c6173744e616d65746164646974696f6e616c50726f70657274696573f46c6e696365446f63756d656e74a46474797065666f626a6563746a70726f70657274696573a1646e616d65a1647479706566737472696e67687265717569726564816a24637265617465644174746164646974696f6e616c50726f70657274696573f46e6e6f54696d65446f63756d656e74a36474797065666f626a6563746a70726f70657274696573a1646e616d65a1647479706566737472696e67746164646974696f6e616c50726f70657274696573f4781d6f7074696f6e616c556e69717565496e6465786564446f63756d656e74a56474797065666f626a6563746a70726f70657274696573a46966697273744e616d65a2647479706566737472696e67696d61784c656e677468183f686c6173744e616d65a2647479706566737472696e67696d61784c656e677468183f67636f756e747279a2647479706566737472696e67696d61784c656e677468183f6463697479a2647479706566737472696e67696d61784c656e677468183f67696e646963657383a3646e616d6566696e646578316a70726f7065727469657381a16966697273744e616d656361736366756e69717565f5a3646e616d6566696e646578326a70726f7065727469657383a168246f776e6572496463617363a16966697273744e616d6563617363a1686c6173744e616d656361736366756e69717565f5a3646e616d6566696e646578336a70726f7065727469657382a167636f756e74727963617363a164636974796361736366756e69717565f5687265717569726564826966697273744e616d65686c6173744e616d65746164646974696f6e616c50726f70657274696573f46e707265747479446f63756d656e74a46474797065666f626a6563746a70726f70657274696573a1686c6173744e616d65a1647479706566737472696e6768726571756972656482686c6173744e616d656a24757064617465644174746164646974696f6e616c50726f70657274696573f46b756e697175654461746573a56474797065666f626a65637467696e646963657382a3646e616d6566696e646578316a70726f7065727469657382a16a2463726561746564417463617363a16a247570646174656441746361736366756e69717565f5a2646e616d6566696e646578326a70726f7065727469657381a16a24757064617465644174636173636a70726f70657274696573a26966697273744e616d65a1647479706566737472696e67686c6173744e616d65a1647479706566737472696e67687265717569726564836966697273744e616d656a246372656174656441746a24757064617465644174746164646974696f6e616c50726f70657274696573f46e7769746842797465417272617973a56474797065666f626a65637467696e646963657381a2646e616d6566696e646578316a70726f7065727469657381a16e6279746541727261794669656c64636173636a70726f70657274696573a26e6279746541727261794669656c64a3647479706565617272617969627974654172726179f5686d61784974656d73106f6964656e7469666965724669656c64a5647479706565617272617969627974654172726179f570636f6e74656e744d656469615479706578216170706c69636174696f6e2f782e646173682e6470702e6964656e746966696572686d696e4974656d731820686d61784974656d731820687265717569726564816e6279746541727261794669656c64746164646974696f6e616c50726f70657274696573f464747970652267656e74726f70799820189618d10418b2071882188e188818fc18b7189818dd185c18811881189b1867187912183d184d187118ff1866181d185f1839188718ea1824185113747369676e61747572655075626c69634b6579496400697369676e617475726598410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
      const stateTransitionBuffer = Buffer.from(stateTransitionHex, 'hex');

      try {
        await factory.createFromBuffer(stateTransitionBuffer);
        expect.fail('should throw an error');
      } catch (e) {
        expect(e).to.be.an.instanceOf(InvalidStateTransitionError);

        const [error] = e.getErrors();

        expect(error).to.be.an.instanceOf(MissingStateTransitionTypeError);
      }
    });
  });
});
