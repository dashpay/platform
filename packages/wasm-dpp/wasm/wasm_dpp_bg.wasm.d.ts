/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_statetransitionfactory_free(a: number): void;
export function statetransitionfactory_new(a: number, b: number, c: number): void;
export function statetransitionfactory_createFromObject(a: number, b: number, c: number): number;
export function statetransitionfactory_createFromBuffer(a: number, b: number, c: number, d: number): number;
export function __wbg_invalidinstantassetlockproofsignatureerror_free(a: number): void;
export function invalidinstantassetlockproofsignatureerror_getCode(a: number): number;
export function invalidinstantassetlockproofsignatureerror_message(a: number, b: number): void;
export function invalidinstantassetlockproofsignatureerror_serialize(a: number, b: number): void;
export function __wbg_invalidstatetransitionsignatureerror_free(a: number): void;
export function invalidstatetransitionsignatureerror_getCode(a: number): number;
export function invalidstatetransitionsignatureerror_message(a: number, b: number): void;
export function invalidstatetransitionsignatureerror_serialize(a: number, b: number): void;
export function __wbg_identityvalidator_free(a: number): void;
export function identityvalidator_new(a: number, b: number): void;
export function identityvalidator_validate(a: number, b: number, c: number): void;
export function __wbg_signatureverificationoperation_free(a: number): void;
export function signatureverificationoperation_new(a: number, b: number): void;
export function signatureverificationoperation_getProcessingCost(a: number, b: number): void;
export function signatureverificationoperation_getStorageCost(a: number, b: number): void;
export function signatureverificationoperation_refunds(a: number): number;
export function signatureverificationoperation_toJSON(a: number, b: number): void;
export function __wbg_datacontractcreatetransition_free(a: number): void;
export function datacontractcreatetransition_new(a: number, b: number): void;
export function datacontractcreatetransition_getDataContract(a: number): number;
export function datacontractcreatetransition_getProtocolVersion(a: number): number;
export function datacontractcreatetransition_getEntropy(a: number): number;
export function datacontractcreatetransition_getOwnerId(a: number): number;
export function datacontractcreatetransition_getType(a: number): number;
export function datacontractcreatetransition_toJSON(a: number, b: number, c: number): void;
export function datacontractcreatetransition_toBuffer(a: number, b: number, c: number): void;
export function datacontractcreatetransition_getModifiedDataIds(a: number, b: number): void;
export function datacontractcreatetransition_isDataContractStateTransition(a: number): number;
export function datacontractcreatetransition_isDocumentStateTransition(a: number): number;
export function datacontractcreatetransition_isIdentityStateTransition(a: number): number;
export function datacontractcreatetransition_setExecutionContext(a: number, b: number): void;
export function datacontractcreatetransition_getExecutionContext(a: number): number;
export function datacontractcreatetransition_toObject(a: number, b: number, c: number): void;
export function datacontractcreatetransition_sign(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function datacontractcreatetransition_verifySignature(a: number, b: number, c: number, d: number): void;
export function __wbg_extendeddocument_free(a: number): void;
export function extendeddocument_new(a: number, b: number, c: number): void;
export function extendeddocument_getProtocolVersion(a: number): number;
export function extendeddocument_getId(a: number): number;
export function extendeddocument_setId(a: number, b: number): void;
export function extendeddocument_getType(a: number, b: number): void;
export function extendeddocument_getDataContractId(a: number): number;
export function extendeddocument_getDataContract(a: number): number;
export function extendeddocument_setDataContractId(a: number, b: number, c: number): void;
export function extendeddocument_getDocument(a: number): number;
export function extendeddocument_setOwnerId(a: number, b: number): void;
export function extendeddocument_getOwnerId(a: number): number;
export function extendeddocument_setRevision(a: number, b: number, c: number): void;
export function extendeddocument_getRevision(a: number, b: number): void;
export function extendeddocument_setEntropy(a: number, b: number, c: number, d: number): void;
export function extendeddocument_getEntropy(a: number): number;
export function extendeddocument_setData(a: number, b: number, c: number): void;
export function extendeddocument_getData(a: number, b: number): void;
export function extendeddocument_set(a: number, b: number, c: number, d: number, e: number): void;
export function extendeddocument_get(a: number, b: number, c: number): number;
export function extendeddocument_setCreatedAt(a: number, b: number): void;
export function extendeddocument_setUpdatedAt(a: number, b: number): void;
export function extendeddocument_getCreatedAt(a: number): number;
export function extendeddocument_getUpdatedAt(a: number): number;
export function extendeddocument_getMetadata(a: number): number;
export function extendeddocument_setMetadata(a: number, b: number, c: number): void;
export function extendeddocument_toObject(a: number, b: number, c: number): void;
export function extendeddocument_toJSON(a: number, b: number): void;
export function extendeddocument_toBuffer(a: number, b: number): void;
export function extendeddocument_hash(a: number, b: number): void;
export function extendeddocument_clone(a: number): number;
export function __wbg_datatriggerexecutionresult_free(a: number): void;
export function datatriggerexecutionresult_isOk(a: number): number;
export function datatriggerexecutionresult_getErrors(a: number): number;
export function __wbg_incompatiblere2patternerror_free(a: number): void;
export function incompatiblere2patternerror_getPattern(a: number, b: number): void;
export function incompatiblere2patternerror_getPath(a: number, b: number): void;
export function incompatiblere2patternerror_getMessage(a: number, b: number): void;
export function incompatiblere2patternerror_getCode(a: number): number;
export function incompatiblere2patternerror_message(a: number, b: number): void;
export function incompatiblere2patternerror_serialize(a: number, b: number): void;
export function __wbg_invalididentitypublickeysecuritylevelerror_free(a: number): void;
export function invalididentitypublickeysecuritylevelerror_getPublicKeyId(a: number): number;
export function invalididentitypublickeysecuritylevelerror_getPublicKeyPurpose(a: number): number;
export function invalididentitypublickeysecuritylevelerror_getPublicKeySecurityLevel(a: number): number;
export function invalididentitypublickeysecuritylevelerror_getCode(a: number): number;
export function invalididentitypublickeysecuritylevelerror_message(a: number, b: number): void;
export function invalididentitypublickeysecuritylevelerror_serialize(a: number, b: number): void;
export function __wbg_datacontractalreadypresenterror_free(a: number): void;
export function datacontractalreadypresenterror_new(a: number): number;
export function datacontractalreadypresenterror_getDataContractId(a: number): number;
export function datacontractalreadypresenterror_getCode(a: number): number;
export function datacontractalreadypresenterror_message(a: number, b: number): void;
export function datacontractalreadypresenterror_serialize(a: number, b: number): void;
export function __wbg_datatriggerconditionerror_free(a: number): void;
export function datatriggerconditionerror_getDataContractId(a: number): number;
export function datatriggerconditionerror_getDocumentId(a: number): number;
export function datatriggerconditionerror_getMessage(a: number, b: number): void;
export function datatriggerconditionerror_getCode(a: number): number;
export function datatriggerconditionerror_message(a: number, b: number): void;
export function datatriggerconditionerror_serialize(a: number, b: number): void;
export function __wbg_datatriggerexecutionerror_free(a: number): void;
export function datatriggerexecutionerror_getDataContractId(a: number): number;
export function datatriggerexecutionerror_getDocumentId(a: number): number;
export function datatriggerexecutionerror_getMessage(a: number, b: number): void;
export function datatriggerexecutionerror_getCode(a: number): number;
export function datatriggerexecutionerror_message(a: number, b: number): void;
export function datatriggerexecutionerror_serialize(a: number, b: number): void;
export function __wbg_duplicateindexnameerror_free(a: number): void;
export function duplicateindexnameerror_getDocumentType(a: number, b: number): void;
export function duplicateindexnameerror_getDuplicateIndexName(a: number, b: number): void;
export function duplicateindexnameerror_getCode(a: number): number;
export function duplicateindexnameerror_message(a: number, b: number): void;
export function duplicateindexnameerror_serialize(a: number, b: number): void;
export function __wbg_invaliddocumentrevisionerror_free(a: number): void;
export function invaliddocumentrevisionerror_getDocumentId(a: number): number;
export function invaliddocumentrevisionerror_getCurrentRevision(a: number, b: number): void;
export function invaliddocumentrevisionerror_getCode(a: number): number;
export function invaliddocumentrevisionerror_message(a: number, b: number): void;
export function invaliddocumentrevisionerror_serialize(a: number, b: number): void;
export function __wbg_jsonschemavalidator_free(a: number): void;
export function jsonschemavalidator_new(a: number, b: number, c: number): void;
export function __wbg_datacontractupdatetransition_free(a: number): void;
export function datacontractupdatetransition_new(a: number, b: number): void;
export function datacontractupdatetransition_getDataContract(a: number): number;
export function datacontractupdatetransition_getProtocolVersion(a: number): number;
export function datacontractupdatetransition_getEntropy(a: number): number;
export function datacontractupdatetransition_getOwnerId(a: number): number;
export function datacontractupdatetransition_getType(a: number): number;
export function datacontractupdatetransition_toJSON(a: number, b: number, c: number): void;
export function datacontractupdatetransition_toBuffer(a: number, b: number, c: number): void;
export function datacontractupdatetransition_getModifiedDataIds(a: number, b: number): void;
export function datacontractupdatetransition_isDataContractStateTransition(a: number): number;
export function datacontractupdatetransition_isDocumentStateTransition(a: number): number;
export function datacontractupdatetransition_isIdentityStateTransition(a: number): number;
export function datacontractupdatetransition_setExecutionContext(a: number, b: number): void;
export function datacontractupdatetransition_getExecutionContext(a: number): number;
export function datacontractupdatetransition_hash(a: number, b: number, c: number): void;
export function datacontractupdatetransition_toObject(a: number, b: number, c: number): void;
export function datacontractupdatetransition_sign(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function datacontractupdatetransition_verifySignature(a: number, b: number, c: number, d: number): void;
export function __wbg_datatrigger_free(a: number): void;
export function datatrigger_get_data_contract_id(a: number): number;
export function datatrigger_set_data_contract_id(a: number, b: number, c: number): void;
export function datatrigger_get_document_type(a: number, b: number): void;
export function datatrigger_set_document_type(a: number, b: number, c: number): void;
export function datatrigger_get_data_trigger_kind(a: number, b: number): void;
export function datatrigger_get_transition_action(a: number, b: number): void;
export function datatrigger_set_transition_action(a: number, b: number, c: number, d: number): void;
export function datatrigger_get_top_level_identity(a: number): number;
export function datatrigger_set_top_level_identity(a: number, b: number, c: number): void;
export function __wbg_publickeyssignaturesvalidator_free(a: number): void;
export function publickeyssignaturesvalidator_new(a: number): number;
export function publickeyssignaturesvalidator_validate(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_identitytopuptransitionstatevalidator_free(a: number): void;
export function identitytopuptransitionstatevalidator_new(a: number): number;
export function identitytopuptransitionstatevalidator_validate(a: number, b: number): number;
export function __wbg_identitypublickeydisabledatwindowviolationerror_free(a: number): void;
export function identitypublickeydisabledatwindowviolationerror_getDisabledAt(a: number): number;
export function identitypublickeydisabledatwindowviolationerror_getTimeWindowStart(a: number): number;
export function identitypublickeydisabledatwindowviolationerror_getTimeWindowEnd(a: number): number;
export function identitypublickeydisabledatwindowviolationerror_getCode(a: number): number;
export function identitypublickeydisabledatwindowviolationerror_message(a: number, b: number): void;
export function identitypublickeydisabledatwindowviolationerror_serialize(a: number, b: number): void;
export function __wbg_tryingtoreplaceimmutabledocumenterror_free(a: number): void;
export function tryingtoreplaceimmutabledocumenterror_new(a: number): number;
export function __wbg_balanceisnotenougherror_free(a: number): void;
export function balanceisnotenougherror_new(a: number, b: number): number;
export function balanceisnotenougherror_getBalance(a: number): number;
export function balanceisnotenougherror_getFee(a: number): number;
export function balanceisnotenougherror_getCode(a: number): number;
export function balanceisnotenougherror_message(a: number, b: number): void;
export function balanceisnotenougherror_serialize(a: number, b: number): void;
export function __wbg_readoperation_free(a: number): void;
export function readoperation_new(a: number, b: number): void;
export function readoperation_processingCost(a: number, b: number): void;
export function readoperation_storageCost(a: number, b: number): void;
export function readoperation_refunds(a: number): number;
export function readoperation_toJSON(a: number, b: number): void;
export function __wbg_identityupdatepublickeysvalidator_free(a: number): void;
export function identityupdatepublickeysvalidator_new(): number;
export function identityupdatepublickeysvalidator_validate(a: number, b: number, c: number, d: number): void;
export function __wbg_invalidinitialrevisionerror_free(a: number): void;
export function invalidinitialrevisionerror_new(a: number): number;
export function invalidinitialrevisionerror_getDocument(a: number): number;
export function applyDocumentsBatchTransition(a: number, b: number): number;
export function validateDocumentsBatchTransitionState(a: number, b: number): number;
export function __wbg_assetlockoutputnotfounderror_free(a: number): void;
export function applyIdentityCreateTransition(a: number, b: number): number;
export function applyIdentityTopUpTransition(a: number, b: number): number;
export function applyIdentityUpdateTransition(a: number, b: number): number;
export function __wbg_documentreplacetransition_free(a: number): void;
export function documentreplacetransition_from_raw_object(a: number, b: number, c: number): void;
export function documentreplacetransition_getAction(a: number): number;
export function documentreplacetransition_getRevision(a: number): number;
export function documentreplacetransition_getUpdatedAt(a: number): number;
export function documentreplacetransition_toObject(a: number, b: number, c: number): void;
export function documentreplacetransition_toJSON(a: number, b: number): void;
export function documentreplacetransition_getData(a: number, b: number): void;
export function documentreplacetransition_getId(a: number): number;
export function documentreplacetransition_getType(a: number, b: number): void;
export function documentreplacetransition_getDataContract(a: number): number;
export function documentreplacetransition_getDataContractId(a: number): number;
export function documentreplacetransition_get(a: number, b: number, c: number, d: number): void;
export function __wbg_documenttransition_free(a: number): void;
export function documenttransition_getId(a: number): number;
export function documenttransition_getType(a: number, b: number): void;
export function documenttransition_getAction(a: number): number;
export function documenttransition_getDataContract(a: number): number;
export function documenttransition_getDataContractId(a: number): number;
export function documenttransition_setDataContractId(a: number, b: number, c: number): void;
export function documenttransition_getRevision(a: number): number;
export function documenttransition_getCreatedAt(a: number): number;
export function documenttransition_getUpdatedAt(a: number): number;
export function documenttransition_setUpdatedAt(a: number, b: number, c: number): void;
export function documenttransition_setCreatedAt(a: number, b: number): void;
export function documenttransition_getData(a: number, b: number): void;
export function documenttransition_get(a: number, b: number, c: number): number;
export function documenttransition_toObject(a: number, b: number, c: number): void;
export function documenttransition_toJSON(a: number, b: number): void;
export function documenttransition_fromTransitionCreate(a: number): number;
export function documenttransition_fromTransitionReplace(a: number): number;
export function documenttransition_fromTransitionDelete(a: number): number;
export function __wbg_datacontractgenericerror_free(a: number): void;
export function datacontractgenericerror_getMessage(a: number, b: number): void;
export function __wbg_datacontractmaxdepthexceederror_free(a: number): void;
export function datacontractmaxdeptherror_getMaxDepth(a: number): number;
export function datacontractmaxdeptherror_getSchemaDepth(a: number): number;
export function datacontractmaxdeptherror_getCode(a: number): number;
export function datacontractmaxdeptherror_message(a: number, b: number): void;
export function datacontractmaxdeptherror_serialize(a: number, b: number): void;
export function __wbg_invalidassetlockproofcorechainheighterror_free(a: number): void;
export function invalidassetlockproofcorechainheighterror_getProofCoreChainLockedHeight(a: number): number;
export function invalidassetlockproofcorechainheighterror_getCurrentCoreChainLockedHeight(a: number): number;
export function invalidassetlockproofcorechainheighterror_getCode(a: number): number;
export function invalidassetlockproofcorechainheighterror_message(a: number, b: number): void;
export function invalidassetlockproofcorechainheighterror_serialize(a: number, b: number): void;
export function __wbg_incompatibleprotocolversionerror_free(a: number): void;
export function incompatibleprotocolversionerror_getParsedProtocolVersion(a: number): number;
export function incompatibleprotocolversionerror_getMinimalProtocolVersion(a: number): number;
export function incompatibleprotocolversionerror_getCode(a: number): number;
export function incompatibleprotocolversionerror_message(a: number, b: number): void;
export function incompatibleprotocolversionerror_serialize(a: number, b: number): void;
export function __wbg_identitypublickeyisreadonlyerror_free(a: number): void;
export function identitypublickeyisreadonlyerror_getKeyId(a: number): number;
export function identitypublickeyisreadonlyerror_getPublicKeyIndex(a: number): number;
export function identitypublickeyisreadonlyerror_getCode(a: number): number;
export function identitypublickeyisreadonlyerror_message(a: number, b: number): void;
export function identitypublickeyisreadonlyerror_serialize(a: number, b: number): void;
export function __wbg_invalidinstantassetlockprooferror_free(a: number): void;
export function invalidinstantassetlockprooferror_getCode(a: number): number;
export function invalidinstantassetlockprooferror_message(a: number, b: number): void;
export function invalidinstantassetlockprooferror_serialize(a: number, b: number): void;
export function __wbg_unknownassetlockprooftypeerror_free(a: number): void;
export function unknownassetlockprooftypeerror_getType(a: number): number;
export function __wbg_statetransitionkeysignaturevalidator_free(a: number): void;
export function statetransitionkeysignaturevalidator_new(a: number): number;
export function statetransitionkeysignaturevalidator_validate(a: number, b: number): number;
export function __wbg_documentvalidator_free(a: number): void;
export function documentvalidator_new(a: number): number;
export function documentvalidator_validate(a: number, b: number, c: number, d: number): void;
export function __wbg_duplicatedidentitypublickeystateerror_free(a: number): void;
export function duplicatedidentitypublickeystateerror_getDuplicatedPublicKeysIds(a: number): number;
export function duplicatedidentitypublickeystateerror_getCode(a: number): number;
export function duplicatedidentitypublickeystateerror_message(a: number, b: number): void;
export function duplicatedidentitypublickeystateerror_serialize(a: number, b: number): void;
export function __wbg_identityalreadyexistserror_free(a: number): void;
export function identityalreadyexistserror_getIdentityId(a: number): number;
export function identityalreadyexistserror_getCode(a: number): number;
export function identityalreadyexistserror_message(a: number, b: number): void;
export function identityalreadyexistserror_serialize(a: number, b: number): void;
export function __wbg_platformvalueerror_free(a: number): void;
export function platformvalueerror_getMessage(a: number, b: number): void;
export function platformvalueerror_toString(a: number, b: number): void;
export function __wbg_invaliddatacontractversionerror_free(a: number): void;
export function invaliddatacontractversionerror_getExpectedVersion(a: number): number;
export function invaliddatacontractversionerror_getVersion(a: number): number;
export function invaliddatacontractversionerror_getCode(a: number): number;
export function invaliddatacontractversionerror_message(a: number, b: number): void;
export function invaliddatacontractversionerror_serialize(a: number, b: number): void;
export function __wbg_unsupportedprotocolversionerror_free(a: number): void;
export function unsupportedprotocolversionerror_getParsedProtocolVersion(a: number): number;
export function unsupportedprotocolversionerror_getLatestVersion(a: number): number;
export function unsupportedprotocolversionerror_getCode(a: number): number;
export function unsupportedprotocolversionerror_message(a: number, b: number): void;
export function unsupportedprotocolversionerror_serialize(a: number, b: number): void;
export function calculateStateTransitionFeeFromOperations(a: number, b: number, c: number): void;
export function __wbg_invaliddocumenttypeerror_free(a: number): void;
export function invaliddocumenttypeerror_getType(a: number, b: number): void;
export function invaliddocumenttypeerror_getDataContractId(a: number): number;
export function invaliddocumenttypeerror_getCode(a: number): number;
export function invaliddocumenttypeerror_message(a: number, b: number): void;
export function invaliddocumenttypeerror_serialize(a: number, b: number): void;
export function __wbg_identityfactory_free(a: number): void;
export function identityfactory_new(a: number, b: number, c: number): void;
export function identityfactory_create(a: number, b: number, c: number, d: number): void;
export function identityfactory_createFromObject(a: number, b: number, c: number, d: number): void;
export function identityfactory_createFromBuffer(a: number, b: number, c: number, d: number, e: number): void;
export function identityfactory_createInstantAssetLockProof(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function identityfactory_createChainAssetLockProof(a: number, b: number, c: number, d: number, e: number): void;
export function identityfactory_createIdentityCreateTransition(a: number, b: number, c: number): void;
export function identityfactory_createIdentityTopUpTransition(a: number, b: number, c: number, d: number): void;
export function identityfactory_createIdentityUpdateTransition(a: number, b: number, c: number, d: number): void;
export function validateDataContractCreateTransitionState(a: number, b: number): number;
export function validateDataContractCreateTransitionBasic(a: number): number;
export function findDuplicatesByIndices(a: number, b: number, c: number, d: number): void;
export function __wbg_invalidsignaturepublickeysecuritylevelerror_free(a: number): void;
export function invalidsignaturepublickeysecuritylevelerror_getPublicKeySecurityLevel(a: number): number;
export function invalidsignaturepublickeysecuritylevelerror_getKeySecurityLevelRequirement(a: number): number;
export function invalidsignaturepublickeysecuritylevelerror_getCode(a: number): number;
export function invalidsignaturepublickeysecuritylevelerror_message(a: number, b: number): void;
export function invalidsignaturepublickeysecuritylevelerror_serialize(a: number, b: number): void;
export function __wbg_publickeysecuritylevelnotmeterror_free(a: number): void;
export function publickeysecuritylevelnotmeterror_getPublicKeySecurityLevel(a: number): number;
export function publickeysecuritylevelnotmeterror_getKeySecurityLevelRequirement(a: number): number;
export function publickeysecuritylevelnotmeterror_getCode(a: number): number;
export function publickeysecuritylevelnotmeterror_message(a: number, b: number): void;
export function publickeysecuritylevelnotmeterror_serialize(a: number, b: number): void;
export function __wbg_wrongpublickeypurposeerror_free(a: number): void;
export function wrongpublickeypurposeerror_getPublicKeyPurpose(a: number): number;
export function wrongpublickeypurposeerror_getKeyPurposeRequirement(a: number): number;
export function wrongpublickeypurposeerror_getCode(a: number): number;
export function wrongpublickeypurposeerror_message(a: number, b: number): void;
export function wrongpublickeypurposeerror_serialize(a: number, b: number): void;
export function getDataTriggers(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getAllDataTriggers(a: number): void;
export function validateDocumentsUniquenessByIndices(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_datacontractfacade_free(a: number): void;
export function datacontractfacade_create(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function datacontractfacade_createFromObject(a: number, b: number, c: number): number;
export function datacontractfacade_createFromBuffer(a: number, b: number, c: number, d: number): number;
export function datacontractfacade_createDataContractCreateTransition(a: number, b: number, c: number): void;
export function datacontractfacade_createDataContractUpdateTransition(a: number, b: number, c: number): void;
export function datacontractfacade_validate(a: number, b: number): number;
export function __wbg_identityinsufficientbalanceerror_free(a: number): void;
export function identityinsufficientbalanceerror_getIdentityId(a: number): number;
export function identityinsufficientbalanceerror_getBalance(a: number): number;
export function identityinsufficientbalanceerror_getCode(a: number): number;
export function identityinsufficientbalanceerror_message(a: number, b: number): void;
export function identityinsufficientbalanceerror_serialize(a: number, b: number): void;
export function __wbg_invalididentitypublickeydataerror_free(a: number): void;
export function invalididentitypublickeydataerror_getPublicKeyId(a: number): number;
export function invalididentitypublickeydataerror_getValidationError(a: number, b: number): void;
export function invalididentitypublickeydataerror_getCode(a: number): number;
export function invalididentitypublickeydataerror_message(a: number, b: number): void;
export function invalididentitypublickeydataerror_serialize(a: number, b: number): void;
export function __wbg_invalididentityerror_free(a: number): void;
export function invalididentityerror_getErrors(a: number, b: number): void;
export function invalididentityerror_getRawIdentity(a: number): number;
export function __wbg_identitypublickeywithwitness_free(a: number): void;
export function identitypublickeywithwitness_new(a: number, b: number): void;
export function identitypublickeywithwitness_getId(a: number): number;
export function identitypublickeywithwitness_setId(a: number, b: number): void;
export function identitypublickeywithwitness_getType(a: number): number;
export function identitypublickeywithwitness_setType(a: number, b: number, c: number): void;
export function identitypublickeywithwitness_setData(a: number, b: number, c: number, d: number): void;
export function identitypublickeywithwitness_getData(a: number): number;
export function identitypublickeywithwitness_setPurpose(a: number, b: number, c: number): void;
export function identitypublickeywithwitness_getPurpose(a: number): number;
export function identitypublickeywithwitness_setSecurityLevel(a: number, b: number, c: number): void;
export function identitypublickeywithwitness_getSecurityLevel(a: number): number;
export function identitypublickeywithwitness_setReadOnly(a: number, b: number): void;
export function identitypublickeywithwitness_isReadOnly(a: number): number;
export function identitypublickeywithwitness_setSignature(a: number, b: number, c: number): void;
export function identitypublickeywithwitness_getSignature(a: number, b: number): void;
export function identitypublickeywithwitness_hash(a: number, b: number): void;
export function identitypublickeywithwitness_isMaster(a: number): number;
export function identitypublickeywithwitness_toJSON(a: number, b: number): void;
export function identitypublickeywithwitness_toObject(a: number, b: number, c: number): void;
export function __wbg_documenttransitions_free(a: number): void;
export function documenttransitions_new(): number;
export function documenttransitions_addTransitionCreate(a: number, b: number): void;
export function documenttransitions_addTransitionReplace(a: number, b: number): void;
export function documenttransitions_addTransitionDelete(a: number, b: number): void;
export function __wbg_documentfactory_free(a: number): void;
export function documentfactory_new(a: number, b: number, c: number, d: number): number;
export function documentfactory_create(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function documentfactory_createStateTransition(a: number, b: number, c: number): void;
export function documentfactory_createFromObject(a: number, b: number, c: number): number;
export function documentfactory_createFromBuffer(a: number, b: number, c: number, d: number): number;
export function __wbg_publickeysvalidator_free(a: number): void;
export function publickeysvalidator_new(a: number, b: number): void;
export function publickeysvalidator_validateKeys(a: number, b: number, c: number): void;
export function publickeysvalidator_validatePublicKeyStructure(a: number, b: number, c: number): void;
export function publickeysvalidator_validateKeysInStateTransition(a: number, b: number, c: number): void;
export function __wbg_instantassetlockproofstructurevalidator_free(a: number): void;
export function instantassetlockproofstructurevalidator_new(a: number, b: number): void;
export function instantassetlockproofstructurevalidator_validate(a: number, b: number, c: number): number;
export function __wbg_uniqueindiceslimitreachederror_free(a: number): void;
export function uniqueindiceslimitreachederror_getDocumentType(a: number, b: number): void;
export function uniqueindiceslimitreachederror_getIndexLimit(a: number): number;
export function uniqueindiceslimitreachederror_getCode(a: number): number;
export function uniqueindiceslimitreachederror_message(a: number, b: number): void;
export function uniqueindiceslimitreachederror_serialize(a: number, b: number): void;
export function __wbg_datacontracthavenewuniqueindexerror_free(a: number): void;
export function datacontracthavenewuniqueindexerror_getDocumentType(a: number, b: number): void;
export function datacontracthavenewuniqueindexerror_getIndexName(a: number, b: number): void;
export function datacontracthavenewuniqueindexerror_getCode(a: number): number;
export function datacontracthavenewuniqueindexerror_message(a: number, b: number): void;
export function datacontracthavenewuniqueindexerror_serialize(a: number, b: number): void;
export function __wbg_datacontractinvalidindexdefinitionupdateerror_free(a: number): void;
export function datacontractinvalidindexdefinitionupdateerror_getDocumentType(a: number, b: number): void;
export function datacontractinvalidindexdefinitionupdateerror_getIndexName(a: number, b: number): void;
export function datacontractinvalidindexdefinitionupdateerror_getCode(a: number): number;
export function datacontractinvalidindexdefinitionupdateerror_message(a: number, b: number): void;
export function datacontractinvalidindexdefinitionupdateerror_serialize(a: number, b: number): void;
export function __wbg_datacontractuniqueindiceschangederror_free(a: number): void;
export function datacontractuniqueindiceschangederror_getDocumentType(a: number, b: number): void;
export function datacontractuniqueindiceschangederror_getIndexName(a: number, b: number): void;
export function datacontractuniqueindiceschangederror_getCode(a: number): number;
export function datacontractuniqueindiceschangederror_message(a: number, b: number): void;
export function datacontractuniqueindiceschangederror_serialize(a: number, b: number): void;
export function __wbg_invalididentifiererror_free(a: number): void;
export function invalididentifiererror_getIdentifierName(a: number, b: number): void;
export function invalididentifiererror_getIdentifierError(a: number, b: number): void;
export function invalididentifiererror_getCode(a: number): number;
export function invalididentifiererror_message(a: number, b: number): void;
export function invalididentifiererror_serialize(a: number, b: number): void;
export function __wbg_incompatibledatacontractschemaerror_free(a: number): void;
export function incompatibledatacontractschemaerror_getDataContractId(a: number): number;
export function incompatibledatacontractschemaerror_getOperation(a: number, b: number): void;
export function incompatibledatacontractschemaerror_getFieldPath(a: number, b: number): void;
export function incompatibledatacontractschemaerror_getCode(a: number): number;
export function incompatibledatacontractschemaerror_message(a: number, b: number): void;
export function incompatibledatacontractschemaerror_serialize(a: number, b: number): void;
export function __wbg_publickeyvalidationerror_free(a: number): void;
export function publickeyvalidationerror_message(a: number): number;
export function __wbg_refunds_free(a: number): void;
export function refunds_identifier(a: number): number;
export function refunds_credits_per_epoch(a: number): number;
export function refunds_toObject(a: number, b: number): void;
export function __wbg_protocolversionvalidator_free(a: number): void;
export function protocolversionvalidator_new(a: number, b: number): void;
export function protocolversionvalidator_validate(a: number, b: number, c: number): void;
export function __wbg_compatibleprotocolversionisnotdefinederror_free(a: number): void;
export function compatibleprotocolversionisnotdefinederror_getCurrentProtocolVersion(a: number): number;
export function __wbg_duplicateuniqueindexerror_free(a: number): void;
export function duplicateuniqueindexerror_getDocumentId(a: number): number;
export function duplicateuniqueindexerror_getDuplicatingProperties(a: number): number;
export function duplicateuniqueindexerror_getCode(a: number): number;
export function duplicateuniqueindexerror_message(a: number, b: number): void;
export function duplicateuniqueindexerror_serialize(a: number, b: number): void;
export function __wbg_assetlockproof_free(a: number): void;
export function assetlockproof_new(a: number, b: number): void;
export function assetlockproof_createIdentifier(a: number, b: number): void;
export function assetlockproof_toObject(a: number, b: number): void;
export function createAssetLockProofInstance(a: number, b: number): void;
export function validateAssetLockTransaction(a: number, b: number, c: number, d: number, e: number): number;
export function fetchAssetLockTransactionOutput(a: number, b: number, c: number): number;
export function fetchAssetLockPublicKeyHash(a: number, b: number, c: number): number;
export function __wbg_statetransitionexecutioncontext_free(a: number): void;
export function statetransitionexecutioncontext_new(): number;
export function statetransitionexecutioncontext_enableDryRun(a: number): void;
export function statetransitionexecutioncontext_disableDryRun(a: number): void;
export function statetransitionexecutioncontext_isDryRun(a: number): number;
export function statetransitionexecutioncontext_addOperation(a: number, b: number, c: number): void;
export function statetransitionexecutioncontext_getOperations(a: number, b: number): void;
export function statetransitionexecutioncontext_clearDryOperations(a: number): void;
export function generateTemporaryEcdsaPrivateKey(): number;
export function __wbg_chainassetlockproof_free(a: number): void;
export function chainassetlockproof_new(a: number, b: number): void;
export function chainassetlockproof_getType(a: number): number;
export function chainassetlockproof_getCoreChainLockedHeight(a: number): number;
export function chainassetlockproof_setCoreChainLockedHeight(a: number, b: number): void;
export function chainassetlockproof_getOutPoint(a: number): number;
export function chainassetlockproof_setOutPoint(a: number, b: number, c: number, d: number): void;
export function chainassetlockproof_toJSON(a: number, b: number): void;
export function chainassetlockproof_toObject(a: number, b: number): void;
export function chainassetlockproof_createIdentifier(a: number, b: number): void;
export function __wbg_datacontractvalidator_free(a: number): void;
export function datacontractvalidator_new(): number;
export function datacontractvalidator_validate(a: number, b: number, c: number): void;
export function __wbg_datacontractfactory_free(a: number): void;
export function datacontractfactory_new(a: number, b: number, c: number): number;
export function datacontractfactory_create(a: number, b: number, c: number, d: number, e: number): void;
export function datacontractfactory_createFromObject(a: number, b: number, c: number): number;
export function datacontractfactory_createFromBuffer(a: number, b: number, c: number, d: number): number;
export function datacontractfactory_createDataContractCreateTransition(a: number, b: number): number;
export function __wbg_invalidassetlockprooftransactionheighterror_free(a: number): void;
export function invalidassetlockprooftransactionheighterror_getProofCoreChainLockedHeight(a: number): number;
export function invalidassetlockprooftransactionheighterror_getTransactionHeight(a: number, b: number): void;
export function invalidassetlockprooftransactionheighterror_getCode(a: number): number;
export function invalidassetlockprooftransactionheighterror_message(a: number, b: number): void;
export function invalidassetlockprooftransactionheighterror_serialize(a: number, b: number): void;
export function __wbg_statetransitionmaxsizeexceedederror_free(a: number): void;
export function statetransitionmaxsizeexceedederror_getActualSizeKBytes(a: number): number;
export function statetransitionmaxsizeexceedederror_getMaxSizeKBytes(a: number): number;
export function statetransitionmaxsizeexceedederror_getCode(a: number): number;
export function statetransitionmaxsizeexceedederror_message(a: number, b: number): void;
export function statetransitionmaxsizeexceedederror_serialize(a: number, b: number): void;
export function __wbg_feeresult_free(a: number): void;
export function feeresult_new(): number;
export function feeresult_storageFee(a: number): number;
export function feeresult_processingFee(a: number): number;
export function feeresult_feeRefunds(a: number): number;
export function feeresult_totalRefunds(a: number): number;
export function feeresult_desiredAmount(a: number): number;
export function feeresult_requiredAmount(a: number): number;
export function feeresult_set_storageFee(a: number, b: number, c: number): void;
export function feeresult_set_processingFee(a: number, b: number, c: number): void;
export function feeresult_set_feeRefunds(a: number, b: number, c: number): void;
export function feeresult_set_desiredAmount(a: number, b: number, c: number): void;
export function feeresult_set_requiredAmount(a: number, b: number, c: number): void;
export function feeresult_set_totalRefunds(a: number, b: number, c: number): void;
export function __wbg_missingpublickeyerror_free(a: number): void;
export function missingpublickeyerror_getPublicKeyId(a: number): number;
export function missingpublickeyerror_getCode(a: number): number;
export function missingpublickeyerror_message(a: number, b: number): void;
export function missingpublickeyerror_serialize(a: number, b: number): void;
export function __wbg_invalididentitypublickeyiderror_free(a: number): void;
export function invalididentitypublickeyiderror_getId(a: number): number;
export function invalididentitypublickeyiderror_getCode(a: number): number;
export function invalididentitypublickeyiderror_message(a: number, b: number): void;
export function invalididentitypublickeyiderror_serialize(a: number, b: number): void;
export function __wbg_validationresult_free(a: number): void;
export function validationresult_new(a: number, b: number, c: number): void;
export function validationresult_errorsText(a: number, b: number): void;
export function validationresult_isValid(a: number): number;
export function validationresult_getErrors(a: number, b: number): void;
export function validationresult_getData(a: number): number;
export function validationresult_getFirstError(a: number): number;
export function validationresult_addError(a: number, b: number, c: number): void;
export function __wbg_protocolversionparsingerror_free(a: number): void;
export function protocolversionparsingerror_new(a: number, b: number): number;
export function protocolversionparsingerror_getParsingError(a: number, b: number): void;
export function protocolversionparsingerror_getCode(a: number): number;
export function protocolversionparsingerror_serialize(a: number, b: number): void;
export function protocolversionparsingerror_message(a: number, b: number): void;
export function __wbg_invalidstatetransitiontypeerror_free(a: number): void;
export function invalidstatetransitiontypeerror_new(a: number): number;
export function invalidstatetransitiontypeerror_getType(a: number): number;
export function invalidstatetransitiontypeerror_getCode(a: number): number;
export function invalidstatetransitiontypeerror_message(a: number, b: number): void;
export function invalidstatetransitiontypeerror_serialize(a: number, b: number): void;
export function __wbg_nodocumentssuppliederror_free(a: number): void;
export function nodocumentssuppliederror_new(): number;
export function __wbg_invalidindexedpropertyconstrainterror_free(a: number): void;
export function invalidindexedpropertyconstrainterror_getDocumentType(a: number, b: number): void;
export function invalidindexedpropertyconstrainterror_getIndexName(a: number, b: number): void;
export function invalidindexedpropertyconstrainterror_getPropertyName(a: number, b: number): void;
export function invalidindexedpropertyconstrainterror_getConstraintName(a: number, b: number): void;
export function invalidindexedpropertyconstrainterror_getReason(a: number, b: number): void;
export function invalidindexedpropertyconstrainterror_getCode(a: number): number;
export function invalidindexedpropertyconstrainterror_message(a: number, b: number): void;
export function invalidindexedpropertyconstrainterror_serialize(a: number, b: number): void;
export function executeDataTriggers(a: number, b: number, c: number): number;
export function __wbg_mismatchowneridserror_free(a: number): void;
export function mismatchowneridserror_new(a: number, b: number): number;
export function mismatchowneridserror_getDocuments(a: number, b: number): void;
export function generateDocumentId(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_dummyfeesresult_free(a: number): void;
export function dummyfeesresult_storageFee(a: number): number;
export function dummyfeesresult_processingFee(a: number): number;
export function dummyfeesresult_feeRefunds(a: number): number;
export function dummyfeesresult_set_storageFee(a: number, b: number, c: number): void;
export function dummyfeesresult_set_processingFee(a: number, b: number, c: number): void;
export function dummyfeesresult_set_feeRefunds(a: number, b: number, c: number): void;
export function decodeProtocolEntity(a: number, b: number, c: number): void;
export function __wbg_invalidjsonschemareferror_free(a: number): void;
export function invalidjsonschemareferror_getRefError(a: number, b: number): void;
export function invalidjsonschemareferror_getCode(a: number): number;
export function invalidjsonschemareferror_message(a: number, b: number): void;
export function invalidjsonschemareferror_serialize(a: number, b: number): void;
export function __wbg_invaliddocumenttransitionactionerror_free(a: number): void;
export function invaliddocumenttransitionactionerror_getAction(a: number, b: number): void;
export function invaliddocumenttransitionactionerror_getCode(a: number): number;
export function invaliddocumenttransitionactionerror_message(a: number, b: number): void;
export function invaliddocumenttransitionactionerror_serialize(a: number, b: number): void;
export function __wbg_dashplatformprotocol_free(a: number): void;
export function dashplatformprotocol_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function dashplatformprotocol_data_contract(a: number): number;
export function dashplatformprotocol_document(a: number): number;
export function dashplatformprotocol_identity(a: number): number;
export function dashplatformprotocol_state_transition(a: number): number;
export function dashplatformprotocol_protocol_version(a: number): number;
export function dashplatformprotocol_getProtocolVersion(a: number): number;
export function dashplatformprotocol_setProtocolVersion(a: number, b: number, c: number): void;
export function dashplatformprotocol_setStateRepository(a: number, b: number, c: number): void;
export function dashplatformprotocol_getStateRepository(a: number): number;
export function fetchExtendedDocuments(a: number, b: number, c: number): number;
export function validateStateTransitionIdentitySignature(a: number, b: number, c: number): number;
export function __wbg_instantassetlockproof_free(a: number): void;
export function instantassetlockproof_new(a: number, b: number): void;
export function instantassetlockproof_getType(a: number): number;
export function instantassetlockproof_getOutputIndex(a: number): number;
export function instantassetlockproof_getOutPoint(a: number): number;
export function instantassetlockproof_getOutput(a: number, b: number): void;
export function instantassetlockproof_createIdentifier(a: number, b: number): void;
export function instantassetlockproof_getInstantLock(a: number): number;
export function instantassetlockproof_getTransaction(a: number): number;
export function instantassetlockproof_toObject(a: number, b: number): void;
export function instantassetlockproof_toJSON(a: number, b: number): void;
export function __wbg_invalididentityassetlocktransactionerror_free(a: number): void;
export function invalididentityassetlocktransactionerror_getErrorMessage(a: number, b: number): void;
export function invalididentityassetlocktransactionerror_getCode(a: number): number;
export function invalididentityassetlocktransactionerror_message(a: number, b: number): void;
export function invalididentityassetlocktransactionerror_serialize(a: number, b: number): void;
export function __wbg_jsonschemacompilationerror_free(a: number): void;
export function jsonschemacompilationerror_getError(a: number, b: number): void;
export function jsonschemacompilationerror_getCode(a: number): number;
export function jsonschemacompilationerror_message(a: number, b: number): void;
export function jsonschemacompilationerror_serialize(a: number, b: number): void;
export function __wbg_statetransitionfacade_free(a: number): void;
export function statetransitionfacade_createFromObject(a: number, b: number, c: number): number;
export function statetransitionfacade_createFromBuffer(a: number, b: number, c: number, d: number): number;
export function statetransitionfacade_validate(a: number, b: number, c: number): number;
export function statetransitionfacade_validateBasic(a: number, b: number): number;
export function statetransitionfacade_validateSignature(a: number, b: number): number;
export function statetransitionfacade_validateFee(a: number, b: number): number;
export function statetransitionfacade_validateState(a: number, b: number): number;
export function statetransitionfacade_apply(a: number, b: number): number;
export function __wbg_identitycreatetransition_free(a: number): void;
export function identitycreatetransition_new(a: number, b: number): void;
export function identitycreatetransition_setAssetLockProof(a: number, b: number, c: number): void;
export function identitycreatetransition_assetLockProof(a: number): number;
export function identitycreatetransition_getAssetLockProof(a: number): number;
export function identitycreatetransition_setPublicKeys(a: number, b: number, c: number, d: number): void;
export function identitycreatetransition_addPublicKeys(a: number, b: number, c: number, d: number): void;
export function identitycreatetransition_getPublicKeys(a: number, b: number): void;
export function identitycreatetransition_publicKeys(a: number, b: number): void;
export function identitycreatetransition_getType(a: number): number;
export function identitycreatetransition_identityId(a: number): number;
export function identitycreatetransition_getIdentityId(a: number): number;
export function identitycreatetransition_getOwnerId(a: number): number;
export function identitycreatetransition_toObject(a: number, b: number, c: number): void;
export function identitycreatetransition_toBuffer(a: number, b: number, c: number): void;
export function identitycreatetransition_toJSON(a: number, b: number): void;
export function identitycreatetransition_getModifiedDataIds(a: number, b: number): void;
export function identitycreatetransition_isDataContractStateTransition(a: number): number;
export function identitycreatetransition_isDocumentStateTransition(a: number): number;
export function identitycreatetransition_isIdentityStateTransition(a: number): number;
export function identitycreatetransition_setExecutionContext(a: number, b: number): void;
export function identitycreatetransition_getExecutionContext(a: number): number;
export function identitycreatetransition_signByPrivateKey(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function identitycreatetransition_getSignature(a: number): number;
export function identitycreatetransition_setSignature(a: number, b: number, c: number): void;
export function __wbg_invalididentitycreditwithdrawaltransitionoutputscripterror_free(a: number): void;
export function invalididentitycreditwithdrawaltransitionoutputscripterror_getCode(a: number): number;
export function invalididentitycreditwithdrawaltransitionoutputscripterror_message(a: number, b: number): void;
export function invalididentitycreditwithdrawaltransitionoutputscripterror_serialize(a: number, b: number): void;
export function __wbg_missingmasterpublickeyerror_free(a: number): void;
export function missingmasterpublickeyerror_getCode(a: number): number;
export function missingmasterpublickeyerror_message(a: number, b: number): void;
export function missingmasterpublickeyerror_serialize(a: number, b: number): void;
export function __wbg_documentnorevisionerror_free(a: number): void;
export function documentnorevisionerror_new(a: number): number;
export function documentnorevisionerror_getDocument(a: number): number;
export function __wbg_serializedobjectparsingerror_free(a: number): void;
export function serializedobjectparsingerror_getParsingError(a: number, b: number): void;
export function serializedobjectparsingerror_getCode(a: number): number;
export function serializedobjectparsingerror_message(a: number, b: number): void;
export function serializedobjectparsingerror_serialize(a: number, b: number): void;
export function __wbg_identityassetlocktransactionisnotfounderror_free(a: number): void;
export function identityassetlocktransactionisnotfounderror_getTransactionId(a: number): number;
export function identityassetlocktransactionisnotfounderror_getCode(a: number): number;
export function identityassetlocktransactionisnotfounderror_message(a: number, b: number): void;
export function identityassetlocktransactionisnotfounderror_serialize(a: number, b: number): void;
export function __wbg_valueerror_free(a: number): void;
export function valueerror_getMessage(a: number, b: number): void;
export function valueerror_getCode(a: number): number;
export function valueerror_message(a: number, b: number): void;
export function valueerror_serialize(a: number, b: number): void;
export function __wbg_invalidstatetransitionerror_free(a: number): void;
export function invalidstatetransitionerror_new_wasm(a: number, b: number, c: number, d: number): void;
export function invalidstatetransitionerror_getErrors(a: number, b: number): void;
export function invalidstatetransitionerror_getRawStateTransition(a: number): number;
export function __wbg_invalidactionerror_free(a: number): void;
export function invalidactionterror_new(a: number): number;
export function __wbg_applydatacontractcreatetransition_free(a: number): void;
export function applydatacontractcreatetransition_new(a: number): number;
export function applydatacontractcreatetransition_applyDataContractCreateTransition(a: number, b: number): number;
export function __wbg_applydatacontractupdatetransition_free(a: number): void;
export function applydatacontractupdatetransition_new(a: number): number;
export function applydatacontractupdatetransition_applyDataContractUpdateTransition(a: number, b: number): number;
export function __wbg_identitycreatetransitionstatevalidator_free(a: number): void;
export function identitycreatetransitionstatevalidator_new(a: number): number;
export function identitycreatetransitionstatevalidator_validate(a: number, b: number): number;
export function __wbg_datacontractnotpresenterror_free(a: number): void;
export function datacontractnotpresenterror_getDataContractId(a: number): number;
export function datacontractnotpresenterror_getCode(a: number): number;
export function datacontractnotpresenterror_message(a: number, b: number): void;
export function datacontractnotpresenterror_serialize(a: number, b: number): void;
export function __wbg_documentalreadypresenterror_free(a: number): void;
export function documentalreadypresenterror_getDocumentId(a: number): number;
export function documentalreadypresenterror_getCode(a: number): number;
export function documentalreadypresenterror_message(a: number, b: number): void;
export function documentalreadypresenterror_serialize(a: number, b: number): void;
export function __wbg_identityfacade_free(a: number): void;
export function identityfacade_create(a: number, b: number, c: number, d: number): void;
export function identityfacade_createFromObject(a: number, b: number, c: number, d: number): void;
export function identityfacade_createFromBuffer(a: number, b: number, c: number, d: number, e: number): void;
export function identityfacade_validate(a: number, b: number, c: number): void;
export function identityfacade_createInstantAssetLockProof(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function identityfacade_createChainAssetLockProof(a: number, b: number, c: number, d: number, e: number): void;
export function identityfacade_createIdentityCreateTransition(a: number, b: number, c: number): void;
export function identityfacade_createIdentityTopUpTransition(a: number, b: number, c: number, d: number): void;
export function identityfacade_createIdentityUpdateTransition(a: number, b: number, c: number, d: number): void;
export function __wbg_nonconsensuserrorwasm_free(a: number): void;
export function __wbg_inconsistentcompoundindexdataerror_free(a: number): void;
export function inconsistentcompoundindexdataerror_getIndexedProperties(a: number): number;
export function inconsistentcompoundindexdataerror_getDocumentType(a: number, b: number): void;
export function inconsistentcompoundindexdataerror_getCode(a: number): number;
export function inconsistentcompoundindexdataerror_message(a: number, b: number): void;
export function inconsistentcompoundindexdataerror_serialize(a: number, b: number): void;
export function __wbg_invaliddocumenttransitioniderror_free(a: number): void;
export function invaliddocumenttransitioniderror_getExpectedId(a: number): number;
export function invaliddocumenttransitioniderror_getInvalidId(a: number): number;
export function invaliddocumenttransitioniderror_getCode(a: number): number;
export function invaliddocumenttransitioniderror_message(a: number, b: number): void;
export function invaliddocumenttransitioniderror_serialize(a: number, b: number): void;
export function __wbg_identityassetlocktransactionoutpointalreadyexistserror_free(a: number): void;
export function identityassetlocktransactionoutpointalreadyexistserror_getOutputIndex(a: number): number;
export function identityassetlocktransactionoutpointalreadyexistserror_getTransactionId(a: number): number;
export function identityassetlocktransactionoutpointalreadyexistserror_getCode(a: number): number;
export function identityassetlocktransactionoutpointalreadyexistserror_message(a: number, b: number): void;
export function identityassetlocktransactionoutpointalreadyexistserror_serialize(a: number, b: number): void;
export function __wbg_datatriggerinvalidresulterror_free(a: number): void;
export function datatriggerinvalidresulterror_getDataContractId(a: number): number;
export function datatriggerinvalidresulterror_getDocumentId(a: number): number;
export function datatriggerinvalidresulterror_getCode(a: number): number;
export function datatriggerinvalidresulterror_message(a: number, b: number): void;
export function datatriggerinvalidresulterror_serialize(a: number, b: number): void;
export function __wbg_documentcreatetransition_free(a: number): void;
export function documentcreatetransition_from_raw_object(a: number, b: number, c: number): void;
export function documentcreatetransition_getEntropy(a: number, b: number): void;
export function documentcreatetransition_getCreatedAt(a: number): number;
export function documentcreatetransition_getUpdatedAt(a: number): number;
export function documentcreatetransition_getRevision(a: number): number;
export function documentcreatetransition_getId(a: number): number;
export function documentcreatetransition_getType(a: number, b: number): void;
export function documentcreatetransition_getAction(a: number): number;
export function documentcreatetransition_getDataContract(a: number): number;
export function documentcreatetransition_getDataContractId(a: number): number;
export function documentcreatetransition_get(a: number, b: number, c: number, d: number): void;
export function documentcreatetransition_toObject(a: number, b: number, c: number): void;
export function documentcreatetransition_toJSON(a: number, b: number): void;
export function documentcreatetransition_getData(a: number, b: number): void;
export function __wbg_datacontract_free(a: number): void;
export function datacontract_new(a: number, b: number): void;
export function datacontract_getProtocolVersion(a: number): number;
export function datacontract_getId(a: number): number;
export function datacontract_setId(a: number, b: number, c: number): void;
export function datacontract_getOwnerId(a: number): number;
export function datacontract_getVersion(a: number): number;
export function datacontract_setVersion(a: number, b: number): void;
export function datacontract_incrementVersion(a: number): void;
export function datacontract_getJsonSchemaId(a: number, b: number): void;
export function datacontract_setJsonMetaSchema(a: number, b: number, c: number): void;
export function datacontract_getJsonMetaSchema(a: number, b: number): void;
export function datacontract_setDocuments(a: number, b: number, c: number): void;
export function datacontract_getDocuments(a: number, b: number): void;
export function datacontract_isDocumentDefined(a: number, b: number, c: number): number;
export function datacontract_setDocumentSchema(a: number, b: number, c: number, d: number, e: number): void;
export function datacontract_getDocumentSchema(a: number, b: number, c: number, d: number): void;
export function datacontract_getDocumentSchemaRef(a: number, b: number, c: number, d: number): void;
export function datacontract_setDefinitions(a: number, b: number, c: number): void;
export function datacontract_getDefinitions(a: number, b: number): void;
export function datacontract_setEntropy(a: number, b: number, c: number, d: number): void;
export function datacontract_getEntropy(a: number): number;
export function datacontract_getBinaryProperties(a: number, b: number, c: number, d: number): void;
export function datacontract_getMetadata(a: number): number;
export function datacontract_setMetadata(a: number, b: number, c: number): void;
export function datacontract_toObject(a: number, b: number): void;
export function datacontract_toJSON(a: number, b: number): void;
export function datacontract_toBuffer(a: number, b: number): void;
export function datacontract_hash(a: number, b: number): void;
export function datacontract_from(a: number, b: number): void;
export function datacontract_fromBuffer(a: number, b: number, c: number): void;
export function datacontract_clone(a: number): number;
export function __wbg_datacontractdefaults_free(a: number): void;
export function datacontractdefaults_get_default_schema(a: number): void;
export function __wbg_documentsbatchtransition_free(a: number): void;
export function documentsbatchtransition_from_raw_object(a: number, b: number, c: number): void;
export function documentsbatchtransition_getType(a: number): number;
export function documentsbatchtransition_getOwnerId(a: number): number;
export function documentsbatchtransition_getTransitions(a: number): number;
export function documentsbatchtransition_setTransitions(a: number, b: number, c: number): void;
export function documentsbatchtransition_toJSON(a: number, b: number): void;
export function documentsbatchtransition_toObject(a: number, b: number, c: number): void;
export function documentsbatchtransition_getModifiedDataIds(a: number): number;
export function documentsbatchtransition_getSignaturePublicKeyId(a: number, b: number): void;
export function documentsbatchtransition_sign(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function documentsbatchtransition_verifyPublicKeyLevelAndPurpose(a: number, b: number, c: number): void;
export function documentsbatchtransition_verifyPublicKeyIsEnabled(a: number, b: number, c: number): void;
export function documentsbatchtransition_verifySignature(a: number, b: number, c: number, d: number): void;
export function documentsbatchtransition_setSignaturePublicKey(a: number, b: number): void;
export function documentsbatchtransition_getKeySecurityLevelRequirement(a: number): number;
export function documentsbatchtransition_getProtocolVersion(a: number): number;
export function documentsbatchtransition_getSignature(a: number, b: number): void;
export function documentsbatchtransition_setSignature(a: number, b: number, c: number): void;
export function documentsbatchtransition_isDocumentStateTransition(a: number): number;
export function documentsbatchtransition_isDataContractStateTransition(a: number): number;
export function documentsbatchtransition_isIdentityStateTransition(a: number): number;
export function documentsbatchtransition_setExecutionContext(a: number, b: number): void;
export function documentsbatchtransition_getExecutionContext(a: number): number;
export function documentsbatchtransition_toBuffer(a: number, b: number, c: number): void;
export function documentsbatchtransition_hash(a: number, b: number, c: number): void;
export function __wbg_fetchandvalidatedatacontractfactory_free(a: number): void;
export function fetchandvalidatedatacontractfactory_new(a: number): number;
export function fetchandvalidatedatacontractfactory_validate(a: number, b: number): number;
export function fetchAndValidateDataContract(a: number, b: number): number;
export function __wbg_jsonschemaerror_free(a: number): void;
export function jsonschemaerror_getKeyword(a: number, b: number): void;
export function jsonschemaerror_getInstancePath(a: number, b: number): void;
export function jsonschemaerror_getSchemaPath(a: number, b: number): void;
export function jsonschemaerror_getPropertyName(a: number, b: number): void;
export function jsonschemaerror_getParams(a: number, b: number): void;
export function jsonschemaerror_getCode(a: number): number;
export function jsonschemaerror_toString(a: number, b: number): void;
export function jsonschemaerror_message(a: number, b: number): void;
export function jsonschemaerror_serialize(a: number, b: number): void;
export function __wbg_maxidentitypublickeylimitreachederror_free(a: number): void;
export function maxidentitypublickeylimitreachederror_getMaxItems(a: number): number;
export function maxidentitypublickeylimitreachederror_getCode(a: number): number;
export function maxidentitypublickeylimitreachederror_message(a: number, b: number): void;
export function maxidentitypublickeylimitreachederror_serialize(a: number, b: number): void;
export function findDuplicatesById(a: number, b: number): void;
export function validatePartialCompoundIndices(a: number, b: number, c: number): void;
export function validateDocumentsBatchTransitionBasic(a: number, b: number, c: number, d: number): number;
export function __wbg_datacontractnotpresentnotconsensuserror_free(a: number): void;
export function datacontractnotpresentnotconsensuserror_getDataContractId(a: number): number;
export function __wbg_identitycreatetransitionbasicvalidator_free(a: number): void;
export function identitycreatetransitionbasicvalidator_new(a: number, b: number, c: number): void;
export function identitycreatetransitionbasicvalidator_validate(a: number, b: number, c: number): number;
export function __wbg_missingdatacontractiderror_free(a: number): void;
export function missingdatacontractiderror_getCode(a: number): number;
export function missingdatacontractiderror_message(a: number, b: number): void;
export function missingdatacontractiderror_serialize(a: number, b: number): void;
export function __wbg_missingdocumenttransitionactionerror_free(a: number): void;
export function missingdocumenttransitionactionerror_getCode(a: number): number;
export function missingdocumenttransitionactionerror_message(a: number, b: number): void;
export function missingdocumenttransitionactionerror_serialize(a: number, b: number): void;
export function __wbg_missingdocumenttransitiontypeerror_free(a: number): void;
export function missingdocumenttransitiontypeerror_getCode(a: number): number;
export function missingdocumenttransitiontypeerror_message(a: number, b: number): void;
export function missingdocumenttransitiontypeerror_serialize(a: number, b: number): void;
export function __wbg_missingdocumenttypeerror_free(a: number): void;
export function missingdocumenttypeerror_getCode(a: number): number;
export function missingdocumenttypeerror_message(a: number, b: number): void;
export function missingdocumenttypeerror_serialize(a: number, b: number): void;
export function __wbg_metadata_free(a: number): void;
export function metadata_new(a: number, b: number): void;
export function metadata_from(a: number, b: number): void;
export function metadata_toJSON(a: number): number;
export function metadata_toObject(a: number): number;
export function metadata_getBlockHeight(a: number): number;
export function metadata_getCoreChainLockedHeight(a: number): number;
export function metadata_getTimeMs(a: number): number;
export function metadata_getProtocolVersion(a: number): number;
export function __wbg_identitypublickey_free(a: number): void;
export function identitypublickey_new(a: number, b: number): void;
export function identitypublickey_getId(a: number): number;
export function identitypublickey_setId(a: number, b: number): void;
export function identitypublickey_getType(a: number): number;
export function identitypublickey_setType(a: number, b: number, c: number): void;
export function identitypublickey_setData(a: number, b: number, c: number, d: number): void;
export function identitypublickey_getData(a: number): number;
export function identitypublickey_setPurpose(a: number, b: number, c: number): void;
export function identitypublickey_getPurpose(a: number): number;
export function identitypublickey_setSecurityLevel(a: number, b: number, c: number): void;
export function identitypublickey_getSecurityLevel(a: number): number;
export function identitypublickey_setReadOnly(a: number, b: number): void;
export function identitypublickey_isReadOnly(a: number): number;
export function identitypublickey_setDisabledAt(a: number, b: number): void;
export function identitypublickey_getDisabledAt(a: number): number;
export function identitypublickey_hash(a: number, b: number): void;
export function identitypublickey_isMaster(a: number): number;
export function identitypublickey_toJSON(a: number, b: number): void;
export function identitypublickey_toObject(a: number, b: number): void;
export function __wbg_revisionabsenterror_free(a: number): void;
export function revisionabsenterror_new(a: number): number;
export function revisionabsenterror_getDocument(a: number): number;
export function deserializeConsensusError(a: number, b: number, c: number): void;
export function __wbg_indexproperty_free(a: number): void;
export function indexproperty_getName(a: number, b: number): void;
export function indexproperty_isAscending(a: number): number;
export function __wbg_indexdefinition_free(a: number): void;
export function indexdefinition_getName(a: number, b: number): void;
export function indexdefinition_getProperties(a: number, b: number): void;
export function indexdefinition_isUnique(a: number): number;
export function indexdefinition_toObject(a: number, b: number): void;
export function __wbg_documenttimestampwindowviolationerror_free(a: number): void;
export function documenttimestampwindowviolationerror_getDocumentId(a: number): number;
export function documenttimestampwindowviolationerror_getTimestampName(a: number, b: number): void;
export function documenttimestampwindowviolationerror_getTimestamp(a: number): number;
export function documenttimestampwindowviolationerror_getTimeWindowStart(a: number): number;
export function documenttimestampwindowviolationerror_getTimeWindowEnd(a: number): number;
export function documenttimestampwindowviolationerror_getCode(a: number): number;
export function documenttimestampwindowviolationerror_message(a: number, b: number): void;
export function documenttimestampwindowviolationerror_serialize(a: number, b: number): void;
export function __wbg_identitytopuptransition_free(a: number): void;
export function identitytopuptransition_new(a: number, b: number): void;
export function identitytopuptransition_setAssetLockProof(a: number, b: number, c: number): void;
export function identitytopuptransition_assetLockProof(a: number): number;
export function identitytopuptransition_getAssetLockProof(a: number): number;
export function identitytopuptransition_getType(a: number): number;
export function identitytopuptransition_identityId(a: number): number;
export function identitytopuptransition_getIdentityId(a: number): number;
export function identitytopuptransition_getOwnerId(a: number): number;
export function identitytopuptransition_toObject(a: number, b: number, c: number): void;
export function identitytopuptransition_toBuffer(a: number, b: number, c: number): void;
export function identitytopuptransition_toJSON(a: number, b: number): void;
export function identitytopuptransition_getModifiedDataIds(a: number, b: number): void;
export function identitytopuptransition_isDataContractStateTransition(a: number): number;
export function identitytopuptransition_isDocumentStateTransition(a: number): number;
export function identitytopuptransition_isIdentityStateTransition(a: number): number;
export function identitytopuptransition_setExecutionContext(a: number, b: number): void;
export function identitytopuptransition_getExecutionContext(a: number): number;
export function identitytopuptransition_signByPrivateKey(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function identitytopuptransition_getSignature(a: number): number;
export function identitytopuptransition_setSignature(a: number, b: number, c: number): void;
export function __wbg_duplicatedocumenttransitionswithidserror_free(a: number): void;
export function duplicatedocumenttransitionswithidserror_getDocumentTransitionReferences(a: number): number;
export function duplicatedocumenttransitionswithidserror_getCode(a: number): number;
export function duplicatedocumenttransitionswithidserror_message(a: number, b: number): void;
export function duplicatedocumenttransitionswithidserror_serialize(a: number, b: number): void;
export function __wbg_identityupdatetransitionbasicvalidator_free(a: number): void;
export function identityupdatetransitionbasicvalidator_new(a: number, b: number): void;
export function identityupdatetransitionbasicvalidator_validate(a: number, b: number, c: number): void;
export function __wbg_identityassetlocktransactionoutputnotfounderror_free(a: number): void;
export function identityassetlocktransactionoutputnotfounderror_getOutputIndex(a: number): number;
export function identityassetlocktransactionoutputnotfounderror_getCode(a: number): number;
export function identityassetlocktransactionoutputnotfounderror_message(a: number, b: number): void;
export function identityassetlocktransactionoutputnotfounderror_serialize(a: number, b: number): void;
export function __wbg_invalidassetlocktransactionoutputreturnsizeerror_free(a: number): void;
export function invalidassetlocktransactionoutputreturnsizeerror_getOutputIndex(a: number): number;
export function invalidassetlocktransactionoutputreturnsizeerror_getCode(a: number): number;
export function invalidassetlocktransactionoutputreturnsizeerror_message(a: number, b: number): void;
export function invalidassetlocktransactionoutputreturnsizeerror_serialize(a: number, b: number): void;
export function __wbg_invalididentitykeysignatureerror_free(a: number): void;
export function invalididentitykeysignatureerror_getPublicKeyId(a: number): number;
export function invalididentitykeysignatureerror_getCode(a: number): number;
export function invalididentitykeysignatureerror_message(a: number, b: number): void;
export function invalididentitykeysignatureerror_serialize(a: number, b: number): void;
export function __wbg_publickeyisdisablederror_free(a: number): void;
export function publickeyisdisablederror_getPublicKeyId(a: number): number;
export function publickeyisdisablederror_getCode(a: number): number;
export function publickeyisdisablederror_message(a: number, b: number): void;
export function publickeyisdisablederror_serialize(a: number, b: number): void;
export function validateDataContractUpdateTransitionState(a: number, b: number): number;
export function validateIndicesAreBackwardCompatible(a: number, b: number, c: number): void;
export function validateDataContractUpdateTransitionBasic(a: number, b: number, c: number): number;
export function __wbg_invaliddocumenterror_free(a: number): void;
export function invaliddocumenterror_new(a: number, b: number, c: number): number;
export function invaliddocumenterror_getErrors(a: number, b: number): void;
export function invaliddocumenterror_getRawDocument(a: number): number;
export function __wbg_assetlocktransactionisnotfounderror_free(a: number): void;
export function assetlocktransactionisnotfounderror_getTransactionId(a: number): number;
export function __wbg_identityupdatetransitionstatevalidator_free(a: number): void;
export function identityupdatetransitionstatevalidator_new(a: number, b: number): void;
export function identityupdatetransitionstatevalidator_validate(a: number, b: number): number;
export function __wbg_invalidactionnameerror_free(a: number): void;
export function invalidactionnameerror_new(a: number, b: number): number;
export function invalidactionnameerror_getActions(a: number, b: number): void;
export function __wbg_documentowneridmismatcherror_free(a: number): void;
export function documentowneridmismatcherror_getDocumentId(a: number): number;
export function documentowneridmismatcherror_getDocumentOwnerId(a: number): number;
export function documentowneridmismatcherror_getExistingDocumentOwnerId(a: number): number;
export function documentowneridmismatcherror_getCode(a: number): number;
export function documentowneridmismatcherror_message(a: number, b: number): void;
export function documentowneridmismatcherror_serialize(a: number, b: number): void;
export function calculateStateTransitionFee(a: number, b: number): void;
export function __wbg_identityupdatetransition_free(a: number): void;
export function identityupdatetransition_new(a: number, b: number): void;
export function identityupdatetransition_setPublicKeysToAdd(a: number, b: number, c: number, d: number): void;
export function identityupdatetransition_getPublicKeysToAdd(a: number, b: number): void;
export function identityupdatetransition_addPublicKeys(a: number, b: number): void;
export function identityupdatetransition_getPublicKeyIdsToDisable(a: number, b: number): void;
export function identityupdatetransition_setPublicKeyIdsToDisable(a: number, b: number, c: number): void;
export function identityupdatetransition_getPublicKeysDisabledAt(a: number): number;
export function identityupdatetransition_setPublicKeysDisabledAt(a: number, b: number): void;
export function identityupdatetransition_getType(a: number): number;
export function identityupdatetransition_identityId(a: number): number;
export function identityupdatetransition_getIdentityId(a: number): number;
export function identityupdatetransition_setIdentityId(a: number, b: number): void;
export function identityupdatetransition_getOwnerId(a: number): number;
export function identityupdatetransition_toObject(a: number, b: number, c: number): void;
export function identityupdatetransition_toBuffer(a: number, b: number, c: number): void;
export function identityupdatetransition_toJSON(a: number, b: number): void;
export function identityupdatetransition_getModifiedDataIds(a: number, b: number): void;
export function identityupdatetransition_isDataContractStateTransition(a: number): number;
export function identityupdatetransition_isDocumentStateTransition(a: number): number;
export function identityupdatetransition_isIdentityStateTransition(a: number): number;
export function identityupdatetransition_setExecutionContext(a: number, b: number): void;
export function identityupdatetransition_getExecutionContext(a: number): number;
export function identityupdatetransition_signByPrivateKey(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function identityupdatetransition_setSignaturePublicKeyId(a: number, b: number, c: number): void;
export function identityupdatetransition_getSignature(a: number): number;
export function identityupdatetransition_setSignature(a: number, b: number, c: number): void;
export function identityupdatetransition_getRevision(a: number): number;
export function identityupdatetransition_setRevision(a: number, b: number): void;
export function identityupdatetransition_sign(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function identityupdatetransition_verifySignature(a: number, b: number, c: number, d: number): void;
export function __wbg_document_free(a: number): void;
export function document_new(a: number, b: number, c: number, d: number): void;
export function document_getId(a: number): number;
export function document_setId(a: number, b: number): void;
export function document_setOwnerId(a: number, b: number): void;
export function document_getOwnerId(a: number): number;
export function document_setRevision(a: number, b: number, c: number): void;
export function document_getRevision(a: number, b: number): void;
export function document_setData(a: number, b: number, c: number): void;
export function document_getData(a: number, b: number): void;
export function document_set(a: number, b: number, c: number, d: number, e: number): void;
export function document_get(a: number, b: number, c: number, d: number): void;
export function document_setCreatedAt(a: number, b: number): void;
export function document_setUpdatedAt(a: number, b: number): void;
export function document_getCreatedAt(a: number): number;
export function document_getUpdatedAt(a: number): number;
export function document_toObject(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function document_toJSON(a: number, b: number): void;
export function document_toBuffer(a: number, b: number): void;
export function document_hash(a: number, b: number, c: number, d: number, e: number): void;
export function document_clone(a: number): number;
export function __wbg_duplicatedocumenttransitionswithindiceserror_free(a: number): void;
export function duplicatedocumenttransitionswithindiceserror_getDocumentTransitionReferences(a: number): number;
export function duplicatedocumenttransitionswithindiceserror_getCode(a: number): number;
export function duplicatedocumenttransitionswithindiceserror_message(a: number, b: number): void;
export function duplicatedocumenttransitionswithindiceserror_serialize(a: number, b: number): void;
export function __wbg_duplicatedidentitypublickeyerror_free(a: number): void;
export function duplicatedidentitypublickeyerror_getDuplicatedPublicKeysIds(a: number): number;
export function duplicatedidentitypublickeyerror_getCode(a: number): number;
export function duplicatedidentitypublickeyerror_message(a: number, b: number): void;
export function duplicatedidentitypublickeyerror_serialize(a: number, b: number): void;
export function __wbg_duplicatedidentitypublickeyiderror_free(a: number): void;
export function duplicatedidentitypublickeyiderror_getDuplicatedIds(a: number): number;
export function duplicatedidentitypublickeyiderror_getCode(a: number): number;
export function duplicatedidentitypublickeyiderror_message(a: number, b: number): void;
export function duplicatedidentitypublickeyiderror_serialize(a: number, b: number): void;
export function __wbg_duplicatedidentitypublickeyidstateerror_free(a: number): void;
export function duplicatedidentitypublickeyidstateerror_getDuplicatedIds(a: number): number;
export function duplicatedidentitypublickeyidstateerror_getCode(a: number): number;
export function duplicatedidentitypublickeyidstateerror_message(a: number, b: number): void;
export function duplicatedidentitypublickeyidstateerror_serialize(a: number, b: number): void;
export function __wbg_identitynotfounderror_free(a: number): void;
export function identitynotfounderror_new(a: number): number;
export function identitynotfounderror_getIdentityId(a: number): number;
export function identitynotfounderror_getCode(a: number): number;
export function identitynotfounderror_message(a: number, b: number): void;
export function identitynotfounderror_serialize(a: number, b: number): void;
export function __wbg_identitytopuptransitionbasicvalidator_free(a: number): void;
export function identitytopuptransitionbasicvalidator_new(a: number, b: number): void;
export function identitytopuptransitionbasicvalidator_validate(a: number, b: number, c: number): number;
export function __wbg_missingstatetransitiontypeerror_free(a: number): void;
export function missingstatetransitiontypeerror_new(): number;
export function missingstatetransitiontypeerror_getCode(a: number): number;
export function missingstatetransitiontypeerror_message(a: number, b: number): void;
export function missingstatetransitiontypeerror_serialize(a: number, b: number): void;
export function __wbg_systempropertyindexalreadypresenterror_free(a: number): void;
export function systempropertyindexalreadypresenterror_getDocumentType(a: number, b: number): void;
export function systempropertyindexalreadypresenterror_getIndexName(a: number, b: number): void;
export function systempropertyindexalreadypresenterror_getPropertyName(a: number, b: number): void;
export function systempropertyindexalreadypresenterror_getCode(a: number): number;
export function systempropertyindexalreadypresenterror_message(a: number, b: number): void;
export function systempropertyindexalreadypresenterror_serialize(a: number, b: number): void;
export function __wbg_undefinedindexpropertyerror_free(a: number): void;
export function undefinedindexpropertyerror_getDocumentType(a: number, b: number): void;
export function undefinedindexpropertyerror_getIndexName(a: number, b: number): void;
export function undefinedindexpropertyerror_getPropertyName(a: number, b: number): void;
export function undefinedindexpropertyerror_getCode(a: number): number;
export function undefinedindexpropertyerror_message(a: number, b: number): void;
export function undefinedindexpropertyerror_serialize(a: number, b: number): void;
export function __wbg_documentnotfounderror_free(a: number): void;
export function documentnotfounderror_getDocumentId(a: number): number;
export function documentnotfounderror_getCode(a: number): number;
export function documentnotfounderror_message(a: number, b: number): void;
export function documentnotfounderror_serialize(a: number, b: number): void;
export function __wbg_documenttimestampsmismatcherror_free(a: number): void;
export function documenttimestampsmismatcherror_getDocumentId(a: number): number;
export function documenttimestampsmismatcherror_getCode(a: number): number;
export function documenttimestampsmismatcherror_message(a: number, b: number): void;
export function documenttimestampsmismatcherror_serialize(a: number, b: number): void;
export function __wbg_operation_free(a: number): void;
export function __wbg_precalculatedoperation_free(a: number): void;
export function precalculatedoperation_new(a: number, b: number, c: number, d: number): void;
export function precalculatedoperation_fromFee(a: number): number;
export function precalculatedoperation_getProcessingCost(a: number, b: number): void;
export function precalculatedoperation_getStorageCost(a: number, b: number): void;
export function precalculatedoperation_refunds(a: number): number;
export function precalculatedoperation_refunds_as_objects(a: number, b: number): void;
export function precalculatedoperation_toJSON(a: number, b: number): void;
export function __wbg_invaliddocumenttypeindatacontracterror_free(a: number): void;
export function invaliddocumenttypeindatacontracterror_new(a: number, b: number, c: number): number;
export function invaliddocumenttypeindatacontracterror_getType(a: number, b: number): void;
export function invaliddocumenttypeindatacontracterror_getDataContractId(a: number): number;
export function __wbg_datacontractimmutablepropertiesupdateerror_free(a: number): void;
export function datacontractimmutablepropertiesupdateerror_getOperation(a: number, b: number): void;
export function datacontractimmutablepropertiesupdateerror_getFieldPath(a: number, b: number): void;
export function datacontractimmutablepropertiesupdateerror_getCode(a: number): number;
export function datacontractimmutablepropertiesupdateerror_message(a: number, b: number): void;
export function datacontractimmutablepropertiesupdateerror_serialize(a: number, b: number): void;
export function __wbg_duplicateindexerror_free(a: number): void;
export function duplicateindexerror_getDocumentType(a: number, b: number): void;
export function duplicateindexerror_getIndexName(a: number, b: number): void;
export function duplicateindexerror_getCode(a: number): number;
export function duplicateindexerror_message(a: number, b: number): void;
export function duplicateindexerror_serialize(a: number, b: number): void;
export function __wbg_invalidcompoundindexerror_free(a: number): void;
export function invalidcompoundindexerror_getDocumentType(a: number, b: number): void;
export function invalidcompoundindexerror_getIndexName(a: number, b: number): void;
export function invalidcompoundindexerror_getCode(a: number): number;
export function invalidcompoundindexerror_message(a: number, b: number): void;
export function invalidcompoundindexerror_serialize(a: number, b: number): void;
export function __wbg_invaliddatacontracterror_free(a: number): void;
export function invaliddatacontracterror_getErrors(a: number, b: number): void;
export function invaliddatacontracterror_getRawDataContract(a: number): number;
export function invaliddatacontracterror_getMessage(a: number, b: number): void;
export function __wbg_invalididentityrevisionerror_free(a: number): void;
export function invalididentityrevisionerror_getIdentityId(a: number): number;
export function invalididentityrevisionerror_getCurrentRevision(a: number): number;
export function invalididentityrevisionerror_getCode(a: number): number;
export function invalididentityrevisionerror_message(a: number, b: number): void;
export function invalididentityrevisionerror_serialize(a: number, b: number): void;
export function __wbg_documentfacade_free(a: number): void;
export function documentfacade_new(a: number, b: number, c: number): number;
export function documentfacade_create(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function documentfacade_createFromObject(a: number, b: number, c: number): number;
export function documentfacade_createFromBuffer(a: number, b: number, c: number, d: number): number;
export function documentfacade_createStateTransition(a: number, b: number, c: number): void;
export function documentfacade_validate(a: number, b: number): number;
export function documentfacade_validate_raw_document(a: number, b: number): number;
export function __wbg_invalididentityassetlocktransactionoutputerror_free(a: number): void;
export function invalididentityassetlocktransactionoutputerror_getOutputIndex(a: number): number;
export function invalididentityassetlocktransactionoutputerror_getCode(a: number): number;
export function invalididentityassetlocktransactionoutputerror_message(a: number, b: number): void;
export function invalididentityassetlocktransactionoutputerror_serialize(a: number, b: number): void;
export function __wbg_invalididentitycreditwithdrawaltransitioncorefeeerror_free(a: number): void;
export function invalididentitycreditwithdrawaltransitioncorefeeerror_getCoreFee(a: number): number;
export function invalididentitycreditwithdrawaltransitioncorefeeerror_getCode(a: number): number;
export function invalididentitycreditwithdrawaltransitioncorefeeerror_message(a: number, b: number): void;
export function invalididentitycreditwithdrawaltransitioncorefeeerror_serialize(a: number, b: number): void;
export function __wbg_notimplementedidentitycreditwithdrawaltransitionpoolingerror_free(a: number): void;
export function notimplementedidentitycreditwithdrawaltransitionpoolingerror_getPooling(a: number): number;
export function notimplementedidentitycreditwithdrawaltransitionpoolingerror_getCode(a: number): number;
export function notimplementedidentitycreditwithdrawaltransitionpoolingerror_message(a: number, b: number): void;
export function notimplementedidentitycreditwithdrawaltransitionpoolingerror_serialize(a: number, b: number): void;
export function __wbg_identitypublickeyisdisablederror_free(a: number): void;
export function identitypublickeyisdisablederror_getPublicKeyIndex(a: number): number;
export function identitypublickeyisdisablederror_getCode(a: number): number;
export function identitypublickeyisdisablederror_message(a: number, b: number): void;
export function identitypublickeyisdisablederror_serialize(a: number, b: number): void;
export function __wbg_datatriggerexecutioncontext_free(a: number): void;
export function datatriggerexecutioncontext_new(a: number, b: number, c: number, d: number, e: number): void;
export function datatriggerexecutioncontext_ownerId(a: number): number;
export function datatriggerexecutioncontext_set_ownerId(a: number, b: number, c: number): void;
export function datatriggerexecutioncontext_dataContract(a: number): number;
export function datatriggerexecutioncontext_set_dataContract(a: number, b: number): void;
export function datatriggerexecutioncontext_stateTransitionExecutionContext(a: number): number;
export function datatriggerexecutioncontext_set_statTransitionExecutionContext(a: number, b: number): void;
export function __wbg_documentdeletetransition_free(a: number): void;
export function documentdeletetransition_getAction(a: number): number;
export function documentdeletetransition_toObject(a: number, b: number, c: number): void;
export function documentdeletetransition_toJSON(a: number, b: number): void;
export function documentdeletetransition_getId(a: number): number;
export function documentdeletetransition_getType(a: number, b: number): void;
export function documentdeletetransition_getDataContract(a: number): number;
export function documentdeletetransition_getDataContractId(a: number): number;
export function documentdeletetransition_get(a: number, b: number, c: number, d: number): void;
export function __wbg_invaliddatacontractiderror_free(a: number): void;
export function invaliddatacontractiderror_getExpectedId(a: number): number;
export function invaliddatacontractiderror_getInvalidId(a: number): number;
export function invaliddatacontractiderror_getCode(a: number): number;
export function invaliddatacontractiderror_message(a: number, b: number): void;
export function invaliddatacontractiderror_serialize(a: number, b: number): void;
export function __wbg_identityassetlockprooflockedtransactionmismatcherror_free(a: number): void;
export function identityassetlockprooflockedtransactionmismatcherror_getInstantLockTransactionId(a: number): number;
export function identityassetlockprooflockedtransactionmismatcherror_getAssetLockTransactionId(a: number): number;
export function identityassetlockprooflockedtransactionmismatcherror_getCode(a: number): number;
export function identityassetlockprooflockedtransactionmismatcherror_message(a: number, b: number): void;
export function identityassetlockprooflockedtransactionmismatcherror_serialize(a: number, b: number): void;
export function calculateOperationFees(a: number, b: number): void;
export function __wbg_chainassetlockproofstructurevalidator_free(a: number): void;
export function chainassetlockproofstructurevalidator_new(a: number, b: number): void;
export function chainassetlockproofstructurevalidator_validate(a: number, b: number, c: number): number;
export function __wbg_invalidindexpropertytypeerror_free(a: number): void;
export function invalidindexpropertytypeerror_getDocumentType(a: number, b: number): void;
export function invalidindexpropertytypeerror_getIndexName(a: number, b: number): void;
export function invalidindexpropertytypeerror_getPropertyName(a: number, b: number): void;
export function invalidindexpropertytypeerror_getPropertyType(a: number, b: number): void;
export function invalidindexpropertytypeerror_getCode(a: number): number;
export function invalidindexpropertytypeerror_message(a: number, b: number): void;
export function invalidindexpropertytypeerror_serialize(a: number, b: number): void;
export function __wbg_invalididentitypublickeytypeerror_free(a: number): void;
export function invalididentitypublickeytypeerror_new(a: number, b: number): void;
export function invalididentitypublickeytypeerror_getPublicKeyType(a: number): number;
export function invalididentitypublickeytypeerror_getCode(a: number): number;
export function invalididentitypublickeytypeerror_message(a: number, b: number): void;
export function invalididentitypublickeytypeerror_serialize(a: number, b: number): void;
export function __wbg_documentalreadyexistserror_free(a: number): void;
export function documentalreadyexistserror_getDocumentTransition(a: number): number;
export function __wbg_documentnotprovidederror_free(a: number): void;
export function documentnotprovidederror_getDocumentTransition(a: number): number;
export function __wbg_invaliddocumentactionerror_free(a: number): void;
export function invaliddocumentactionerror_getDocumentTransition(a: number): number;
export function __wbg_identity_free(a: number): void;
export function identity_new(a: number, b: number): void;
export function identity_getProtocolVersion(a: number): number;
export function identity_getId(a: number): number;
export function identity_setPublicKeys(a: number, b: number, c: number): void;
export function identity_getPublicKeys(a: number, b: number): void;
export function identity_getPublicKeyById(a: number, b: number): number;
export function identity_getBalance(a: number): number;
export function identity_setBalance(a: number, b: number): void;
export function identity_increaseBalance(a: number, b: number): number;
export function identity_reduceBalance(a: number, b: number): number;
export function identity_setAssetLockProof(a: number, b: number, c: number): void;
export function identity_getAssetLockProof(a: number): number;
export function identity_setRevision(a: number, b: number): void;
export function identity_getRevision(a: number): number;
export function identity_setMetadata(a: number, b: number, c: number): void;
export function identity_getMetadata(a: number): number;
export function identity_from(a: number): number;
export function identity_toJSON(a: number, b: number): void;
export function identity_toObject(a: number, b: number): void;
export function identity_toBuffer(a: number, b: number): void;
export function identity_hash(a: number, b: number): void;
export function identity_addPublicKey(a: number, b: number): void;
export function identity_addPublicKeys(a: number, b: number, c: number): void;
export function identity_getPublicKeyMaxId(a: number): number;
export function rustsecp256k1_v0_6_1_context_create(a: number): number;
export function rustsecp256k1_v0_6_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_6_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_6_1_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdbb4810ee474a6bf(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__hf8604d23cbf0f65f(a: number, b: number, c: number, d: number): void;
