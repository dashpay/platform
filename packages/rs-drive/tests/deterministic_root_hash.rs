use grovedb::Element;
use rs_drive::drive::{Drive, RootTree};
use storage::rocksdb_storage::OptimisticTransactionDBTransaction;
use tempdir::TempDir;

fn test_root_hash(drive: &mut Drive, db_transaction: &OptimisticTransactionDBTransaction) {
    // [1644293142180] INFO (35 on bf3bb2a2796a): createTree
    //     path: []
    //     pathHash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    //     key: "00"
    //     value: "0000000000000000000000000000000000000000000000000000000000000000"
    //     valueHash: "66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925"
    //     useTransaction: true
    //     type: "tree"
    //     method: "insert"
    //     appHash: "0000000000000000000000000000000000000000000000000000000000000000"

    drive
        .grove
        .insert(
            [],
            Into::<&[u8; 1]>::into(RootTree::Identities),
            Element::empty_tree(),
            Some(db_transaction),
        )
        .expect("should insert tree");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "0000000000000000000000000000000000000000000000000000000000000000"
    );

    //[1644293142181] INFO (35 on bf3bb2a2796a): createTree
    //     path: []
    //     pathHash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    //     key: "02"
    //     value: "0000000000000000000000000000000000000000000000000000000000000000"
    //     valueHash: "66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925"
    //     useTransaction: true
    //     type: "tree"
    //     method: "insert"
    //     appHash: "f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b"

    drive
        .grove
        .insert(
            [],
            Into::<&[u8; 1]>::into(RootTree::PublicKeyHashesToIdentities),
            Element::empty_tree(),
            Some(db_transaction),
        )
        .expect("should insert tree");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b"
    );

    // [1644293142181] INFO (35 on bf3bb2a2796a): createTree
    //     path: []
    //     pathHash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    //     key: "01"
    //     value: "0000000000000000000000000000000000000000000000000000000000000000"
    //     valueHash: "66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925"
    //     useTransaction: true
    //     type: "tree"
    //     method: "insert"
    //     appHash: "7a0501f5957bdf9cb3a8ff4966f02265f968658b7a9c62642cba1165e86642f5"

    drive
        .grove
        .insert(
            [],
            Into::<&[u8; 1]>::into(RootTree::ContractDocuments),
            Element::empty_tree(),
            Some(db_transaction),
        )
        .expect("should insert tree");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "7a0501f5957bdf9cb3a8ff4966f02265f968658b7a9c62642cba1165e86642f5"
    );

    // [1644293142182] INFO (35 on bf3bb2a2796a): createTree
    //     path: []
    //     pathHash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    //     key: "03"
    //     value: "0000000000000000000000000000000000000000000000000000000000000000"
    //     valueHash: "66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925"
    //     useTransaction: true
    //     type: "tree"
    //     method: "insert"
    //     appHash: "db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71"

    drive
        .grove
        .insert(
            [],
            Into::<&[u8; 1]>::into(RootTree::Misc),
            Element::empty_tree(),
            Some(db_transaction),
        )
        .expect("should insert tree");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71"
    );

    // [1644293142182] INFO (35 on bf3bb2a2796a): createTree
    //     path: [
    //       "03"
    //     ]
    //     pathHash: "084fed08b978af4d7d196a7446a86b58009e636b611db16211b65a9aadff29c5"
    //     key: "00"
    //     value: "0000000000000000000000000000000000000000000000000000000000000000"
    //     valueHash: "66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925"
    //     useTransaction: true
    //     type: "tree"
    //     method: "insert"
    //     appHash: "d6892d9dabe1ebfb70aef0b2f7d090ed7b7e16a03198e2b6f3cf5918b7eeaac1"

    drive
        .grove
        .insert(
            [Into::<&[u8; 1]>::into(RootTree::Misc).as_slice()],
            &[0],
            Element::empty_tree(),
            Some(db_transaction),
        )
        .expect("should insert tree");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "d91c30d4e46d1d3474bae77f7f0ec977826a31624fb5c07572b2053546cb23b8"
    );

    // [1644295643055] INFO (36 on a5bc48c228d6): put
    //     path: [
    //       "00"
    //     ]
    //     pathHash: "6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d"
    //     key: "f00100b0c1e3762b8bc1421e113c76b2a635c5930b9abf2b336583be5987a715"
    //     value: "01000000a46269645820f00100b0c1e3762b8bc1421e113c76b2a635c5930b9abf2b336583be5987a7156762616c616e636500687265766973696f6e006a7075626c69634b65797381a662696400646461746158210328f474ce2d61d6fdb45c1fb437ddbf167924e6af3303c167f64d8c8857e39ca564747970650067707572706f73650068726561644f6e6c79f76d73656375726974794c6576656c00"
    //     valueHash: "d7fef03318e2db119a9f5a2d6bcbf9a03fc280b4f4a3f94307736be193c320d4"
    //     useTransaction: true
    //     type: "item"
    //     method: "insert"
    //     appHash: "2da84520b8409815aded9ca9d3cf0eaa048a3cb8f5fbb7e615ddb40eb5116bc9"

    drive.grove.insert(
        [Into::<&[u8; 1]>::into(RootTree::Identities).as_slice()],
        hex::decode("f00100b0c1e3762b8bc1421e113c76b2a635c5930b9abf2b336583be5987a715").unwrap().as_slice(),
        Element::Item(hex::decode("01000000a46269645820f00100b0c1e3762b8bc1421e113c76b2a635c5930b9abf2b336583be5987a7156762616c616e636500687265766973696f6e006a7075626c69634b65797381a662696400646461746158210328f474ce2d61d6fdb45c1fb437ddbf167924e6af3303c167f64d8c8857e39ca564747970650067707572706f73650068726561644f6e6c79f76d73656375726974794c6576656c00").unwrap()),
        Some(db_transaction),
    ).expect("should insert");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "c5d98739dbd5cabd1afaf6e09582b6bdc3385f877542d31833977ac6e49dbb20"
    );

    // [1644295643057] INFO (36 on a5bc48c228d6): put
    //     path: [
    //       "02"
    //     ]
    //     pathHash: "dbc1b4c900ffe48d575b5da5c638040125f65db0fe3e24494b76ea986457d986"
    //     key: "6198bae2a577044d7975f4d1a06a8d13a9eab9b0"
    //     value: "815820f00100b0c1e3762b8bc1421e113c76b2a635c5930b9abf2b336583be5987a715"
    //     valueHash: "d8c99c5e59a7c1a1cd47aeeef820585df42a21070d0ece24f316061328212636"
    //     useTransaction: true
    //     type: "item"
    //     method: "insert"
    //     appHash: "51178515150faf1fccd9caa222a831f70db507273eb74b432d3a6b0f95e182ad"

    drive
        .grove
        .insert(
            [Into::<&[u8; 1]>::into(RootTree::PublicKeyHashesToIdentities).as_slice()],
            hex::decode("6198bae2a577044d7975f4d1a06a8d13a9eab9b0")
                .unwrap()
                .as_slice(),
            Element::Item(
                hex::decode(
                    "815820f00100b0c1e3762b8bc1421e113c76b2a635c5930b9abf2b336583be5987a715",
                )
                .unwrap(),
            ),
            Some(db_transaction),
        )
        .expect("should insert");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "22cf8d39f3bf9c7a3b0bb5363c3ed424f069cfc50defe1f6a48b3281f5c76d8d"
    );

    let encoded_dpns_contract = hex::decode("01000000a5632469645820e668c659af66aee1e72c186dde7b5b7e0a1d712a09c40d5721f622bf53c531556724736368656d61783468747470733a2f2f736368656d612e646173682e6f72672f6470702d302d342d302f6d6574612f646174612d636f6e7472616374676f776e6572496458203012c19b98ec0033addb36cd64b7f510670f2a351a4304b5f6994144286efdac6776657273696f6e0169646f63756d656e7473a266646f6d61696ea66474797065666f626a65637467696e646963657383a3646e616d6572706172656e744e616d65416e644c6162656c66756e69717565f56a70726f7065727469657382a1781a6e6f726d616c697a6564506172656e74446f6d61696e4e616d6563617363a16f6e6f726d616c697a65644c6162656c63617363a3646e616d656e646173684964656e74697479496466756e69717565f56a70726f7065727469657381a1781c7265636f7264732e64617368556e697175654964656e74697479496463617363a2646e616d656964617368416c6961736a70726f7065727469657381a1781b7265636f7264732e64617368416c6961734964656e746974794964636173636824636f6d6d656e74790137496e206f7264657220746f207265676973746572206120646f6d61696e20796f75206e65656420746f206372656174652061207072656f726465722e20546865207072656f726465722073746570206973206e656564656420746f2070726576656e74206d616e2d696e2d7468652d6d6964646c652061747461636b732e206e6f726d616c697a65644c6162656c202b20272e27202b206e6f726d616c697a6564506172656e74446f6d61696e206d757374206e6f74206265206c6f6e676572207468616e20323533206368617273206c656e67746820617320646566696e65642062792052464320313033352e20446f6d61696e20646f63756d656e74732061726520696d6d757461626c653a206d6f64696669636174696f6e20616e642064656c6574696f6e20617265207265737472696374656468726571756972656486656c6162656c6f6e6f726d616c697a65644c6162656c781a6e6f726d616c697a6564506172656e74446f6d61696e4e616d656c7072656f7264657253616c74677265636f7264736e737562646f6d61696e52756c65736a70726f70657274696573a6656c6162656ca5647479706566737472696e67677061747465726e782a5e5b612d7a412d5a302d395d5b612d7a412d5a302d392d5d7b302c36317d5b612d7a412d5a302d395d24696d61784c656e677468183f696d696e4c656e677468036b6465736372697074696f6e7819446f6d61696e206c6162656c2e20652e672e2027426f62272e677265636f726473a66474797065666f626a6563746824636f6d6d656e747890436f6e73747261696e742077697468206d617820616e64206d696e2070726f7065727469657320656e737572652074686174206f6e6c79206f6e65206964656e74697479207265636f72642069732075736564202d206569746865722061206064617368556e697175654964656e74697479496460206f722061206064617368416c6961734964656e746974794964606a70726f70657274696573a27364617368416c6961734964656e746974794964a764747970656561727261796824636f6d6d656e7478234d75737420626520657175616c20746f2074686520646f63756d656e74206f776e6572686d61784974656d731820686d696e4974656d73182069627974654172726179f56b6465736372697074696f6e783d4964656e7469747920494420746f206265207573656420746f2063726561746520616c696173206e616d657320666f7220746865204964656e7469747970636f6e74656e744d656469615479706578216170706c69636174696f6e2f782e646173682e6470702e6964656e7469666965727464617368556e697175654964656e746974794964a764747970656561727261796824636f6d6d656e7478234d75737420626520657175616c20746f2074686520646f63756d656e74206f776e6572686d61784974656d731820686d696e4974656d73182069627974654172726179f56b6465736372697074696f6e783e4964656e7469747920494420746f206265207573656420746f2063726561746520746865207072696d617279206e616d6520746865204964656e7469747970636f6e74656e744d656469615479706578216170706c69636174696f6e2f782e646173682e6470702e6964656e7469666965726d6d617850726f70657274696573016d6d696e50726f7065727469657301746164646974696f6e616c50726f70657274696573f46c7072656f7264657253616c74a56474797065656172726179686d61784974656d731820686d696e4974656d73182069627974654172726179f56b6465736372697074696f6e782253616c74207573656420696e20746865207072656f7264657220646f63756d656e746e737562646f6d61696e52756c6573a56474797065666f626a656374687265717569726564816f616c6c6f77537562646f6d61696e736a70726f70657274696573a16f616c6c6f77537562646f6d61696e73a3647479706567626f6f6c65616e6824636f6d6d656e74784f4f6e6c792074686520646f6d61696e206f776e657220697320616c6c6f77656420746f2063726561746520737562646f6d61696e7320666f72206e6f6e20746f702d6c6576656c20646f6d61696e736b6465736372697074696f6e785b54686973206f7074696f6e20646566696e65732077686f2063616e2063726561746520737562646f6d61696e733a2074727565202d20616e796f6e653b2066616c7365202d206f6e6c792074686520646f6d61696e206f776e65726b6465736372697074696f6e7842537562646f6d61696e2072756c657320616c6c6f7720646f6d61696e206f776e65727320746f20646566696e652072756c657320666f7220737562646f6d61696e73746164646974696f6e616c50726f70657274696573f46f6e6f726d616c697a65644c6162656ca5647479706566737472696e67677061747465726e78215e5b612d7a302d395d5b612d7a302d392d5d7b302c36317d5b612d7a302d395d246824636f6d6d656e7478694d75737420626520657175616c20746f20746865206c6162656c20696e206c6f776572636173652e20546869732070726f70657274792077696c6c20626520646570726563617465642064756520746f206361736520696e73656e73697469766520696e6469636573696d61784c656e677468183f6b6465736372697074696f6e7850446f6d61696e206c6162656c20696e206c6f7765726361736520666f7220636173652d696e73656e73697469766520756e697175656e6573732076616c69646174696f6e2e20652e672e2027626f6227781a6e6f726d616c697a6564506172656e74446f6d61696e4e616d65a6647479706566737472696e67677061747465726e78285e247c5e5b5b612d7a302d395d5b612d7a302d392d5c2e5d7b302c3138387d5b612d7a302d395d246824636f6d6d656e74788c4d7573742065697468657220626520657175616c20746f20616e206578697374696e6720646f6d61696e206f7220656d70747920746f20637265617465206120746f70206c6576656c20646f6d61696e2e204f6e6c7920746865206461746120636f6e7472616374206f776e65722063616e2063726561746520746f70206c6576656c20646f6d61696e732e696d61784c656e67746818be696d696e4c656e677468006b6465736372697074696f6e785e412066756c6c20706172656e7420646f6d61696e206e616d6520696e206c6f7765726361736520666f7220636173652d696e73656e73697469766520756e697175656e6573732076616c69646174696f6e2e20652e672e20276461736827746164646974696f6e616c50726f70657274696573f4687072656f72646572a66474797065666f626a65637467696e646963657381a3646e616d656a73616c7465644861736866756e69717565f56a70726f7065727469657381a17073616c746564446f6d61696e48617368636173636824636f6d6d656e74784a5072656f7264657220646f63756d656e74732061726520696d6d757461626c653a206d6f64696669636174696f6e20616e642064656c6574696f6e206172652072657374726963746564687265717569726564817073616c746564446f6d61696e486173686a70726f70657274696573a17073616c746564446f6d61696e48617368a56474797065656172726179686d61784974656d731820686d696e4974656d73182069627974654172726179f56b6465736372697074696f6e7859446f75626c65207368612d323536206f662074686520636f6e636174656e6174696f6e206f66206120333220627974652072616e646f6d2073616c7420616e642061206e6f726d616c697a656420646f6d61696e206e616d65746164646974696f6e616c50726f70657274696573f4").unwrap();

    drive
        .apply_contract(encoded_dpns_contract, Some(db_transaction))
        .expect("apply contract");

    let app_hash = drive
        .grove
        .root_hash(Some(db_transaction))
        .expect("should return app hash");

    assert_eq!(
        hex::encode(app_hash),
        "b40572866b60e47580d64f8d5754a7b9b2eb512ff2084855a5a9790df17c43e9"
    );
}

#[test]
fn test_deterministic_root_hash() {
    let tmp_dir = TempDir::new("family").unwrap();
    let mut drive: Drive = Drive::open(tmp_dir).expect("expected to open Drive successfully");

    let storage = drive.grove.storage();
    let db_transaction = storage.transaction();

    drive
        .grove
        .start_transaction()
        .expect("transaction should be started");

    for _ in 0..10 {
        test_root_hash(&mut drive, &db_transaction);

        drive
            .grove
            .rollback_transaction(&db_transaction)
            .expect("transaction should be rolled back");
    }
}
