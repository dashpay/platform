mod v0;

use crate::drive::Drive;
use crate::error::drive::DriveError;
use crate::error::Error;
use dpp::tokens::contract_info::TokenContractInfo;

use crate::verify::RootHash;

use dpp::version::PlatformVersion;

impl Drive {
    /// Verifies a Merkle proof for a token's associated contract information.
    ///
    /// This method checks the validity of a cryptographic proof over GroveDB data, specifically
    /// targeting the `TokenContractInfo` associated with the given `token_id`. It supports both
    /// full and subset proof verification, depending on the `verify_subset_of_proof` flag.
    /// The function dispatches to a versioned implementation based on the provided
    /// [`PlatformVersion`] configuration.
    ///
    /// # Parameters
    ///
    /// - `proof`: A byte slice containing the serialized Merkle proof generated by GroveDB.
    /// - `token_id`: The 32-byte identifier of the token whose contract info is being verified.
    /// - `verify_subset_of_proof`: If `true`, verifies a subset proof instead of a full proof.
    /// - `platform_version`: The platform version object used to determine the correct method version.
    ///
    /// # Returns
    ///
    /// On success, returns a [`Result`] containing a tuple:
    /// - [`RootHash`]: The Merkle root hash resulting from the proof.
    /// - `Option<TokenContractInfo>`: The token contract information, or `None` if not present in the proof.
    ///
    /// # Errors
    ///
    /// Returns an [`Error`] if:
    /// - The proof is malformed or fails verification.
    /// - The token ID is not found or incorrectly resolved.
    /// - An unsupported version is encountered for this method.
    ///
    /// # Versioning
    ///
    /// This function uses the version from `platform_version.drive.methods.verify.token.verify_token_contract_info`.
    /// Currently supported version: `0`.
    pub fn verify_token_contract_info(
        proof: &[u8],
        token_id: [u8; 32],
        verify_subset_of_proof: bool,
        platform_version: &PlatformVersion,
    ) -> Result<(RootHash, Option<TokenContractInfo>), Error> {
        match platform_version
            .drive
            .methods
            .verify
            .token
            .verify_token_contract_info
        {
            0 => Self::verify_token_contract_info_v0(
                proof,
                token_id,
                verify_subset_of_proof,
                platform_version,
            ),
            version => Err(Error::Drive(DriveError::UnknownVersionMismatch {
                method: "verify_token_contract_info".to_string(),
                known_versions: vec![0],
                received: version,
            })),
        }
    }
}
