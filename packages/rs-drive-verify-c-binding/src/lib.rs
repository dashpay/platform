mod types;
mod util;

use crate::types::{
    IdentityIdBalanceMap, IdentityIdVerificationResult, IdentityVerificationResult,
    MultipleIdentityBalanceVerificationResult, MultipleIdentityIdVerificationResult,
    MultipleIdentityVerificationResult, PublicKeyHash, PublicKeyHashIdentityIdMap,
    PublicKeyHashIdentityMap,
};
use crate::util::{build_c_identity_struct, extract_vector_from_pointer, vec_to_pointer};
use drive::drive::verify::Identity as DppIdentity;
use drive::drive::verify::{AssetLockProof as DppAssetLockProof};
use drive::drive::Drive;
use std::collections::BTreeMap;
use std::{slice};

#[no_mangle]
pub unsafe extern "C" fn verify_full_identity_by_public_key_hash(
    proof_array: *const u8,
    proof_len: usize,
    public_key_hash: *const PublicKeyHash,
) -> *const IdentityVerificationResult {
    let proof = unsafe { slice::from_raw_parts(proof_array, proof_len) };
    let public_key_hash = unsafe { std::ptr::read(public_key_hash) };

    let verification_result =
        Drive::verify_full_identity_by_public_key_hash(proof, public_key_hash);

    match verification_result {
        Ok((root_hash, maybe_identity)) => Box::into_raw(Box::from(IdentityVerificationResult {
            root_hash: Box::into_raw(Box::from(root_hash)),
            is_valid: true,
            has_identity: maybe_identity.is_some(),
            identity: build_c_identity_struct(maybe_identity),
        })),
        Err(..) => Box::into_raw(Box::from(IdentityVerificationResult::default())),
    }
}

#[no_mangle]
pub unsafe extern "C" fn verify_full_identities_by_public_key_hashes(
    proof_array: *const u8,
    proof_len: usize,
    public_key_hashes_c: *const *const u8,
    public_key_hash_count: usize,
) -> *const MultipleIdentityVerificationResult {
    let proof = unsafe { slice::from_raw_parts(proof_array, proof_len) };
    let public_key_hashes =
        extract_vector_from_pointer::<[u8; 20]>(public_key_hashes_c, public_key_hash_count);

    let verification_result = Drive::verify_full_identities_by_public_key_hashes::<
        BTreeMap<PublicKeyHash, Option<DppIdentity>>,
    >(proof, &public_key_hashes);

    match verification_result {
        Ok((root_hash, hash_identity_map)) => {
            let mut pkhash_identity_map_as_vec: Vec<*const PublicKeyHashIdentityMap> = Vec::new();
            for (public_key_hash, maybe_identity) in hash_identity_map {
                pkhash_identity_map_as_vec.push(Box::into_raw(Box::from(
                    PublicKeyHashIdentityMap {
                        public_key_hash: vec_to_pointer(public_key_hash.to_vec()),
                        public_key_hash_length: public_key_hash.len(),
                        has_identity: maybe_identity.is_some(),
                        identity: build_c_identity_struct(maybe_identity),
                    },
                )));
            }

            Box::into_raw(Box::from(MultipleIdentityVerificationResult {
                is_valid: true,
                root_hash: Box::into_raw(Box::from(root_hash)),
                map_size: pkhash_identity_map_as_vec.len(),
                public_key_hash_identity_map: vec_to_pointer(pkhash_identity_map_as_vec),
            }))
        }
        Err(..) => Box::into_raw(Box::from(MultipleIdentityVerificationResult::default())),
    }
}

#[no_mangle]
pub unsafe extern "C" fn verify_full_identity_by_identity_id(
    proof_array: *const u8,
    proof_len: usize,
    is_proof_subset: bool,
    identity_id: *const [u8; 32],
) -> *const IdentityVerificationResult {
    let proof = unsafe { slice::from_raw_parts(proof_array, proof_len) };
    let identity_id: [u8; 32] = unsafe { std::ptr::read(identity_id) };
    let verification_result =
        Drive::verify_full_identity_by_identity_id(proof, is_proof_subset, identity_id);
    match verification_result {
        Ok((root_hash, maybe_identity)) => Box::into_raw(Box::from(IdentityVerificationResult {
            root_hash: Box::into_raw(Box::from(root_hash)),
            is_valid: true,
            has_identity: maybe_identity.is_some(),
            identity: build_c_identity_struct(maybe_identity),
        })),
        Err(..) => Box::into_raw(Box::from(IdentityVerificationResult::default())),
    }
}

#[no_mangle]
pub unsafe extern "C" fn verify_identity_id_by_public_key_hash(
    proof_array: *const u8,
    proof_len: usize,
    is_proof_subset: bool,
    public_key_hash: *const PublicKeyHash,
) -> *const IdentityIdVerificationResult {
    let proof = unsafe { slice::from_raw_parts(proof_array, proof_len) };
    let public_key_hash = unsafe { std::ptr::read(public_key_hash) };

    let verification_result =
        Drive::verify_identity_id_by_public_key_hash(proof, is_proof_subset, public_key_hash);

    match verification_result {
        Ok((root_hash, maybe_identity_id)) => {
            Box::into_raw(Box::from(IdentityIdVerificationResult {
                root_hash: Box::into_raw(Box::from(root_hash)),
                is_valid: true,
                has_identity_id: maybe_identity_id.is_some(),
                identity_id: maybe_identity_id
                    .map(|id| vec_to_pointer(id.to_vec()))
                    .unwrap_or(std::ptr::null()),
                id_size: maybe_identity_id.map(|id| id.len()).unwrap_or(0),
            }))
        }
        Err(..) => Box::into_raw(Box::from(IdentityIdVerificationResult::default())),
    }
}

#[no_mangle]
pub unsafe extern "C" fn verify_identity_balances_by_identity_ids(
    proof_array: *const u8,
    proof_len: usize,
    is_proof_subset: bool,
    identity_ids: *const *const u8,
    id_size: usize,
) -> *const MultipleIdentityBalanceVerificationResult {
    let proof = unsafe { slice::from_raw_parts(proof_array, proof_len) };
    let identity_ids = extract_vector_from_pointer::<[u8; 32]>(identity_ids, id_size);

    let verification_result = Drive::verify_identity_balances_for_identity_ids::<
        Vec<([u8; 32], Option<u64>)>,
    >(proof, is_proof_subset, identity_ids.as_slice());

    match verification_result {
        Ok((root_hash, identity_id_balance_map)) => {
            let mut identity_id_balance_map_as_vec: Vec<*const IdentityIdBalanceMap> = Vec::new();
            for (identity_id, maybe_balance) in identity_id_balance_map {
                identity_id_balance_map_as_vec.push(Box::into_raw(Box::from(
                    IdentityIdBalanceMap {
                        identity_id: vec_to_pointer(identity_id.to_vec()),
                        id_size: 32,
                        has_balance: maybe_balance.is_some(),
                        balance: maybe_balance.unwrap_or(0),
                    },
                )));
            }
            Box::into_raw(Box::from(MultipleIdentityBalanceVerificationResult {
                is_valid: true,
                root_hash: Box::into_raw(Box::from(root_hash)),
                map_size: identity_id_balance_map_as_vec.len(),
                identity_id_balance_map: vec_to_pointer(identity_id_balance_map_as_vec),
            }))
        }
        Err(..) => Box::into_raw(Box::from(
            MultipleIdentityBalanceVerificationResult::default(),
        )),
    }
}

#[no_mangle]
pub unsafe extern "C" fn verify_identity_ids_by_public_key_hashes(
    proof_array: *const u8,
    proof_len: usize,
    is_proof_subset: bool,
    public_key_hashes_c: *const *const u8,
    public_key_hash_count: usize,
) -> *const MultipleIdentityIdVerificationResult {
    let proof = unsafe { slice::from_raw_parts(proof_array, proof_len) };
    let public_key_hashes =
        extract_vector_from_pointer::<[u8; 20]>(public_key_hashes_c, public_key_hash_count);

    let verification_result = Drive::verify_identity_ids_by_public_key_hashes::<
        Vec<(PublicKeyHash, Option<[u8; 32]>)>,
    >(proof, is_proof_subset, public_key_hashes.as_slice());

    match verification_result {
        Ok((root_hash, public_key_hash_identity_id_map)) => {
            let mut pkhash_identity_id_map_as_vec: Vec<*const PublicKeyHashIdentityIdMap> =
                Vec::new();
            for (public_key_hash, maybe_identity_id) in &public_key_hash_identity_id_map {
                pkhash_identity_id_map_as_vec.push(Box::into_raw(Box::from(
                    PublicKeyHashIdentityIdMap {
                        public_key_hash: vec_to_pointer(public_key_hash.to_vec()),
                        public_key_hash_size: public_key_hash.len(),
                        has_identity_id: maybe_identity_id.is_some(),
                        identity_id: maybe_identity_id
                            .map(|id| vec_to_pointer(id.to_vec()))
                            .unwrap_or(std::ptr::null()),
                        id_size: maybe_identity_id.map(|id| id.len()).unwrap_or(0),
                    },
                )))
            }
            Box::into_raw(Box::from(MultipleIdentityIdVerificationResult {
                is_valid: true,
                root_hash: Box::into_raw(Box::from(root_hash)),
                map_size: public_key_hash_identity_id_map.len(),
                public_key_hash_identity_id_map: vec_to_pointer(pkhash_identity_id_map_as_vec),
            }))
        }
        Err(..) => Box::into_raw(Box::from(MultipleIdentityIdVerificationResult::default())),
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use drive::drive::Drive;
    use std::collections::BTreeMap;

    fn single_identity_proof() -> &'static [u8] {
        &[
            6, 0, 1, 0, 166, 3, 1, 74, 117, 207, 63, 83, 94, 129, 196, 104, 15, 129, 55, 162, 32,
            141, 188, 178, 101, 47, 253, 126, 113, 91, 212, 41, 12, 197, 197, 96, 178, 204, 97, 2,
            207, 190, 5, 53, 189, 45, 239, 229, 134, 184, 99, 185, 204, 185, 45, 13, 102, 251, 43,
            129, 13, 115, 14, 123, 162, 203, 126, 47, 179, 2, 97, 59, 16, 4, 1, 24, 0, 24, 2, 1,
            20, 174, 227, 2, 114, 8, 150, 187, 168, 55, 220, 243, 242, 214, 116, 245, 70, 253, 37,
            73, 111, 0, 202, 53, 154, 161, 178, 3, 46, 49, 88, 174, 94, 92, 72, 159, 125, 70, 114,
            47, 41, 100, 74, 21, 225, 207, 124, 57, 53, 179, 6, 6, 222, 246, 17, 4, 1, 32, 0, 36,
            2, 1, 32, 62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216,
            67, 22, 47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162, 0, 160, 213, 164,
            246, 65, 134, 99, 70, 133, 21, 205, 117, 24, 155, 227, 225, 3, 75, 191, 169, 161, 128,
            126, 184, 29, 150, 75, 167, 68, 42, 11, 30, 16, 1, 105, 147, 24, 56, 86, 71, 7, 219,
            241, 30, 144, 160, 89, 253, 125, 212, 83, 204, 126, 104, 173, 183, 210, 194, 55, 91,
            174, 83, 86, 102, 100, 231, 17, 2, 86, 112, 117, 44, 195, 216, 131, 32, 10, 117, 152,
            182, 92, 215, 75, 65, 167, 96, 204, 11, 229, 124, 218, 85, 54, 241, 95, 3, 200, 120,
            58, 168, 16, 1, 195, 54, 53, 19, 110, 80, 46, 154, 197, 36, 75, 21, 162, 10, 117, 126,
            7, 89, 206, 10, 144, 130, 60, 211, 127, 137, 63, 106, 73, 85, 109, 38, 4, 1, 96, 0, 45,
            4, 1, 32, 62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216,
            67, 22, 47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162, 253, 28, 177, 42,
            91, 38, 20, 0, 0, 0, 251, 189, 59, 224, 151, 231, 240, 125, 86, 25, 221, 105, 231, 118,
            120, 132, 209, 22, 249, 90, 233, 165, 252, 219, 101, 30, 113, 114, 121, 2, 204, 30, 16,
            1, 30, 12, 20, 67, 208, 146, 95, 120, 17, 50, 244, 197, 6, 116, 114, 2, 219, 255, 163,
            202, 61, 237, 77, 35, 135, 212, 183, 228, 14, 3, 3, 227, 17, 17, 2, 1, 24, 127, 3, 20,
            68, 99, 161, 169, 148, 213, 4, 14, 105, 192, 144, 182, 152, 93, 122, 242, 149, 191,
            209, 26, 0, 35, 0, 32, 62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77,
            93, 70, 216, 67, 22, 47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162, 0, 2,
            158, 111, 45, 51, 177, 88, 0, 48, 227, 182, 3, 14, 60, 37, 1, 106, 183, 37, 57, 101,
            104, 37, 86, 5, 157, 204, 36, 59, 117, 199, 250, 109, 16, 1, 224, 159, 136, 205, 9,
            204, 89, 93, 82, 72, 146, 179, 230, 66, 185, 57, 242, 130, 121, 149, 96, 87, 3, 196,
            156, 134, 31, 101, 48, 1, 213, 225, 17, 1, 1, 32, 77, 4, 32, 62, 171, 130, 51, 233, 19,
            45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22, 47, 39, 25, 156, 146, 35, 108,
            99, 133, 34, 187, 243, 162, 0, 9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 127, 174, 137, 184, 136,
            178, 63, 79, 189, 174, 210, 251, 153, 10, 31, 66, 114, 122, 239, 91, 210, 168, 185, 31,
            140, 185, 112, 87, 9, 9, 171, 57, 1, 32, 62, 171, 130, 51, 233, 19, 45, 191, 194, 183,
            0, 171, 182, 77, 93, 70, 216, 67, 22, 47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187,
            243, 162, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 1, 1, 0, 5, 2, 1,
            1, 1, 0, 214, 81, 34, 23, 150, 181, 32, 106, 91, 150, 120, 164, 217, 153, 93, 81, 157,
            139, 158, 117, 232, 125, 133, 229, 126, 255, 185, 31, 130, 162, 62, 141, 16, 2, 188,
            248, 74, 136, 44, 15, 114, 221, 13, 82, 10, 105, 84, 179, 225, 136, 127, 165, 91, 125,
            198, 118, 53, 180, 69, 22, 133, 107, 49, 253, 32, 168, 16, 1, 70, 25, 123, 162, 209,
            216, 154, 230, 95, 14, 56, 180, 32, 113, 102, 210, 182, 213, 32, 20, 204, 112, 76, 86,
            112, 130, 191, 29, 189, 101, 249, 223, 17, 2, 1, 1, 148, 1, 3, 1, 0, 0, 30, 0, 27, 0,
            0, 1, 2, 0, 20, 68, 99, 161, 169, 148, 213, 4, 14, 105, 192, 144, 182, 152, 93, 122,
            242, 149, 191, 209, 26, 0, 0, 3, 1, 1, 0, 58, 0, 55, 1, 0, 2, 1, 0, 48, 151, 57, 136,
            178, 145, 253, 27, 202, 134, 217, 6, 114, 62, 51, 91, 223, 19, 211, 235, 186, 223, 234,
            49, 221, 22, 75, 60, 103, 44, 22, 218, 114, 175, 142, 110, 223, 192, 186, 196, 75, 146,
            184, 197, 54, 215, 8, 220, 51, 0, 0, 16, 3, 1, 2, 0, 43, 0, 40, 2, 0, 3, 0, 0, 33, 3,
            96, 218, 121, 197, 137, 149, 228, 236, 136, 81, 42, 249, 164, 68, 12, 164, 242, 215,
            191, 232, 66, 64, 225, 126, 255, 196, 221, 140, 233, 64, 51, 162, 0, 0, 17, 2, 1, 96,
            79, 4, 32, 62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216,
            67, 22, 47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162, 0, 11, 3, 253, 28,
            177, 42, 91, 38, 20, 0, 0, 0, 104, 243, 24, 41, 234, 236, 2, 247, 229, 237, 218, 218,
            18, 157, 73, 129, 169, 155, 218, 14, 92, 15, 212, 239, 243, 194, 62, 175, 194, 199,
            154, 2,
        ]
    }

    fn multiple_identity_proof() -> &'static [u8] {
        &[
            6, 0, 1, 0, 166, 3, 1, 74, 117, 207, 63, 83, 94, 129, 196, 104, 15, 129, 55, 162, 32,
            141, 188, 178, 101, 47, 253, 126, 113, 91, 212, 41, 12, 197, 197, 96, 178, 204, 97, 2,
            207, 190, 5, 53, 189, 45, 239, 229, 134, 184, 99, 185, 204, 185, 45, 13, 102, 251, 43,
            129, 13, 115, 14, 123, 162, 203, 126, 47, 179, 2, 97, 59, 16, 4, 1, 24, 0, 24, 2, 1,
            20, 94, 14, 73, 216, 8, 173, 33, 208, 29, 7, 221, 121, 154, 117, 189, 27, 71, 39, 136,
            167, 0, 140, 16, 170, 76, 29, 25, 226, 231, 228, 47, 224, 177, 167, 246, 217, 61, 76,
            11, 105, 146, 239, 99, 234, 152, 92, 22, 68, 124, 173, 164, 98, 149, 17, 4, 1, 32, 0,
            36, 2, 1, 32, 53, 168, 221, 106, 101, 237, 66, 153, 18, 210, 219, 5, 68, 98, 199, 232,
            192, 17, 150, 90, 167, 106, 118, 53, 106, 105, 180, 200, 129, 128, 140, 48, 0, 186, 86,
            207, 177, 216, 126, 244, 120, 87, 246, 177, 205, 127, 185, 24, 64, 111, 213, 15, 129,
            150, 102, 25, 119, 125, 212, 193, 181, 149, 161, 162, 110, 16, 1, 105, 147, 24, 56, 86,
            71, 7, 219, 241, 30, 144, 160, 89, 253, 125, 212, 83, 204, 126, 104, 173, 183, 210,
            194, 55, 91, 174, 83, 86, 102, 100, 231, 17, 2, 86, 112, 117, 44, 195, 216, 131, 32,
            10, 117, 152, 182, 92, 215, 75, 65, 167, 96, 204, 11, 229, 124, 218, 85, 54, 241, 95,
            3, 200, 120, 58, 168, 16, 1, 195, 54, 53, 19, 110, 80, 46, 154, 197, 36, 75, 21, 162,
            10, 117, 126, 7, 89, 206, 10, 144, 130, 60, 211, 127, 137, 63, 106, 73, 85, 109, 38, 4,
            1, 96, 0, 45, 4, 1, 32, 53, 168, 221, 106, 101, 237, 66, 153, 18, 210, 219, 5, 68, 98,
            199, 232, 192, 17, 150, 90, 167, 106, 118, 53, 106, 105, 180, 200, 129, 128, 140, 48,
            253, 186, 253, 104, 51, 174, 183, 0, 0, 0, 18, 178, 127, 74, 10, 124, 253, 6, 227, 56,
            123, 51, 165, 188, 166, 104, 41, 83, 81, 46, 33, 98, 26, 233, 207, 109, 99, 61, 144,
            65, 119, 25, 16, 1, 30, 12, 20, 67, 208, 146, 95, 120, 17, 50, 244, 197, 6, 116, 114,
            2, 219, 255, 163, 202, 61, 237, 77, 35, 135, 212, 183, 228, 14, 3, 3, 227, 17, 17, 2,
            1, 24, 179, 8, 1, 50, 201, 211, 88, 68, 213, 206, 42, 142, 15, 55, 124, 238, 35, 193,
            67, 165, 51, 150, 7, 61, 234, 134, 196, 148, 184, 107, 164, 196, 175, 11, 57, 3, 20,
            31, 8, 21, 38, 154, 252, 1, 45, 228, 66, 96, 206, 178, 138, 68, 150, 211, 24, 65, 132,
            0, 35, 0, 32, 15, 126, 159, 152, 150, 254, 206, 186, 180, 193, 157, 65, 233, 215, 241,
            108, 23, 39, 205, 99, 217, 219, 86, 244, 213, 176, 67, 34, 242, 146, 86, 203, 0, 16, 1,
            104, 87, 110, 36, 82, 30, 3, 186, 75, 98, 73, 18, 187, 7, 131, 55, 103, 200, 17, 2, 49,
            11, 135, 216, 234, 28, 175, 39, 149, 198, 143, 146, 17, 2, 232, 183, 235, 55, 111, 15,
            121, 147, 186, 223, 147, 151, 31, 105, 11, 232, 164, 143, 9, 219, 7, 17, 240, 82, 162,
            237, 72, 71, 20, 151, 185, 208, 16, 3, 20, 68, 99, 161, 169, 148, 213, 4, 14, 105, 192,
            144, 182, 152, 93, 122, 242, 149, 191, 209, 26, 0, 35, 0, 32, 62, 171, 130, 51, 233,
            19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22, 47, 39, 25, 156, 146, 35,
            108, 99, 133, 34, 187, 243, 162, 0, 2, 37, 75, 240, 169, 144, 190, 183, 33, 194, 31,
            33, 232, 219, 171, 80, 227, 60, 217, 207, 9, 97, 143, 194, 124, 159, 116, 80, 198, 115,
            81, 106, 238, 16, 1, 198, 173, 254, 8, 24, 9, 33, 142, 224, 116, 97, 249, 95, 83, 206,
            108, 228, 98, 236, 55, 159, 151, 167, 31, 27, 228, 15, 114, 24, 203, 80, 175, 17, 17,
            3, 20, 94, 14, 73, 216, 8, 173, 33, 208, 29, 7, 221, 121, 154, 117, 189, 27, 71, 39,
            136, 167, 0, 35, 0, 32, 53, 168, 221, 106, 101, 237, 66, 153, 18, 210, 219, 5, 68, 98,
            199, 232, 192, 17, 150, 90, 167, 106, 118, 53, 106, 105, 180, 200, 129, 128, 140, 48,
            0, 16, 1, 164, 179, 25, 152, 212, 124, 48, 227, 144, 244, 250, 86, 242, 143, 25, 198,
            47, 17, 79, 23, 167, 4, 210, 156, 86, 226, 139, 111, 219, 71, 241, 1, 3, 20, 103, 137,
            42, 243, 144, 205, 43, 118, 83, 169, 24, 199, 182, 146, 200, 91, 135, 180, 77, 50, 0,
            35, 0, 32, 57, 148, 116, 246, 83, 186, 107, 123, 56, 57, 164, 62, 208, 250, 53, 255,
            205, 221, 94, 250, 29, 14, 112, 130, 148, 27, 214, 36, 12, 33, 159, 128, 0, 16, 1, 235,
            77, 169, 119, 51, 138, 61, 164, 32, 78, 170, 172, 12, 136, 86, 189, 253, 81, 217, 178,
            92, 238, 240, 75, 64, 187, 56, 239, 247, 154, 177, 16, 17, 2, 31, 34, 16, 36, 41, 219,
            225, 188, 12, 167, 20, 132, 123, 8, 24, 125, 154, 135, 76, 196, 51, 41, 170, 167, 150,
            71, 251, 154, 160, 131, 77, 105, 16, 3, 20, 154, 6, 31, 49, 115, 76, 95, 95, 11, 17,
            154, 183, 45, 67, 60, 154, 241, 51, 211, 166, 0, 35, 0, 32, 232, 241, 234, 234, 48, 58,
            184, 92, 10, 32, 220, 110, 128, 186, 85, 30, 63, 171, 43, 133, 112, 35, 25, 161, 34,
            229, 80, 168, 115, 74, 228, 51, 0, 2, 100, 76, 96, 30, 103, 105, 33, 136, 207, 90, 151,
            92, 34, 7, 202, 186, 137, 157, 153, 241, 187, 212, 182, 46, 95, 232, 86, 133, 11, 157,
            114, 134, 16, 3, 20, 165, 73, 33, 187, 41, 182, 126, 49, 137, 142, 254, 188, 41, 242,
            65, 177, 174, 250, 77, 202, 0, 35, 0, 32, 127, 61, 253, 44, 203, 5, 79, 65, 14, 231,
            126, 176, 46, 231, 180, 234, 150, 7, 149, 216, 151, 70, 205, 194, 38, 221, 216, 153,
            230, 172, 78, 81, 0, 16, 2, 158, 111, 45, 51, 177, 88, 0, 48, 227, 182, 3, 14, 60, 37,
            1, 106, 183, 37, 57, 101, 104, 37, 86, 5, 157, 204, 36, 59, 117, 199, 250, 109, 3, 20,
            179, 191, 206, 71, 141, 233, 111, 227, 12, 211, 113, 59, 248, 140, 231, 114, 134, 135,
            218, 138, 0, 35, 0, 32, 168, 155, 161, 167, 178, 189, 91, 153, 252, 27, 238, 224, 90,
            202, 85, 135, 174, 60, 251, 70, 40, 210, 160, 53, 143, 32, 130, 82, 183, 232, 190, 64,
            0, 17, 17, 17, 3, 20, 187, 61, 240, 37, 227, 47, 217, 13, 31, 238, 231, 220, 164, 184,
            51, 33, 198, 131, 41, 45, 0, 35, 0, 32, 3, 193, 33, 26, 169, 210, 98, 57, 198, 220,
            161, 230, 203, 29, 187, 130, 102, 254, 43, 149, 0, 248, 105, 156, 132, 170, 144, 214,
            35, 247, 177, 211, 0, 16, 1, 238, 8, 71, 128, 91, 20, 91, 95, 181, 0, 177, 57, 254, 18,
            118, 126, 230, 129, 252, 49, 10, 33, 214, 233, 129, 70, 25, 223, 81, 135, 71, 8, 2,
            160, 222, 53, 47, 230, 118, 125, 167, 191, 76, 51, 186, 125, 45, 168, 219, 4, 64, 69,
            120, 53, 211, 194, 153, 36, 115, 33, 14, 2, 182, 49, 44, 16, 1, 224, 159, 136, 205, 9,
            204, 89, 93, 82, 72, 146, 179, 230, 66, 185, 57, 242, 130, 121, 149, 96, 87, 3, 196,
            156, 134, 31, 101, 48, 1, 213, 225, 2, 154, 86, 60, 152, 61, 32, 37, 32, 193, 169, 79,
            76, 107, 169, 151, 80, 55, 52, 80, 170, 249, 220, 178, 166, 46, 245, 14, 152, 119, 100,
            96, 67, 16, 3, 20, 237, 115, 138, 170, 221, 117, 209, 103, 127, 239, 236, 202, 221, 3,
            63, 18, 108, 254, 231, 106, 0, 35, 0, 32, 151, 172, 124, 81, 243, 147, 225, 5, 188,
            204, 9, 152, 150, 127, 129, 13, 246, 19, 141, 93, 239, 8, 214, 194, 123, 127, 177, 23,
            144, 211, 189, 239, 0, 3, 20, 251, 217, 218, 165, 153, 61, 229, 106, 46, 67, 70, 183,
            199, 47, 245, 88, 94, 255, 250, 171, 0, 35, 0, 32, 27, 36, 15, 203, 78, 99, 46, 120,
            86, 191, 245, 139, 120, 77, 206, 188, 25, 57, 140, 115, 78, 198, 0, 196, 101, 253, 233,
            90, 35, 102, 219, 235, 0, 16, 17, 17, 17, 17, 1, 1, 32, 139, 6, 4, 32, 3, 193, 33, 26,
            169, 210, 98, 57, 198, 220, 161, 230, 203, 29, 187, 130, 102, 254, 43, 149, 0, 248,
            105, 156, 132, 170, 144, 214, 35, 247, 177, 211, 0, 9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 108,
            75, 252, 242, 35, 205, 79, 229, 193, 202, 200, 46, 26, 158, 44, 115, 235, 14, 127, 52,
            206, 186, 189, 215, 99, 14, 36, 203, 25, 47, 151, 88, 4, 32, 15, 126, 159, 152, 150,
            254, 206, 186, 180, 193, 157, 65, 233, 215, 241, 108, 23, 39, 205, 99, 217, 219, 86,
            244, 213, 176, 67, 34, 242, 146, 86, 203, 0, 9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 128, 218,
            98, 172, 184, 196, 159, 144, 29, 107, 248, 74, 42, 42, 241, 84, 49, 230, 158, 41, 6,
            154, 191, 141, 2, 242, 193, 19, 198, 9, 155, 166, 16, 4, 32, 27, 36, 15, 203, 78, 99,
            46, 120, 86, 191, 245, 139, 120, 77, 206, 188, 25, 57, 140, 115, 78, 198, 0, 196, 101,
            253, 233, 90, 35, 102, 219, 235, 0, 9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 81, 162, 48, 73, 239,
            188, 222, 58, 14, 156, 133, 234, 122, 240, 90, 40, 212, 222, 49, 249, 10, 228, 74, 7,
            197, 250, 24, 9, 1, 40, 35, 112, 17, 4, 32, 53, 168, 221, 106, 101, 237, 66, 153, 18,
            210, 219, 5, 68, 98, 199, 232, 192, 17, 150, 90, 167, 106, 118, 53, 106, 105, 180, 200,
            129, 128, 140, 48, 0, 9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 42, 57, 7, 97, 185, 151, 137, 122,
            254, 81, 84, 12, 57, 223, 235, 92, 120, 208, 7, 129, 165, 71, 210, 184, 59, 30, 114,
            37, 152, 148, 222, 165, 16, 4, 32, 57, 148, 116, 246, 83, 186, 107, 123, 56, 57, 164,
            62, 208, 250, 53, 255, 205, 221, 94, 250, 29, 14, 112, 130, 148, 27, 214, 36, 12, 33,
            159, 128, 0, 9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 179, 242, 143, 156, 194, 109, 249, 14, 164,
            158, 19, 227, 205, 151, 192, 29, 119, 46, 157, 102, 9, 69, 62, 145, 212, 54, 158, 247,
            142, 56, 128, 160, 4, 32, 62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182,
            77, 93, 70, 216, 67, 22, 47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162, 0,
            9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 127, 174, 137, 184, 136, 178, 63, 79, 189, 174, 210, 251,
            153, 10, 31, 66, 114, 122, 239, 91, 210, 168, 185, 31, 140, 185, 112, 87, 9, 9, 171,
            57, 16, 4, 32, 127, 61, 253, 44, 203, 5, 79, 65, 14, 231, 126, 176, 46, 231, 180, 234,
            150, 7, 149, 216, 151, 70, 205, 194, 38, 221, 216, 153, 230, 172, 78, 81, 0, 9, 2, 1,
            1, 2, 1, 3, 0, 0, 0, 29, 100, 163, 249, 39, 11, 248, 184, 16, 67, 5, 186, 118, 130,
            148, 114, 243, 170, 194, 182, 255, 242, 11, 152, 172, 16, 54, 30, 197, 71, 63, 187, 17,
            4, 32, 151, 172, 124, 81, 243, 147, 225, 5, 188, 204, 9, 152, 150, 127, 129, 13, 246,
            19, 141, 93, 239, 8, 214, 194, 123, 127, 177, 23, 144, 211, 189, 239, 0, 9, 2, 1, 1, 2,
            1, 3, 0, 0, 0, 173, 183, 101, 112, 214, 79, 137, 101, 6, 134, 223, 88, 25, 65, 78, 94,
            66, 207, 126, 237, 171, 36, 96, 90, 166, 60, 75, 142, 38, 233, 14, 218, 16, 4, 32, 168,
            155, 161, 167, 178, 189, 91, 153, 252, 27, 238, 224, 90, 202, 85, 135, 174, 60, 251,
            70, 40, 210, 160, 53, 143, 32, 130, 82, 183, 232, 190, 64, 0, 9, 2, 1, 1, 2, 1, 3, 0,
            0, 0, 165, 168, 83, 4, 22, 217, 70, 37, 33, 182, 253, 147, 39, 35, 216, 151, 22, 132,
            180, 98, 14, 66, 84, 202, 240, 156, 117, 40, 158, 14, 100, 112, 4, 32, 232, 241, 234,
            234, 48, 58, 184, 92, 10, 32, 220, 110, 128, 186, 85, 30, 63, 171, 43, 133, 112, 35,
            25, 161, 34, 229, 80, 168, 115, 74, 228, 51, 0, 9, 2, 1, 1, 2, 1, 3, 0, 0, 0, 250, 29,
            144, 127, 150, 124, 72, 41, 42, 90, 243, 212, 195, 170, 212, 53, 194, 238, 146, 55, 17,
            150, 20, 214, 18, 174, 227, 180, 245, 46, 54, 20, 17, 17, 17, 1, 32, 3, 193, 33, 26,
            169, 210, 98, 57, 198, 220, 161, 230, 203, 29, 187, 130, 102, 254, 43, 149, 0, 248,
            105, 156, 132, 170, 144, 214, 35, 247, 177, 211, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0, 0,
            0, 0, 0, 61, 0, 4, 1, 1, 0, 5, 2, 1, 1, 1, 0, 114, 204, 69, 18, 112, 198, 19, 132, 211,
            88, 247, 212, 17, 53, 183, 135, 136, 1, 24, 48, 48, 26, 105, 123, 151, 163, 113, 76,
            32, 58, 54, 220, 16, 2, 20, 16, 91, 223, 25, 20, 145, 182, 114, 73, 211, 33, 243, 217,
            190, 189, 248, 44, 154, 51, 149, 254, 243, 54, 198, 11, 55, 1, 175, 5, 147, 231, 16, 1,
            70, 25, 123, 162, 209, 216, 154, 230, 95, 14, 56, 180, 32, 113, 102, 210, 182, 213, 32,
            20, 204, 112, 76, 86, 112, 130, 191, 29, 189, 101, 249, 223, 17, 2, 1, 1, 163, 1, 3, 1,
            0, 0, 30, 0, 27, 0, 0, 2, 3, 0, 20, 187, 61, 240, 37, 227, 47, 217, 13, 31, 238, 231,
            220, 164, 184, 51, 33, 198, 131, 41, 45, 0, 0, 3, 1, 1, 0, 58, 0, 55, 1, 0, 1, 1, 0,
            48, 165, 253, 2, 201, 109, 95, 96, 235, 84, 177, 91, 4, 58, 132, 237, 128, 160, 175,
            128, 78, 255, 74, 43, 254, 161, 252, 159, 237, 50, 50, 50, 199, 171, 18, 7, 35, 104, 9,
            126, 85, 100, 57, 208, 138, 160, 166, 134, 108, 0, 0, 16, 3, 1, 2, 0, 58, 0, 55, 2, 0,
            0, 1, 0, 48, 133, 255, 0, 230, 51, 147, 103, 211, 227, 30, 39, 203, 195, 60, 19, 195,
            205, 12, 110, 151, 58, 91, 144, 46, 118, 102, 141, 122, 109, 175, 131, 193, 41, 37,
            124, 199, 249, 204, 53, 225, 192, 104, 154, 109, 240, 58, 137, 29, 0, 0, 17, 1, 32, 15,
            126, 159, 152, 150, 254, 206, 186, 180, 193, 157, 65, 233, 215, 241, 108, 23, 39, 205,
            99, 217, 219, 86, 244, 213, 176, 67, 34, 242, 146, 86, 203, 127, 3, 1, 0, 0, 11, 0, 8,
            0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 1, 1, 0, 5, 2, 1, 1, 1, 0, 120, 58, 98, 103, 109, 191,
            253, 1, 47, 147, 67, 239, 10, 247, 28, 27, 128, 12, 218, 25, 128, 22, 137, 223, 183,
            226, 55, 44, 204, 195, 237, 157, 16, 2, 127, 14, 148, 229, 76, 99, 255, 220, 211, 211,
            217, 1, 122, 99, 232, 47, 153, 132, 173, 229, 196, 250, 165, 157, 36, 121, 193, 16, 7,
            147, 37, 36, 16, 1, 70, 25, 123, 162, 209, 216, 154, 230, 95, 14, 56, 180, 32, 113,
            102, 210, 182, 213, 32, 20, 204, 112, 76, 86, 112, 130, 191, 29, 189, 101, 249, 223,
            17, 2, 1, 1, 120, 3, 1, 0, 0, 43, 0, 40, 0, 0, 2, 0, 0, 33, 3, 254, 101, 252, 220, 254,
            36, 45, 194, 228, 61, 101, 66, 116, 236, 156, 225, 187, 188, 157, 213, 161, 200, 137,
            69, 238, 239, 24, 204, 147, 21, 31, 127, 0, 0, 3, 1, 1, 0, 30, 0, 27, 1, 0, 1, 3, 0,
            20, 201, 79, 70, 207, 56, 184, 56, 98, 153, 15, 120, 44, 132, 172, 188, 23, 141, 123,
            2, 218, 0, 0, 16, 3, 1, 2, 0, 30, 0, 27, 2, 0, 2, 3, 0, 20, 38, 211, 135, 217, 136, 72,
            98, 249, 97, 96, 221, 89, 202, 89, 107, 220, 232, 45, 167, 70, 0, 0, 17, 1, 32, 27, 36,
            15, 203, 78, 99, 46, 120, 86, 191, 245, 139, 120, 77, 206, 188, 25, 57, 140, 115, 78,
            198, 0, 196, 101, 253, 233, 90, 35, 102, 219, 235, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0,
            0, 0, 0, 0, 96, 0, 4, 1, 1, 0, 5, 2, 1, 1, 1, 0, 202, 58, 16, 234, 179, 184, 137, 70,
            91, 186, 81, 188, 83, 84, 19, 26, 238, 16, 68, 229, 16, 217, 237, 74, 112, 104, 209,
            24, 28, 125, 191, 205, 16, 2, 150, 38, 236, 43, 78, 136, 97, 198, 117, 178, 11, 196,
            69, 99, 51, 216, 196, 31, 208, 192, 185, 201, 240, 183, 128, 71, 198, 99, 78, 186, 184,
            239, 16, 1, 70, 25, 123, 162, 209, 216, 154, 230, 95, 14, 56, 180, 32, 113, 102, 210,
            182, 213, 32, 20, 204, 112, 76, 86, 112, 130, 191, 29, 189, 101, 249, 223, 17, 2, 1, 1,
            133, 1, 3, 1, 0, 0, 30, 0, 27, 0, 0, 3, 2, 0, 20, 251, 217, 218, 165, 153, 61, 229,
            106, 46, 67, 70, 183, 199, 47, 245, 88, 94, 255, 250, 171, 0, 0, 3, 1, 1, 0, 43, 0, 40,
            1, 0, 3, 0, 0, 33, 3, 253, 201, 64, 62, 182, 240, 5, 219, 112, 14, 120, 65, 98, 127,
            79, 146, 231, 198, 93, 22, 115, 132, 205, 87, 164, 244, 228, 101, 131, 194, 26, 254, 0,
            0, 16, 3, 1, 2, 0, 43, 0, 40, 2, 0, 0, 0, 0, 33, 3, 112, 52, 70, 247, 124, 141, 177,
            251, 172, 111, 52, 34, 200, 224, 69, 9, 138, 219, 102, 44, 11, 98, 10, 21, 184, 196,
            217, 236, 210, 163, 222, 250, 0, 0, 17, 1, 32, 53, 168, 221, 106, 101, 237, 66, 153,
            18, 210, 219, 5, 68, 98, 199, 232, 192, 17, 150, 90, 167, 106, 118, 53, 106, 105, 180,
            200, 129, 128, 140, 48, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0, 0, 0, 0, 0, 66, 0, 4, 1, 1,
            0, 5, 2, 1, 1, 1, 0, 215, 243, 151, 168, 22, 242, 63, 50, 233, 166, 205, 42, 181, 176,
            61, 91, 109, 48, 116, 44, 240, 181, 133, 23, 242, 118, 217, 247, 92, 28, 77, 97, 16, 2,
            191, 213, 104, 106, 224, 210, 167, 104, 76, 47, 110, 211, 167, 65, 154, 67, 106, 83,
            137, 175, 201, 168, 74, 27, 178, 42, 29, 236, 223, 167, 98, 93, 16, 1, 70, 25, 123,
            162, 209, 216, 154, 230, 95, 14, 56, 180, 32, 113, 102, 210, 182, 213, 32, 20, 204,
            112, 76, 86, 112, 130, 191, 29, 189, 101, 249, 223, 17, 2, 1, 1, 163, 1, 3, 1, 0, 0,
            30, 0, 27, 0, 0, 2, 3, 0, 20, 94, 14, 73, 216, 8, 173, 33, 208, 29, 7, 221, 121, 154,
            117, 189, 27, 71, 39, 136, 167, 0, 0, 3, 1, 1, 0, 58, 0, 55, 1, 0, 0, 1, 0, 48, 151,
            200, 216, 16, 45, 33, 104, 24, 198, 147, 220, 70, 97, 76, 233, 36, 43, 142, 84, 224,
            90, 143, 241, 245, 32, 163, 105, 75, 148, 129, 9, 29, 146, 144, 107, 19, 185, 178, 118,
            43, 18, 126, 228, 240, 126, 145, 17, 158, 0, 0, 16, 3, 1, 2, 0, 58, 0, 55, 2, 0, 3, 1,
            0, 48, 137, 73, 201, 109, 218, 132, 146, 104, 4, 78, 23, 109, 189, 186, 69, 143, 181,
            222, 172, 129, 233, 145, 135, 147, 189, 184, 55, 245, 175, 238, 12, 36, 150, 165, 147,
            13, 70, 209, 254, 55, 206, 83, 108, 190, 248, 233, 91, 180, 0, 0, 17, 1, 32, 57, 148,
            116, 246, 83, 186, 107, 123, 56, 57, 164, 62, 208, 250, 53, 255, 205, 221, 94, 250, 29,
            14, 112, 130, 148, 27, 214, 36, 12, 33, 159, 128, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0,
            0, 0, 0, 0, 12, 0, 4, 1, 1, 0, 5, 2, 1, 1, 1, 0, 169, 64, 58, 164, 8, 175, 53, 210,
            103, 152, 13, 255, 241, 112, 109, 112, 165, 155, 109, 186, 134, 125, 11, 86, 140, 168,
            197, 183, 117, 96, 214, 122, 16, 2, 118, 203, 254, 130, 45, 123, 159, 104, 99, 249,
            160, 107, 102, 128, 151, 69, 142, 18, 63, 243, 133, 227, 28, 41, 216, 48, 208, 63, 17,
            72, 151, 58, 16, 1, 70, 25, 123, 162, 209, 216, 154, 230, 95, 14, 56, 180, 32, 113,
            102, 210, 182, 213, 32, 20, 204, 112, 76, 86, 112, 130, 191, 29, 189, 101, 249, 223,
            17, 2, 1, 1, 135, 1, 3, 1, 0, 0, 58, 0, 55, 0, 0, 0, 1, 0, 48, 183, 157, 76, 170, 134,
            95, 132, 32, 113, 36, 195, 211, 4, 67, 3, 114, 243, 157, 124, 24, 162, 55, 223, 58,
            113, 227, 196, 251, 123, 169, 171, 152, 22, 67, 154, 128, 155, 235, 134, 6, 195, 187,
            82, 213, 58, 83, 100, 89, 0, 0, 3, 1, 1, 0, 30, 0, 27, 1, 0, 3, 2, 0, 20, 100, 6, 165,
            8, 43, 35, 19, 64, 114, 109, 76, 208, 222, 36, 82, 188, 115, 163, 48, 3, 0, 0, 16, 3,
            1, 2, 0, 30, 0, 27, 2, 0, 1, 3, 0, 20, 74, 199, 180, 47, 82, 78, 29, 27, 34, 9, 143,
            133, 173, 252, 167, 82, 96, 14, 249, 160, 0, 0, 17, 1, 32, 62, 171, 130, 51, 233, 19,
            45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22, 47, 39, 25, 156, 146, 35, 108,
            99, 133, 34, 187, 243, 162, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4,
            1, 1, 0, 5, 2, 1, 1, 1, 0, 214, 81, 34, 23, 150, 181, 32, 106, 91, 150, 120, 164, 217,
            153, 93, 81, 157, 139, 158, 117, 232, 125, 133, 229, 126, 255, 185, 31, 130, 162, 62,
            141, 16, 2, 188, 248, 74, 136, 44, 15, 114, 221, 13, 82, 10, 105, 84, 179, 225, 136,
            127, 165, 91, 125, 198, 118, 53, 180, 69, 22, 133, 107, 49, 253, 32, 168, 16, 1, 70,
            25, 123, 162, 209, 216, 154, 230, 95, 14, 56, 180, 32, 113, 102, 210, 182, 213, 32, 20,
            204, 112, 76, 86, 112, 130, 191, 29, 189, 101, 249, 223, 17, 2, 1, 1, 148, 1, 3, 1, 0,
            0, 30, 0, 27, 0, 0, 1, 2, 0, 20, 68, 99, 161, 169, 148, 213, 4, 14, 105, 192, 144, 182,
            152, 93, 122, 242, 149, 191, 209, 26, 0, 0, 3, 1, 1, 0, 58, 0, 55, 1, 0, 2, 1, 0, 48,
            151, 57, 136, 178, 145, 253, 27, 202, 134, 217, 6, 114, 62, 51, 91, 223, 19, 211, 235,
            186, 223, 234, 49, 221, 22, 75, 60, 103, 44, 22, 218, 114, 175, 142, 110, 223, 192,
            186, 196, 75, 146, 184, 197, 54, 215, 8, 220, 51, 0, 0, 16, 3, 1, 2, 0, 43, 0, 40, 2,
            0, 3, 0, 0, 33, 3, 96, 218, 121, 197, 137, 149, 228, 236, 136, 81, 42, 249, 164, 68,
            12, 164, 242, 215, 191, 232, 66, 64, 225, 126, 255, 196, 221, 140, 233, 64, 51, 162, 0,
            0, 17, 1, 32, 127, 61, 253, 44, 203, 5, 79, 65, 14, 231, 126, 176, 46, 231, 180, 234,
            150, 7, 149, 216, 151, 70, 205, 194, 38, 221, 216, 153, 230, 172, 78, 81, 127, 3, 1, 0,
            0, 11, 0, 8, 0, 0, 0, 0, 0, 0, 0, 88, 0, 4, 1, 1, 0, 5, 2, 1, 1, 1, 0, 217, 95, 249,
            131, 219, 147, 62, 220, 103, 84, 135, 166, 244, 227, 136, 252, 242, 219, 89, 49, 58,
            234, 181, 244, 89, 145, 167, 242, 71, 23, 116, 71, 16, 2, 53, 95, 152, 195, 143, 216,
            124, 165, 119, 94, 94, 69, 18, 67, 235, 17, 48, 14, 217, 31, 201, 80, 234, 32, 76, 10,
            116, 185, 161, 153, 26, 37, 16, 1, 70, 25, 123, 162, 209, 216, 154, 230, 95, 14, 56,
            180, 32, 113, 102, 210, 182, 213, 32, 20, 204, 112, 76, 86, 112, 130, 191, 29, 189,
            101, 249, 223, 17, 2, 1, 1, 163, 1, 3, 1, 0, 0, 58, 0, 55, 0, 0, 3, 1, 0, 48, 179, 66,
            56, 68, 186, 232, 165, 145, 187, 251, 67, 123, 85, 86, 107, 93, 97, 229, 78, 230, 79,
            147, 53, 27, 10, 59, 157, 75, 115, 20, 69, 210, 92, 227, 103, 247, 174, 223, 203, 50,
            189, 60, 209, 67, 8, 165, 76, 245, 0, 0, 3, 1, 1, 0, 58, 0, 55, 1, 0, 1, 1, 0, 48, 161,
            84, 193, 144, 130, 172, 107, 95, 236, 114, 184, 31, 100, 136, 85, 15, 236, 113, 73,
            213, 47, 102, 180, 70, 57, 21, 166, 17, 121, 196, 241, 248, 80, 125, 54, 102, 20, 180,
            84, 218, 191, 44, 148, 34, 53, 202, 173, 1, 0, 0, 16, 3, 1, 2, 0, 30, 0, 27, 2, 0, 3,
            3, 0, 20, 10, 140, 20, 116, 92, 152, 47, 159, 220, 67, 170, 152, 92, 2, 177, 229, 191,
            246, 196, 3, 0, 0, 17, 1, 32, 151, 172, 124, 81, 243, 147, 225, 5, 188, 204, 9, 152,
            150, 127, 129, 13, 246, 19, 141, 93, 239, 8, 214, 194, 123, 127, 177, 23, 144, 211,
            189, 239, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0, 0, 0, 0, 0, 98, 0, 4, 1, 1, 0, 5, 2, 1,
            1, 1, 0, 65, 44, 30, 125, 226, 57, 77, 205, 0, 146, 35, 235, 140, 58, 36, 227, 75, 147,
            167, 196, 141, 240, 187, 134, 73, 145, 96, 163, 30, 169, 219, 219, 16, 2, 24, 5, 144,
            238, 195, 51, 151, 3, 70, 117, 243, 121, 207, 23, 246, 44, 14, 119, 209, 119, 36, 160,
            50, 56, 220, 211, 242, 22, 164, 188, 149, 9, 16, 1, 70, 25, 123, 162, 209, 216, 154,
            230, 95, 14, 56, 180, 32, 113, 102, 210, 182, 213, 32, 20, 204, 112, 76, 86, 112, 130,
            191, 29, 189, 101, 249, 223, 17, 2, 1, 1, 148, 1, 3, 1, 0, 0, 58, 0, 55, 0, 0, 2, 1, 0,
            48, 175, 164, 55, 10, 165, 164, 138, 178, 243, 171, 81, 12, 202, 186, 59, 109, 140,
            245, 23, 82, 48, 69, 7, 230, 163, 65, 196, 228, 255, 106, 167, 192, 118, 16, 165, 3,
            180, 47, 71, 152, 52, 176, 50, 210, 93, 209, 96, 89, 0, 0, 3, 1, 1, 0, 43, 0, 40, 1, 0,
            3, 0, 0, 33, 3, 169, 88, 76, 69, 128, 209, 101, 210, 116, 75, 164, 154, 112, 71, 38,
            83, 145, 91, 253, 190, 196, 190, 244, 113, 226, 108, 228, 193, 201, 230, 198, 171, 0,
            0, 16, 3, 1, 2, 0, 30, 0, 27, 2, 0, 1, 2, 0, 20, 69, 208, 69, 88, 162, 107, 140, 160,
            75, 72, 105, 87, 200, 171, 245, 171, 242, 78, 199, 111, 0, 0, 17, 1, 32, 168, 155, 161,
            167, 178, 189, 91, 153, 252, 27, 238, 224, 90, 202, 85, 135, 174, 60, 251, 70, 40, 210,
            160, 53, 143, 32, 130, 82, 183, 232, 190, 64, 127, 3, 1, 0, 0, 11, 0, 8, 0, 0, 0, 0, 0,
            0, 0, 93, 0, 4, 1, 1, 0, 5, 2, 1, 1, 1, 0, 241, 64, 24, 106, 107, 212, 19, 165, 8, 20,
            219, 72, 75, 0, 57, 140, 46, 126, 109, 169, 251, 226, 203, 83, 103, 40, 232, 128, 222,
            183, 80, 96, 16, 2, 119, 103, 247, 95, 222, 212, 127, 148, 166, 248, 28, 103, 29, 68,
            139, 237, 219, 108, 39, 39, 241, 242, 9, 186, 1, 91, 248, 222, 115, 49, 193, 60, 16, 1,
            70, 25, 123, 162, 209, 216, 154, 230, 95, 14, 56, 180, 32, 113, 102, 210, 182, 213, 32,
            20, 204, 112, 76, 86, 112, 130, 191, 29, 189, 101, 249, 223, 17, 2, 1, 1, 133, 1, 3, 1,
            0, 0, 43, 0, 40, 0, 0, 0, 0, 0, 33, 2, 238, 189, 47, 145, 129, 138, 35, 78, 24, 121,
            248, 165, 86, 82, 241, 229, 36, 25, 173, 22, 139, 143, 39, 185, 27, 230, 183, 153, 88,
            247, 165, 81, 0, 0, 3, 1, 1, 0, 43, 0, 40, 1, 0, 2, 0, 0, 33, 2, 20, 169, 29, 252, 179,
            103, 24, 32, 154, 94, 231, 156, 41, 0, 41, 184, 73, 241, 206, 47, 238, 246, 88, 90, 59,
            63, 163, 125, 4, 251, 98, 183, 0, 0, 16, 3, 1, 2, 0, 30, 0, 27, 2, 0, 3, 2, 0, 20, 78,
            228, 144, 8, 65, 96, 252, 139, 30, 115, 54, 29, 90, 76, 5, 91, 238, 231, 125, 140, 0,
            0, 17, 1, 32, 232, 241, 234, 234, 48, 58, 184, 92, 10, 32, 220, 110, 128, 186, 85, 30,
            63, 171, 43, 133, 112, 35, 25, 161, 34, 229, 80, 168, 115, 74, 228, 51, 127, 3, 1, 0,
            0, 11, 0, 8, 0, 0, 0, 0, 0, 0, 0, 79, 0, 4, 1, 1, 0, 5, 2, 1, 1, 1, 0, 235, 144, 179,
            198, 217, 165, 71, 227, 184, 161, 17, 31, 98, 30, 13, 190, 91, 252, 104, 168, 25, 99,
            113, 212, 151, 203, 41, 18, 250, 128, 157, 0, 16, 2, 171, 128, 206, 123, 108, 164, 135,
            93, 188, 125, 193, 240, 217, 2, 85, 22, 40, 201, 123, 35, 131, 194, 125, 4, 83, 141,
            70, 169, 125, 60, 173, 67, 16, 1, 70, 25, 123, 162, 209, 216, 154, 230, 95, 14, 56,
            180, 32, 113, 102, 210, 182, 213, 32, 20, 204, 112, 76, 86, 112, 130, 191, 29, 189,
            101, 249, 223, 17, 2, 1, 1, 135, 1, 3, 1, 0, 0, 30, 0, 27, 0, 0, 2, 3, 0, 20, 154, 6,
            31, 49, 115, 76, 95, 95, 11, 17, 154, 183, 45, 67, 60, 154, 241, 51, 211, 166, 0, 0, 3,
            1, 1, 0, 58, 0, 55, 1, 0, 1, 1, 0, 48, 150, 225, 252, 99, 25, 52, 161, 74, 205, 49, 63,
            242, 140, 162, 156, 158, 155, 67, 24, 27, 141, 242, 147, 134, 112, 43, 26, 45, 101,
            167, 204, 130, 54, 131, 245, 115, 62, 41, 111, 180, 12, 115, 100, 139, 201, 203, 246,
            37, 0, 0, 16, 3, 1, 2, 0, 30, 0, 27, 2, 0, 1, 2, 0, 20, 116, 241, 133, 170, 82, 127,
            49, 32, 36, 66, 210, 8, 205, 178, 144, 95, 167, 20, 3, 41, 0, 0, 17, 2, 1, 96, 159, 6,
            4, 32, 3, 193, 33, 26, 169, 210, 98, 57, 198, 220, 161, 230, 203, 29, 187, 130, 102,
            254, 43, 149, 0, 248, 105, 156, 132, 170, 144, 214, 35, 247, 177, 211, 0, 11, 3, 253,
            164, 217, 58, 64, 48, 23, 0, 0, 0, 149, 132, 12, 107, 224, 86, 237, 61, 25, 157, 237,
            245, 38, 90, 93, 61, 175, 209, 149, 170, 76, 181, 76, 162, 105, 67, 247, 224, 146, 165,
            240, 105, 4, 32, 15, 126, 159, 152, 150, 254, 206, 186, 180, 193, 157, 65, 233, 215,
            241, 108, 23, 39, 205, 99, 217, 219, 86, 244, 213, 176, 67, 34, 242, 146, 86, 203, 0,
            11, 3, 253, 98, 19, 45, 65, 7, 24, 0, 0, 0, 185, 222, 201, 37, 149, 229, 234, 187, 109,
            224, 69, 120, 40, 39, 189, 152, 182, 11, 146, 82, 40, 126, 236, 15, 142, 52, 80, 234,
            124, 89, 97, 155, 16, 4, 32, 27, 36, 15, 203, 78, 99, 46, 120, 86, 191, 245, 139, 120,
            77, 206, 188, 25, 57, 140, 115, 78, 198, 0, 196, 101, 253, 233, 90, 35, 102, 219, 235,
            0, 11, 3, 253, 142, 41, 118, 29, 84, 5, 0, 0, 0, 56, 13, 26, 140, 179, 81, 27, 62, 207,
            119, 10, 29, 129, 244, 12, 41, 49, 130, 210, 156, 240, 87, 73, 98, 219, 80, 196, 207,
            182, 38, 253, 183, 17, 4, 32, 53, 168, 221, 106, 101, 237, 66, 153, 18, 210, 219, 5,
            68, 98, 199, 232, 192, 17, 150, 90, 167, 106, 118, 53, 106, 105, 180, 200, 129, 128,
            140, 48, 0, 11, 3, 253, 98, 185, 191, 225, 53, 25, 0, 0, 0, 46, 239, 167, 82, 56, 101,
            128, 195, 16, 132, 181, 79, 33, 25, 151, 60, 206, 246, 172, 146, 252, 56, 96, 126, 134,
            9, 232, 150, 201, 153, 76, 62, 16, 4, 32, 57, 148, 116, 246, 83, 186, 107, 123, 56, 57,
            164, 62, 208, 250, 53, 255, 205, 221, 94, 250, 29, 14, 112, 130, 148, 27, 214, 36, 12,
            33, 159, 128, 0, 11, 3, 253, 208, 161, 183, 238, 226, 20, 0, 0, 0, 34, 113, 182, 72,
            168, 146, 91, 140, 113, 117, 67, 69, 58, 89, 163, 162, 10, 60, 82, 206, 155, 62, 95,
            199, 147, 152, 60, 100, 249, 246, 254, 160, 4, 32, 62, 171, 130, 51, 233, 19, 45, 191,
            194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22, 47, 39, 25, 156, 146, 35, 108, 99, 133,
            34, 187, 243, 162, 0, 11, 3, 253, 28, 177, 42, 91, 38, 20, 0, 0, 0, 104, 243, 24, 41,
            234, 236, 2, 247, 229, 237, 218, 218, 18, 157, 73, 129, 169, 155, 218, 14, 92, 15, 212,
            239, 243, 194, 62, 175, 194, 199, 154, 2, 16, 4, 32, 127, 61, 253, 44, 203, 5, 79, 65,
            14, 231, 126, 176, 46, 231, 180, 234, 150, 7, 149, 216, 151, 70, 205, 194, 38, 221,
            216, 153, 230, 172, 78, 81, 0, 11, 3, 253, 88, 107, 162, 93, 31, 26, 0, 0, 0, 94, 59,
            56, 166, 217, 190, 222, 37, 14, 208, 182, 18, 208, 25, 21, 167, 129, 130, 238, 24, 216,
            25, 208, 125, 67, 174, 146, 87, 40, 180, 45, 45, 17, 4, 32, 151, 172, 124, 81, 243,
            147, 225, 5, 188, 204, 9, 152, 150, 127, 129, 13, 246, 19, 141, 93, 239, 8, 214, 194,
            123, 127, 177, 23, 144, 211, 189, 239, 0, 11, 3, 253, 18, 11, 81, 244, 234, 16, 0, 0,
            0, 190, 56, 11, 19, 207, 215, 20, 147, 50, 229, 172, 129, 138, 232, 77, 49, 228, 190,
            17, 155, 192, 235, 215, 23, 71, 86, 48, 246, 243, 139, 110, 144, 16, 4, 32, 168, 155,
            161, 167, 178, 189, 91, 153, 252, 27, 238, 224, 90, 202, 85, 135, 174, 60, 251, 70, 40,
            210, 160, 53, 143, 32, 130, 82, 183, 232, 190, 64, 0, 11, 3, 253, 80, 93, 108, 146,
            111, 13, 0, 0, 0, 149, 0, 32, 76, 105, 140, 193, 47, 201, 103, 116, 163, 79, 119, 65,
            92, 55, 55, 111, 241, 123, 73, 40, 56, 228, 20, 215, 116, 181, 183, 190, 193, 4, 32,
            232, 241, 234, 234, 48, 58, 184, 92, 10, 32, 220, 110, 128, 186, 85, 30, 63, 171, 43,
            133, 112, 35, 25, 161, 34, 229, 80, 168, 115, 74, 228, 51, 0, 11, 3, 253, 30, 7, 137,
            132, 105, 8, 0, 0, 0, 100, 217, 149, 244, 181, 182, 44, 72, 10, 4, 241, 184, 251, 76,
            122, 48, 182, 7, 241, 45, 164, 171, 195, 87, 153, 62, 231, 80, 91, 225, 155, 38, 17,
            17, 17,
        ]
    }

    #[test]
    fn test_verify_full_identity_by_public_key_hash() {
        let proof: &[u8] = single_identity_proof();
        let key_hash: PublicKeyHash = [
            68, 99, 161, 169, 148, 213, 4, 14, 105, 192, 144, 182, 152, 93, 122, 242, 149, 191,
            209, 26,
        ];
        let (_root_hash, proved_identity) =
            Drive::verify_full_identity_by_public_key_hash(proof, key_hash).expect("should verify");
        // verify part of the identity, make sure it's the correct one
        assert!(proved_identity.is_some());
        let proved_identity = proved_identity.unwrap();
        assert_eq!(proved_identity.protocol_version, 1);
        assert_eq!(proved_identity.public_keys.len(), 3);
        assert_eq!(proved_identity.balance, 11077485418638);
    }

    #[test]
    fn multiple_identity_proofs() {
        let proof = multiple_identity_proof();
        let key_hashes: &[PublicKeyHash] = &[
            [
                31, 8, 21, 38, 154, 252, 1, 45, 228, 66, 96, 206, 178, 138, 68, 150, 211, 24, 65,
                132,
            ],
            [
                68, 99, 161, 169, 148, 213, 4, 14, 105, 192, 144, 182, 152, 93, 122, 242, 149, 191,
                209, 26,
            ],
            [
                94, 14, 73, 216, 8, 173, 33, 208, 29, 7, 221, 121, 154, 117, 189, 27, 71, 39, 136,
                167,
            ],
            [
                103, 137, 42, 243, 144, 205, 43, 118, 83, 169, 24, 199, 182, 146, 200, 91, 135,
                180, 77, 50,
            ],
            [
                154, 6, 31, 49, 115, 76, 95, 95, 11, 17, 154, 183, 45, 67, 60, 154, 241, 51, 211,
                166,
            ],
            [
                165, 73, 33, 187, 41, 182, 126, 49, 137, 142, 254, 188, 41, 242, 65, 177, 174, 250,
                77, 202,
            ],
            [
                179, 191, 206, 71, 141, 233, 111, 227, 12, 211, 113, 59, 248, 140, 231, 114, 134,
                135, 218, 138,
            ],
            [
                187, 61, 240, 37, 227, 47, 217, 13, 31, 238, 231, 220, 164, 184, 51, 33, 198, 131,
                41, 45,
            ],
            [
                237, 115, 138, 170, 221, 117, 209, 103, 127, 239, 236, 202, 221, 3, 63, 18, 108,
                254, 231, 106,
            ],
            [
                251, 217, 218, 165, 153, 61, 229, 106, 46, 67, 70, 183, 199, 47, 245, 88, 94, 255,
                250, 171,
            ],
        ];

        let (_, proved_identities): ([u8; 32], BTreeMap<PublicKeyHash, Option<DppIdentity>>) =
            Drive::verify_full_identities_by_public_key_hashes(proof, key_hashes)
                .expect("expect that this be verified");
        assert_eq!(proved_identities.len(), 10);
        dbg!(proved_identities.values());
    }

    #[test]
    fn verify_full_identity_by_identity_id() {
        let proof = single_identity_proof();
        let identity_id: [u8; 32] = [
            62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22, 47,
            39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162,
        ];
        dbg!(hex::encode(identity_id));
        let (_root_hash, maybe_identity) =
            Drive::verify_full_identity_by_identity_id(proof, true, identity_id)
                .expect("verification failed");
        let identity = maybe_identity.expect("couldn't get identity");
        assert_eq!(identity.protocol_version, 1);
        assert_eq!(identity.public_keys.len(), 3);
        assert_eq!(identity.balance, 11077485418638);
    }

    #[test]
    fn verify_identity_id_by_public_key_hash() {
        let proof = multiple_identity_proof();
        let public_key_hash: PublicKeyHash = [
            31, 8, 21, 38, 154, 252, 1, 45, 228, 66, 96, 206, 178, 138, 68, 150, 211, 24, 65, 132,
        ];
        let (_root_hash, maybe_identity_id) =
            Drive::verify_identity_id_by_public_key_hash(proof, true, public_key_hash)
                .expect("should verify");
        let expected_identity_id: [u8; 32] = [
            15, 126, 159, 152, 150, 254, 206, 186, 180, 193, 157, 65, 233, 215, 241, 108, 23, 39,
            205, 99, 217, 219, 86, 244, 213, 176, 67, 34, 242, 146, 86, 203,
        ];
        let actual_identity_id = maybe_identity_id.expect("should have identity id");
        assert_eq!(expected_identity_id, actual_identity_id);
    }

    #[ignore]
    #[test]
    fn verify_identity_balance_by_identity_id() {
        // TODO: given identity proof is a subset proof but this verify function expects non-subset proof
        let proof = single_identity_proof();
        let identity_id: [u8; 32] = [
            62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22, 47,
            39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162,
        ];
        let (_root_hash, maybe_balance) =
            Drive::verify_identity_balance_for_identity_id(proof, identity_id)
                .expect("should verify");
        let actual_balance = maybe_balance.expect("should have balance");
        assert_eq!(actual_balance, 11077485418639);
    }

    #[test]
    fn verify_identity_balances_by_identity_ids() {
        let proof = multiple_identity_proof();
        let identity_ids: &[[u8; 32]] = &[
            [
                62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22,
                47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162,
            ],
            [
                151, 172, 124, 81, 243, 147, 225, 5, 188, 204, 9, 152, 150, 127, 129, 13, 246, 19,
                141, 93, 239, 8, 214, 194, 123, 127, 177, 23, 144, 211, 189, 239,
            ],
        ];
        let (_, balances): (RootHash, Vec<([u8; 32], Option<u64>)>) =
            Drive::verify_identity_balances_for_identity_ids(proof, true, identity_ids)
                .expect("should verify");
        assert_eq!(balances.len(), 2);
        assert_eq!(balances[0].1.unwrap(), 11077485418638);
        assert_eq!(balances[1].1.unwrap(), 9300653671817);
    }

    #[test]
    fn verify_identity_ids_by_public_key_hashes() {
        let proof = multiple_identity_proof();
        let public_key_hashes: &[PublicKeyHash] = &[
            [
                31, 8, 21, 38, 154, 252, 1, 45, 228, 66, 96, 206, 178, 138, 68, 150, 211, 24, 65,
                132,
            ],
            [
                68, 99, 161, 169, 148, 213, 4, 14, 105, 192, 144, 182, 152, 93, 122, 242, 149, 191,
                209, 26,
            ],
            [
                94, 14, 73, 216, 8, 173, 33, 208, 29, 7, 221, 121, 154, 117, 189, 27, 71, 39, 136,
                167,
            ],
        ];
        let (_, ids): (RootHash, Vec<([u8; 20], Option<[u8; 32]>)>) =
            Drive::verify_identity_ids_by_public_key_hashes(proof, true, public_key_hashes)
                .expect("should verify");
        assert_eq!(ids.len(), 3);
        assert_eq!(
            ids[0].1.unwrap(),
            [
                15, 126, 159, 152, 150, 254, 206, 186, 180, 193, 157, 65, 233, 215, 241, 108, 23,
                39, 205, 99, 217, 219, 86, 244, 213, 176, 67, 34, 242, 146, 86, 203
            ]
        );
        assert_eq!(
            ids[1].1.unwrap(),
            [
                62, 171, 130, 51, 233, 19, 45, 191, 194, 183, 0, 171, 182, 77, 93, 70, 216, 67, 22,
                47, 39, 25, 156, 146, 35, 108, 99, 133, 34, 187, 243, 162,
            ]
        );
        assert_eq!(
            ids[2].1.unwrap(),
            [
                53, 168, 221, 106, 101, 237, 66, 153, 18, 210, 219, 5, 68, 98, 199, 232, 192, 17,
                150, 90, 167, 106, 118, 53, 106, 105, 180, 200, 129, 128, 140, 48,
            ]
        );
    }
}
