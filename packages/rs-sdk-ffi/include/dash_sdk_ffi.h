#ifndef DASH_UNIFIED_FFI_H
#define DASH_UNIFIED_FFI_H

#pragma once

/* This file is auto-generated by merging Dash SDK and SPV FFI headers. Do not modify manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

// ============================================================================
// Dash SPV FFI Functions and Types
// ============================================================================


typedef enum FFIMempoolStrategy {
  FetchAll = 0,
  BloomFilter = 1,
  Selective = 2,
} FFIMempoolStrategy;

typedef enum FFINetwork {
  Dash = 0,
  FFITestnet = 1,
  FFIRegtest = 2,
  FFIDevnet = 3,
} FFINetwork;

typedef enum FFISyncStage {
  Connecting = 0,
  QueryingHeight = 1,
  Downloading = 2,
  Validating = 3,
  Storing = 4,
  Complete = 5,
  Failed = 6,
} FFISyncStage;

typedef enum FFIValidationMode {
  NoValidation = 0,
  Basic = 1,
  Full = 2,
} FFIValidationMode;

typedef enum FFIWatchItemType {
  Address = 0,
  Script = 1,
  Outpoint = 2,
} FFIWatchItemType;

typedef struct FFIClientConfig FFIClientConfig;

/**
 * FFIDashSpvClient structure
 */
typedef struct FFIDashSpvClient FFIDashSpvClient;

typedef struct FFIString {
  char *ptr;
  uintptr_t length;
} FFIString;

typedef struct FFIDetailedSyncProgress {
  uint32_t current_height;
  uint32_t total_height;
  double percentage;
  double headers_per_second;
  int64_t estimated_seconds_remaining;
  enum FFISyncStage stage;
  struct FFIString stage_message;
  uint32_t connected_peers;
  uint64_t total_headers;
  int64_t sync_start_timestamp;
} FFIDetailedSyncProgress;

typedef struct FFISyncProgress {
  uint32_t header_height;
  uint32_t filter_header_height;
  uint32_t masternode_height;
  uint32_t peer_count;
  bool headers_synced;
  bool filter_headers_synced;
  bool masternodes_synced;
  bool filter_sync_available;
  uint32_t filters_downloaded;
  uint32_t last_synced_filter_height;
} FFISyncProgress;

typedef struct FFISpvStats {
  uint32_t connected_peers;
  uint32_t total_peers;
  uint32_t header_height;
  uint32_t filter_height;
  uint64_t headers_downloaded;
  uint64_t filter_headers_downloaded;
  uint64_t filters_downloaded;
  uint64_t filters_matched;
  uint64_t blocks_processed;
  uint64_t bytes_received;
  uint64_t bytes_sent;
  uint64_t uptime;
} FFISpvStats;

typedef struct FFIWatchItem {
  enum FFIWatchItemType item_type;
  struct FFIString data;
} FFIWatchItem;

typedef struct FFIBalance {
  uint64_t confirmed;
  uint64_t pending;
  uint64_t instantlocked;
  uint64_t mempool;
  uint64_t mempool_instant;
  uint64_t total;
} FFIBalance;

/**
 * FFI-safe array that transfers ownership of memory to the C caller.
 *
 * # Safety
 *
 * This struct represents memory that has been allocated by Rust but ownership
 * has been transferred to the C caller. The caller is responsible for:
 * - Not accessing the memory after it has been freed
 * - Calling `dash_spv_ffi_array_destroy` to properly deallocate the memory
 * - Ensuring the data, len, and capacity fields remain consistent
 */
typedef struct FFIArray {
  void *data;
  uintptr_t len;
  uintptr_t capacity;
} FFIArray;

typedef void (*BlockCallback)(uint32_t height, const uint8_t (*hash)[32], void *user_data);

typedef void (*TransactionCallback)(const uint8_t (*txid)[32],
                                    bool confirmed,
                                    int64_t amount,
                                    const char *addresses,
                                    uint32_t block_height,
                                    void *user_data);

typedef void (*BalanceCallback)(uint64_t confirmed, uint64_t unconfirmed, void *user_data);

typedef void (*MempoolTransactionCallback)(const uint8_t (*txid)[32],
                                           int64_t amount,
                                           const char *addresses,
                                           bool is_instant_send,
                                           void *user_data);

typedef void (*MempoolConfirmedCallback)(const uint8_t (*txid)[32],
                                         uint32_t block_height,
                                         const uint8_t (*block_hash)[32],
                                         void *user_data);

typedef void (*MempoolRemovedCallback)(const uint8_t (*txid)[32], uint8_t reason, void *user_data);

typedef struct FFIEventCallbacks {
  BlockCallback on_block;
  TransactionCallback on_transaction;
  BalanceCallback on_balance_update;
  MempoolTransactionCallback on_mempool_transaction_added;
  MempoolConfirmedCallback on_mempool_transaction_confirmed;
  MempoolRemovedCallback on_mempool_transaction_removed;
  void *user_data;
} FFIEventCallbacks;

typedef struct FFITransaction {
  struct FFIString txid;
  int32_t version;
  uint32_t locktime;
  uint32_t size;
  uint32_t weight;
} FFITransaction;

/**
 * Handle for Core SDK that can be passed to Platform SDK
 */

/**
 * FFIResult type for error handling
 */
typedef struct FFIResult {
  int32_t error_code;
  const char *error_message;
} FFIResult;

/**
 * FFI-safe representation of an unconfirmed transaction
 *
 * # Safety
 *
 * This struct contains raw pointers that must be properly managed:
 *
 * - `raw_tx`: A pointer to the raw transaction bytes. The caller is responsible for:
 *   - Allocating this memory before passing it to Rust
 *   - Ensuring the pointer remains valid for the lifetime of this struct
 *   - Freeing the memory after use with `dash_spv_ffi_unconfirmed_transaction_destroy_raw_tx`
 *
 * - `addresses`: A pointer to an array of FFIString objects. The caller is responsible for:
 *   - Allocating this array before passing it to Rust
 *   - Ensuring the pointer remains valid for the lifetime of this struct
 *   - Freeing each FFIString in the array with `dash_spv_ffi_string_destroy`
 *   - Freeing the array itself after use with `dash_spv_ffi_unconfirmed_transaction_destroy_addresses`
 *
 * Use `dash_spv_ffi_unconfirmed_transaction_destroy` to safely clean up all resources
 * associated with this struct.
 */
typedef struct FFIUnconfirmedTransaction {
  struct FFIString txid;
  uint8_t *raw_tx;
  uintptr_t raw_tx_len;
  int64_t amount;
  uint64_t fee;
  bool is_instant_send;
  bool is_outgoing;
  struct FFIString *addresses;
  uintptr_t addresses_len;
} FFIUnconfirmedTransaction;

typedef struct FFIUtxo {
  struct FFIString txid;
  uint32_t vout;
  uint64_t amount;
  struct FFIString script_pubkey;
  struct FFIString address;
  uint32_t height;
  bool is_coinbase;
  bool is_confirmed;
  bool is_instantlocked;
} FFIUtxo;

typedef struct FFITransactionResult {
  struct FFIString txid;
  int32_t version;
  uint32_t locktime;
  uint32_t size;
  uint32_t weight;
  uint64_t fee;
  uint64_t confirmation_time;
  uint32_t confirmation_height;
} FFITransactionResult;

typedef struct FFIBlockResult {
  struct FFIString hash;
  uint32_t height;
  uint32_t time;
  uint32_t tx_count;
} FFIBlockResult;

typedef struct FFIFilterMatch {
  struct FFIString block_hash;
  uint32_t height;
  bool block_requested;
} FFIFilterMatch;

typedef struct FFIAddressStats {
  struct FFIString address;
  uint32_t utxo_count;
  uint64_t total_value;
  uint64_t confirmed_value;
  uint64_t pending_value;
  uint32_t spendable_count;
  uint32_t coinbase_count;
} FFIAddressStats;

struct FFIDashSpvClient *dash_spv_ffi_client_new(const struct FFIClientConfig *config);

int32_t dash_spv_ffi_client_start(struct FFIDashSpvClient *client);

int32_t dash_spv_ffi_client_stop(struct FFIDashSpvClient *client);

/**
 * Sync the SPV client to the chain tip.
 *
 * # Safety
 *
 * This function is unsafe because:
 * - `client` must be a valid pointer to an initialized `FFIDashSpvClient`
 * - `user_data` must satisfy thread safety requirements:
 *   - If non-null, it must point to data that is safe to access from multiple threads
 *   - The caller must ensure proper synchronization if the data is mutable
 *   - The data must remain valid for the entire duration of the sync operation
 * - `completion_callback` must be thread-safe and can be called from any thread
 *
 * # Parameters
 *
 * - `client`: Pointer to the SPV client
 * - `completion_callback`: Optional callback invoked on completion
 * - `user_data`: Optional user data pointer passed to callbacks
 *
 * # Returns
 *
 * 0 on success, error code on failure
 */
int32_t dash_spv_ffi_client_sync_to_tip(struct FFIDashSpvClient *client,
                                        void (*completion_callback)(bool, const char*, void*),
                                        void *user_data);

/**
 * Performs a test synchronization of the SPV client
 *
 * # Parameters
 * - `client`: Pointer to an FFIDashSpvClient instance
 *
 * # Returns
 * - `0` on success
 * - Negative error code on failure
 *
 * # Safety
 * This function is unsafe because it dereferences a raw pointer.
 * The caller must ensure that the client pointer is valid.
 */
int32_t dash_spv_ffi_client_test_sync(struct FFIDashSpvClient *client);

/**
 * Sync the SPV client to the chain tip with detailed progress updates.
 *
 * # Safety
 *
 * This function is unsafe because:
 * - `client` must be a valid pointer to an initialized `FFIDashSpvClient`
 * - `user_data` must satisfy thread safety requirements:
 *   - If non-null, it must point to data that is safe to access from multiple threads
 *   - The caller must ensure proper synchronization if the data is mutable
 *   - The data must remain valid for the entire duration of the sync operation
 * - Both `progress_callback` and `completion_callback` must be thread-safe and can be called from any thread
 *
 * # Parameters
 *
 * - `client`: Pointer to the SPV client
 * - `progress_callback`: Optional callback invoked periodically with sync progress
 * - `completion_callback`: Optional callback invoked on completion
 * - `user_data`: Optional user data pointer passed to all callbacks
 *
 * # Returns
 *
 * 0 on success, error code on failure
 */
int32_t dash_spv_ffi_client_sync_to_tip_with_progress(struct FFIDashSpvClient *client,
                                                      void (*progress_callback)(const struct FFIDetailedSyncProgress*,
                                                                                void*),
                                                      void (*completion_callback)(bool,
                                                                                  const char*,
                                                                                  void*),
                                                      void *user_data);

/**
 * Cancels the sync operation.
 *
 * **Note**: This function currently only stops the SPV client and clears sync callbacks,
 * but does not fully abort the ongoing sync process. The sync operation may continue
 * running in the background until it completes naturally. Full sync cancellation with
 * proper task abortion is not yet implemented.
 *
 * # Safety
 * The client pointer must be valid and non-null.
 *
 * # Returns
 * Returns 0 on success, or an error code on failure.
 */
int32_t dash_spv_ffi_client_cancel_sync(struct FFIDashSpvClient *client);

struct FFISyncProgress *dash_spv_ffi_client_get_sync_progress(struct FFIDashSpvClient *client);

struct FFISpvStats *dash_spv_ffi_client_get_stats(struct FFIDashSpvClient *client);

bool dash_spv_ffi_client_is_filter_sync_available(struct FFIDashSpvClient *client);

int32_t dash_spv_ffi_client_add_watch_item(struct FFIDashSpvClient *client,
                                           const struct FFIWatchItem *item);

int32_t dash_spv_ffi_client_remove_watch_item(struct FFIDashSpvClient *client,
                                              const struct FFIWatchItem *item);

struct FFIBalance *dash_spv_ffi_client_get_address_balance(struct FFIDashSpvClient *client,
                                                           const char *address);

struct FFIArray dash_spv_ffi_client_get_utxos(struct FFIDashSpvClient *client);

struct FFIArray dash_spv_ffi_client_get_utxos_for_address(struct FFIDashSpvClient *client,
                                                          const char *address);

int32_t dash_spv_ffi_client_set_event_callbacks(struct FFIDashSpvClient *client,
                                                struct FFIEventCallbacks callbacks);

void dash_spv_ffi_client_destroy(struct FFIDashSpvClient *client);

void dash_spv_ffi_sync_progress_destroy(struct FFISyncProgress *progress);

void dash_spv_ffi_spv_stats_destroy(struct FFISpvStats *stats);

int32_t dash_spv_ffi_client_watch_address(struct FFIDashSpvClient *client, const char *address);

int32_t dash_spv_ffi_client_unwatch_address(struct FFIDashSpvClient *client, const char *address);

int32_t dash_spv_ffi_client_watch_script(struct FFIDashSpvClient *client, const char *script_hex);

int32_t dash_spv_ffi_client_unwatch_script(struct FFIDashSpvClient *client, const char *script_hex);

struct FFIArray dash_spv_ffi_client_get_address_history(struct FFIDashSpvClient *client,
                                                        const char *address);

struct FFITransaction *dash_spv_ffi_client_get_transaction(struct FFIDashSpvClient *client,
                                                           const char *txid);

int32_t dash_spv_ffi_client_broadcast_transaction(struct FFIDashSpvClient *client,
                                                  const char *tx_hex);

struct FFIArray dash_spv_ffi_client_get_watched_addresses(struct FFIDashSpvClient *client);

struct FFIArray dash_spv_ffi_client_get_watched_scripts(struct FFIDashSpvClient *client);

struct FFIBalance *dash_spv_ffi_client_get_total_balance(struct FFIDashSpvClient *client);

int32_t dash_spv_ffi_client_rescan_blockchain(struct FFIDashSpvClient *client,
                                              uint32_t _from_height);

int32_t dash_spv_ffi_client_get_transaction_confirmations(struct FFIDashSpvClient *client,
                                                          const char *txid);

int32_t dash_spv_ffi_client_is_transaction_confirmed(struct FFIDashSpvClient *client,
                                                     const char *txid);

void dash_spv_ffi_transaction_destroy(struct FFITransaction *tx);

struct FFIArray dash_spv_ffi_client_get_address_utxos(struct FFIDashSpvClient *client,
                                                      const char *address);

int32_t dash_spv_ffi_client_enable_mempool_tracking(struct FFIDashSpvClient *client,
                                                    enum FFIMempoolStrategy strategy);

struct FFIBalance *dash_spv_ffi_client_get_balance_with_mempool(struct FFIDashSpvClient *client);

int32_t dash_spv_ffi_client_get_mempool_transaction_count(struct FFIDashSpvClient *client);

int32_t dash_spv_ffi_client_record_send(struct FFIDashSpvClient *client, const char *txid);

struct FFIBalance *dash_spv_ffi_client_get_mempool_balance(struct FFIDashSpvClient *client,
                                                           const char *address);

struct FFIClientConfig *dash_spv_ffi_config_new(enum FFINetwork network);

struct FFIClientConfig *dash_spv_ffi_config_mainnet(void);

struct FFIClientConfig *dash_spv_ffi_config_testnet(void);

int32_t dash_spv_ffi_config_set_data_dir(struct FFIClientConfig *config, const char *path);

int32_t dash_spv_ffi_config_set_validation_mode(struct FFIClientConfig *config,
                                                enum FFIValidationMode mode);

int32_t dash_spv_ffi_config_set_max_peers(struct FFIClientConfig *config, uint32_t max_peers);

int32_t dash_spv_ffi_config_add_peer(struct FFIClientConfig *config, const char *addr);

int32_t dash_spv_ffi_config_set_user_agent(struct FFIClientConfig *config, const char *user_agent);

int32_t dash_spv_ffi_config_set_relay_transactions(struct FFIClientConfig *config, bool _relay);

int32_t dash_spv_ffi_config_set_filter_load(struct FFIClientConfig *config, bool load_filters);

enum FFINetwork dash_spv_ffi_config_get_network(const struct FFIClientConfig *config);

struct FFIString dash_spv_ffi_config_get_data_dir(const struct FFIClientConfig *config);

void dash_spv_ffi_config_destroy(struct FFIClientConfig *config);

int32_t dash_spv_ffi_config_set_mempool_tracking(struct FFIClientConfig *config, bool enable);

int32_t dash_spv_ffi_config_set_mempool_strategy(struct FFIClientConfig *config,
                                                 enum FFIMempoolStrategy strategy);

int32_t dash_spv_ffi_config_set_max_mempool_transactions(struct FFIClientConfig *config,
                                                         uint32_t max_transactions);

int32_t dash_spv_ffi_config_set_mempool_timeout(struct FFIClientConfig *config,
                                                uint64_t timeout_secs);

int32_t dash_spv_ffi_config_set_fetch_mempool_transactions(struct FFIClientConfig *config,
                                                           bool fetch);

int32_t dash_spv_ffi_config_set_persist_mempool(struct FFIClientConfig *config, bool persist);

bool dash_spv_ffi_config_get_mempool_tracking(const struct FFIClientConfig *config);

enum FFIMempoolStrategy dash_spv_ffi_config_get_mempool_strategy(const struct FFIClientConfig *config);

int32_t dash_spv_ffi_config_set_start_from_height(struct FFIClientConfig *config, uint32_t height);

int32_t dash_spv_ffi_config_set_wallet_creation_time(struct FFIClientConfig *config,
                                                     uint32_t timestamp);

const char *dash_spv_ffi_get_last_error(void);

void dash_spv_ffi_clear_error(void);

/**
 * Creates a CoreSDKHandle from an FFIDashSpvClient
 *
 * # Safety
 *
 * This function is unsafe because:
 * - The caller must ensure the client pointer is valid
 * - The returned handle must be properly released with ffi_dash_spv_release_core_handle
 */
struct CoreSDKHandle *ffi_dash_spv_get_core_handle(struct FFIDashSpvClient *client);

/**
 * Releases a CoreSDKHandle
 *
 * # Safety
 *
 * This function is unsafe because:
 * - The caller must ensure the handle pointer is valid
 * - The handle must not be used after this call
 */
void ffi_dash_spv_release_core_handle(struct CoreSDKHandle *handle);

/**
 * Gets a quorum public key from the Core chain
 *
 * # Safety
 *
 * This function is unsafe because:
 * - The caller must ensure all pointers are valid
 * - quorum_hash must point to a 32-byte array
 * - out_pubkey must point to a buffer of at least out_pubkey_size bytes
 * - out_pubkey_size must be at least 48 bytes
 */
struct FFIResult ffi_dash_spv_get_quorum_public_key(struct FFIDashSpvClient *client,
                                                    uint32_t quorum_type,
                                                    const uint8_t *quorum_hash,
                                                    uint32_t core_chain_locked_height,
                                                    uint8_t *out_pubkey,
                                                    uintptr_t out_pubkey_size);

/**
 * Gets the platform activation height from the Core chain
 *
 * # Safety
 *
 * This function is unsafe because:
 * - The caller must ensure all pointers are valid
 * - out_height must point to a valid u32
 */
struct FFIResult ffi_dash_spv_get_platform_activation_height(struct FFIDashSpvClient *client,
                                                             uint32_t *out_height);

void dash_spv_ffi_string_destroy(struct FFIString s);

void dash_spv_ffi_array_destroy(struct FFIArray *arr);

/**
 * Destroys the raw transaction bytes allocated for an FFIUnconfirmedTransaction
 *
 * # Safety
 *
 * - `raw_tx` must be a valid pointer to memory allocated by the caller
 * - `raw_tx_len` must be the correct length of the allocated memory
 * - The pointer must not be used after this function is called
 * - This function should only be called once per allocation
 */
void dash_spv_ffi_unconfirmed_transaction_destroy_raw_tx(uint8_t *raw_tx, uintptr_t raw_tx_len);

/**
 * Destroys the addresses array allocated for an FFIUnconfirmedTransaction
 *
 * # Safety
 *
 * - `addresses` must be a valid pointer to an array of FFIString objects
 * - `addresses_len` must be the correct length of the array
 * - Each FFIString in the array must be destroyed separately using `dash_spv_ffi_string_destroy`
 * - The pointer must not be used after this function is called
 * - This function should only be called once per allocation
 */
void dash_spv_ffi_unconfirmed_transaction_destroy_addresses(struct FFIString *addresses,
                                                            uintptr_t addresses_len);

/**
 * Destroys an FFIUnconfirmedTransaction and all its associated resources
 *
 * # Safety
 *
 * - `tx` must be a valid pointer to an FFIUnconfirmedTransaction
 * - All resources (raw_tx, addresses array, and individual FFIStrings) will be freed
 * - The pointer must not be used after this function is called
 * - This function should only be called once per FFIUnconfirmedTransaction
 */
void dash_spv_ffi_unconfirmed_transaction_destroy(struct FFIUnconfirmedTransaction *tx);

int32_t dash_spv_ffi_init_logging(const char *level);

const char *dash_spv_ffi_version(void);

const char *dash_spv_ffi_get_network_name(enum FFINetwork network);

void dash_spv_ffi_enable_test_mode(void);

struct FFIWatchItem *dash_spv_ffi_watch_item_address(const char *address);

struct FFIWatchItem *dash_spv_ffi_watch_item_script(const char *script_hex);

struct FFIWatchItem *dash_spv_ffi_watch_item_outpoint(const char *txid, uint32_t vout);

void dash_spv_ffi_watch_item_destroy(struct FFIWatchItem *item);

void dash_spv_ffi_balance_destroy(struct FFIBalance *balance);

void dash_spv_ffi_utxo_destroy(struct FFIUtxo *utxo);

void dash_spv_ffi_transaction_result_destroy(struct FFITransactionResult *tx);

void dash_spv_ffi_block_result_destroy(struct FFIBlockResult *block);

void dash_spv_ffi_filter_match_destroy(struct FFIFilterMatch *filter_match);

void dash_spv_ffi_address_stats_destroy(struct FFIAddressStats *stats);

int32_t dash_spv_ffi_validate_address(const char *address, enum FFINetwork network);

// ============================================================================
// Dash SDK FFI Functions and Types  
// ============================================================================

#include <stdint.h>
#include <stdbool.h>

// Authorized action takers for token operations
typedef enum DashSDKAuthorizedActionTakers {
  // No one can perform the action
  NoOne = 0,
  // Only the contract owner can perform the action
  AuthorizedContractOwner = 1,
  // Main group can perform the action
  MainGroup = 2,
  // A specific identity (requires identity_id to be set)
  Identity = 3,
  // A specific group (requires group_position to be set)
  Group = 4,
} DashSDKAuthorizedActionTakers;

// Error codes returned by FFI functions
typedef enum DashSDKErrorCode {
  // Operation completed successfully
  Success = 0,
  // Invalid parameter passed to function
  InvalidParameter = 1,
  // SDK not initialized or in invalid state
  InvalidState = 2,
  // Network error occurred
  NetworkError = 3,
  // Serialization/deserialization error
  SerializationError = 4,
  // Platform protocol error
  ProtocolError = 5,
  // Cryptographic operation failed
  CryptoError = 6,
  // Resource not found
  NotFound = 7,
  // Operation timed out
  Timeout = 8,
  // Feature not implemented
  NotImplemented = 9,
  // Internal error
  InternalError = 99,
} DashSDKErrorCode;

// Gas fees payer option
typedef enum DashSDKGasFeesPaidBy {
  // The document owner pays the gas fees
  DocumentOwner = 0,
  // The contract owner pays the gas fees
  GasFeesContractOwner = 1,
  // Prefer contract owner but fallback to document owner if insufficient balance
  GasFeesPreferContractOwner = 2,
} DashSDKGasFeesPaidBy;

// Network type for SDK configuration
typedef enum DashSDKNetwork {
  // Mainnet
  SDKMainnet = 0,
  // Testnet
  SDKTestnet = 1,
  // Regtest
  SDKRegtest = 2,
  // Devnet
  SDKDevnet = 3,
  // Local development network
  SDKLocal = 4,
} DashSDKNetwork;

// Result data type indicator for iOS
typedef enum DashSDKResultDataType {
  // No data (void/null)
  None = 0,
  // C string (char*)
  String = 1,
  // Binary data with length
  BinaryData = 2,
  // Identity handle
  ResultIdentityHandle = 3,
  // Document handle
  ResultDocumentHandle = 4,
  // Data contract handle
  ResultDataContractHandle = 5,
  // Map of identity IDs to balances
  IdentityBalanceMap = 6,
} DashSDKResultDataType;

// Token configuration update type
typedef enum DashSDKTokenConfigUpdateType {
  // No change
  NoChange = 0,
  // Update max supply (requires amount field)
  MaxSupply = 1,
  // Update minting allow choosing destination (requires bool_value field)
  MintingAllowChoosingDestination = 2,
  // Update new tokens destination identity (requires identity_id field)
  NewTokensDestinationIdentity = 3,
  // Update manual minting permissions (requires action_takers field)
  ManualMinting = 4,
  // Update manual burning permissions (requires action_takers field)
  ManualBurning = 5,
  // Update freeze permissions (requires action_takers field)
  Freeze = 6,
  // Update unfreeze permissions (requires action_takers field)
  Unfreeze = 7,
  // Update main control group (requires group_position field)
  MainControlGroup = 8,
} DashSDKTokenConfigUpdateType;

// Token distribution type for claim operations
typedef enum DashSDKTokenDistributionType {
  // Pre-programmed distribution
  PreProgrammed = 0,
  // Perpetual distribution
  Perpetual = 1,
} DashSDKTokenDistributionType;

// Token emergency action type
typedef enum DashSDKTokenEmergencyAction {
  // Pause token operations
  Pause = 0,
  // Resume token operations
  Resume = 1,
} DashSDKTokenEmergencyAction;

// Token pricing type
typedef enum DashSDKTokenPricingType {
  // Single flat price for all amounts
  SinglePrice = 0,
  // Tiered pricing based on amounts
  SetPrices = 1,
} DashSDKTokenPricingType;

// FFI-compatible network enum for key wallet operations
typedef enum FFIKeyNetwork {
  KeyMainnet = 0,
  KeyTestnet = 1,
  KeyRegtest = 2,
  KeyDevnet = 3,
} FFIKeyNetwork;

// State transition type for key selection
typedef enum StateTransitionType {
  IdentityUpdate = 0,
  IdentityTopUp = 1,
  IdentityCreditTransfer = 2,
  IdentityCreditWithdrawal = 3,
  DocumentsBatch = 4,
  DataContractCreate = 5,
  DataContractUpdate = 6,
} StateTransitionType;

// Error structure returned by FFI functions
typedef struct DashSDKError {
  // Error code
  enum DashSDKErrorCode code;
  // Human-readable error message (null-terminated C string)
  // Caller must free this with dash_sdk_error_free
  char *message;
} DashSDKError;

// Result type for FFI functions that return data
typedef struct DashSDKResult {
  // Type of data being returned
  enum DashSDKResultDataType data_type;
  // Pointer to the result data (null on error)
  void *data;
  // Error information (null on success)
  struct DashSDKError *error;
} DashSDKResult;

// Opaque handle to a context provider
typedef struct ContextProviderHandle {
  uint8_t _private[0];
} ContextProviderHandle;

typedef struct FFIDashSpvClient {
  uint8_t _opaque[0];
} FFIDashSpvClient;

// Handle for Core SDK that can be passed to Platform SDK
// This matches the definition from dash_spv_ffi.h
typedef struct CoreSDKHandle {
  struct FFIDashSpvClient *client;
} CoreSDKHandle;

// Result type for FFI callbacks
typedef struct CallbackResult {
  bool success;
  int32_t error_code;
  const char *error_message;
} CallbackResult;

// Function pointer type for getting platform activation height
typedef struct CallbackResult (*GetPlatformActivationHeightFn)(void *handle, uint32_t *out_height);

// Function pointer type for getting quorum public key
typedef struct CallbackResult (*GetQuorumPublicKeyFn)(void *handle,
                                                      uint32_t quorum_type,
                                                      const uint8_t *quorum_hash,
                                                      uint32_t core_chain_locked_height,
                                                      uint8_t *out_pubkey);

// Container for context provider callbacks
typedef struct ContextProviderCallbacks {
  // Handle to the Core SDK instance
  void *core_handle;
  // Function to get platform activation height
  GetPlatformActivationHeightFn get_platform_activation_height;
  // Function to get quorum public key
  GetQuorumPublicKeyFn get_quorum_public_key;
} ContextProviderCallbacks;

// Document creation parameters
typedef struct DashSDKDocumentCreateParams {
  // Data contract handle
  const struct DataContractHandle *data_contract_handle;
  // Document type name
  const char *document_type;
  // Owner identity handle
  const struct IdentityHandle *owner_identity_handle;
  // JSON string of document properties
  const char *properties_json;
} DashSDKDocumentCreateParams;

// Token payment information for transactions
typedef struct DashSDKTokenPaymentInfo {
  // Payment token contract ID (32 bytes), null for same contract
  const uint8_t (*payment_token_contract_id)[32];
  // Token position within the contract (0-based index)
  uint16_t token_contract_position;
  // Minimum token cost (0 means no minimum)
  uint64_t minimum_token_cost;
  // Maximum token cost (0 means no maximum)
  uint64_t maximum_token_cost;
  // Who pays the gas fees
  enum DashSDKGasFeesPaidBy gas_fees_paid_by;
} DashSDKTokenPaymentInfo;

// Put settings for platform operations
typedef struct DashSDKPutSettings {
  // Timeout for establishing a connection (milliseconds), 0 means use default
  uint64_t connect_timeout_ms;
  // Timeout for single request (milliseconds), 0 means use default
  uint64_t timeout_ms;
  // Number of retries in case of failed requests, 0 means use default
  uint32_t retries;
  // Ban DAPI address if node not responded or responded with error
  bool ban_failed_address;
  // Identity nonce stale time in seconds, 0 means use default
  uint64_t identity_nonce_stale_time_s;
  // User fee increase (additional percentage of processing fee), 0 means no increase
  uint16_t user_fee_increase;
  // Enable signing with any security level (for debugging)
  bool allow_signing_with_any_security_level;
  // Enable signing with any purpose (for debugging)
  bool allow_signing_with_any_purpose;
  // Wait timeout in milliseconds, 0 means use default
  uint64_t wait_timeout_ms;
} DashSDKPutSettings;

// State transition creation options for advanced use cases
typedef struct DashSDKStateTransitionCreationOptions {
  // Allow signing with any security level (for debugging)
  bool allow_signing_with_any_security_level;
  // Allow signing with any purpose (for debugging)
  bool allow_signing_with_any_purpose;
  // Batch feature version (0 means use default)
  uint16_t batch_feature_version;
  // Method feature version (0 means use default)
  uint16_t method_feature_version;
  // Base feature version (0 means use default)
  uint16_t base_feature_version;
} DashSDKStateTransitionCreationOptions;

// Document information
typedef struct DashSDKDocumentInfo {
  // Document ID as hex string (null-terminated)
  char *id;
  // Owner ID as hex string (null-terminated)
  char *owner_id;
  // Data contract ID as hex string (null-terminated)
  char *data_contract_id;
  // Document type (null-terminated)
  char *document_type;
  // Revision number
  uint64_t revision;
  // Created at timestamp (milliseconds since epoch)
  int64_t created_at;
  // Updated at timestamp (milliseconds since epoch)
  int64_t updated_at;
} DashSDKDocumentInfo;

// Document search parameters
typedef struct DashSDKDocumentSearchParams {
  // Data contract handle
  const struct DataContractHandle *data_contract_handle;
  // Document type name
  const char *document_type;
  // JSON string of where clauses (optional)
  const char *where_json;
  // JSON string of order by clauses (optional)
  const char *order_by_json;
  // Limit number of results (0 = default)
  uint32_t limit;
  // Start from index (for pagination)
  uint32_t start_at;
} DashSDKDocumentSearchParams;

// Public key data for creating identity
typedef struct DashSDKPublicKeyData {
  // Key ID (0-255)
  uint8_t id;
  // Key purpose (0-6)
  uint8_t purpose;
  // Security level (0-3)
  uint8_t security_level;
  // Key type (0-4)
  uint8_t key_type;
  // Whether key is read-only
  bool read_only;
  // Public key data pointer
  const uint8_t *data;
  // Public key data length
  uintptr_t data_len;
  // Disabled timestamp (0 if not disabled)
  uint64_t disabled_at;
} DashSDKPublicKeyData;

// Identity information
typedef struct DashSDKIdentityInfo {
  // Identity ID as hex string (null-terminated)
  char *id;
  // Balance in credits
  uint64_t balance;
  // Revision number
  uint64_t revision;
  // Public keys count
  uint32_t public_keys_count;
} DashSDKIdentityInfo;

// Result structure for credit transfer operations
typedef struct DashSDKTransferCreditsResult {
  // Sender's final balance after transfer
  uint64_t sender_balance;
  // Receiver's final balance after transfer
  uint64_t receiver_balance;
} DashSDKTransferCreditsResult;

// SDK configuration
typedef struct DashSDKConfig {
  // Network to connect to
  enum DashSDKNetwork network;
  // Comma-separated list of DAPI addresses (e.g., "http://127.0.0.1:3000,http://127.0.0.1:3001")
  // If null or empty, will use mock SDK
  const char *dapi_addresses;
  // Skip asset lock proof verification (for testing)
  bool skip_asset_lock_proof_verification;
  // Number of retries for failed requests
  uint32_t request_retry_count;
  // Timeout for requests in milliseconds
  uint64_t request_timeout_ms;
} DashSDKConfig;

// Extended SDK configuration with context provider support
typedef struct DashSDKConfigExtended {
  // Base SDK configuration
  struct DashSDKConfig base_config;
  // Optional context provider handle
  struct ContextProviderHandle *context_provider;
  // Optional Core SDK handle for automatic context provider creation
  struct CoreSDKHandle *core_sdk_handle;
} DashSDKConfigExtended;

// Function pointer type for iOS signing callback
// Returns pointer to allocated byte array (caller must free with dash_sdk_bytes_free)
// Returns null on error
typedef uint8_t *(*IOSSignCallback)(const uint8_t *identity_public_key_bytes,
                                    uintptr_t identity_public_key_len,
                                    const uint8_t *data,
                                    uintptr_t data_len,
                                    uintptr_t *result_len);

// Function pointer type for iOS can_sign_with callback
typedef bool (*IOSCanSignCallback)(const uint8_t *identity_public_key_bytes,
                                   uintptr_t identity_public_key_len);

// Token burn parameters
typedef struct DashSDKTokenBurnParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // Amount to burn
  uint64_t amount;
  // Optional public note
  const char *public_note;
} DashSDKTokenBurnParams;

// Token claim parameters
typedef struct DashSDKTokenClaimParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // Distribution type (PreProgrammed or Perpetual)
  enum DashSDKTokenDistributionType distribution_type;
  // Optional public note
  const char *public_note;
} DashSDKTokenClaimParams;

// Token mint parameters
typedef struct DashSDKTokenMintParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // Recipient identity ID (32 bytes) - optional
  const uint8_t *recipient_id;
  // Amount to mint
  uint64_t amount;
  // Optional public note
  const char *public_note;
} DashSDKTokenMintParams;

// Token transfer parameters
typedef struct DashSDKTokenTransferParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // Recipient identity ID (32 bytes)
  const uint8_t *recipient_id;
  // Amount to transfer
  uint64_t amount;
  // Optional public note
  const char *public_note;
  // Optional private encrypted note
  const char *private_encrypted_note;
  // Optional shared encrypted note
  const char *shared_encrypted_note;
} DashSDKTokenTransferParams;

// Token configuration update parameters
typedef struct DashSDKTokenConfigUpdateParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // The type of configuration update
  enum DashSDKTokenConfigUpdateType update_type;
  // For MaxSupply updates - the new max supply (0 for no limit)
  uint64_t amount;
  // For boolean updates like MintingAllowChoosingDestination
  bool bool_value;
  // For identity-based updates - identity ID (32 bytes)
  const uint8_t *identity_id;
  // For group-based updates - the group position
  uint16_t group_position;
  // For permission updates - the authorized action takers
  enum DashSDKAuthorizedActionTakers action_takers;
  // Optional public note
  const char *public_note;
} DashSDKTokenConfigUpdateParams;

// Token destroy frozen funds parameters
typedef struct DashSDKTokenDestroyFrozenFundsParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // The frozen identity whose funds to destroy (32 bytes)
  const uint8_t *frozen_identity_id;
  // Optional public note
  const char *public_note;
} DashSDKTokenDestroyFrozenFundsParams;

// Token emergency action parameters
typedef struct DashSDKTokenEmergencyActionParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // The emergency action to perform
  enum DashSDKTokenEmergencyAction action;
  // Optional public note
  const char *public_note;
} DashSDKTokenEmergencyActionParams;

// Token freeze/unfreeze parameters
typedef struct DashSDKTokenFreezeParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // The identity to freeze/unfreeze (32 bytes)
  const uint8_t *target_identity_id;
  // Optional public note
  const char *public_note;
} DashSDKTokenFreezeParams;

// Token purchase parameters
typedef struct DashSDKTokenPurchaseParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // Amount of tokens to purchase
  uint64_t amount;
  // Total agreed price in credits
  uint64_t total_agreed_price;
} DashSDKTokenPurchaseParams;

// Token price entry for tiered pricing
typedef struct DashSDKTokenPriceEntry {
  // Token amount threshold
  uint64_t amount;
  // Price in credits for this amount
  uint64_t price;
} DashSDKTokenPriceEntry;

// Token set price parameters
typedef struct DashSDKTokenSetPriceParams {
  // Token contract ID (Base58 encoded) - mutually exclusive with serialized_contract
  const char *token_contract_id;
  // Serialized data contract (bincode) - mutually exclusive with token_contract_id
  const uint8_t *serialized_contract;
  // Length of serialized contract data
  uintptr_t serialized_contract_len;
  // Token position in the contract (defaults to 0 if not specified)
  uint16_t token_position;
  // Pricing type
  enum DashSDKTokenPricingType pricing_type;
  // For SinglePrice - the price in credits (ignored for SetPrices)
  uint64_t single_price;
  // For SetPrices - array of price entries (ignored for SinglePrice)
  const struct DashSDKTokenPriceEntry *price_entries;
  // Number of price entries
  uint32_t price_entries_count;
  // Optional public note
  const char *public_note;
} DashSDKTokenSetPriceParams;

// FFI-compatible transaction input
typedef struct FFITxIn {
  // Transaction ID (32 bytes)
  uint8_t txid[32];
  // Output index
  uint32_t vout;
  // Script signature length
  uint32_t script_sig_len;
  // Script signature data pointer
  const uint8_t *script_sig;
  // Sequence number
  uint32_t sequence;
} FFITxIn;

// FFI-compatible transaction output
typedef struct FFITxOut {
  // Amount in satoshis
  uint64_t amount;
  // Script pubkey length
  uint32_t script_pubkey_len;
  // Script pubkey data pointer
  const uint8_t *script_pubkey;
} FFITxOut;

// Binary data container for results
typedef struct DashSDKBinaryData {
  // Pointer to the data
  uint8_t *data;
  // Length of the data
  uintptr_t len;
} DashSDKBinaryData;

// Single entry in an identity balance map
typedef struct DashSDKIdentityBalanceEntry {
  // Identity ID (32 bytes)
  uint8_t identity_id[32];
  // Balance in credits (u64::MAX means identity not found)
  uint64_t balance;
} DashSDKIdentityBalanceEntry;

// Map of identity IDs to balances
typedef struct DashSDKIdentityBalanceMap {
  // Array of entries
  struct DashSDKIdentityBalanceEntry *entries;
  // Number of entries
  uintptr_t count;
} DashSDKIdentityBalanceMap;

// Unified SDK handle containing both Core and Platform SDKs
typedef struct UnifiedSDKHandle {
  struct FFIDashSpvClient *core_client;
  struct SDKHandle *platform_sdk;
  bool integration_enabled;
} UnifiedSDKHandle;

// Unified SDK configuration combining both Core and Platform settings
typedef struct UnifiedSDKConfig {
  // Core SDK configuration (ignored if core feature disabled)
  const FFIClientConfig *core_config;
  // Platform SDK configuration
  struct DashSDKConfig platform_config;
  // Whether to enable cross-layer integration
  bool enable_integration;
} UnifiedSDKConfig;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// Initialize the FFI library.
// This should be called once at app startup before using any other functions.
void dash_sdk_init(void);

// Get the version of the Dash SDK FFI library
const char *dash_sdk_version(void);

// Register Core SDK handle and setup callback bridge with Platform SDK
//
// This function implements the core pattern from dash-unified-ffi-old:
// 1. Takes a Core SDK handle
// 2. Creates callback wrappers for the functions Platform SDK needs
// 3. Registers these callbacks with Platform SDK's context provider system
//
// # Safety
// - `core_handle` must be a valid Core SDK handle that remains valid for the SDK lifetime
// - This function should be called once after creating both Core and Platform SDK instances
int32_t dash_unified_register_core_sdk_handle(void *core_handle);

// Initialize the unified SDK system with callback bridge support
//
// This function initializes both Core SDK and Platform SDK and sets up
// the callback bridge pattern for inter-SDK communication.
int32_t dash_unified_init(void);

// Get unified SDK version information including both Core and Platform components
const char *dash_unified_version(void);

// Check if unified SDK has both Core and Platform support
bool dash_unified_has_full_support(void);

// Fetches contested resource identity votes
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `identity_id` - Base58-encoded identity identifier
// * `limit` - Maximum number of votes to return (optional, 0 for no limit)
// * `offset` - Number of votes to skip (optional, 0 for no offset)
// * `order_ascending` - Whether to order results in ascending order
//
// # Returns
// * JSON array of votes or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_contested_resource_get_identity_votes(const struct SDKHandle *sdk_handle,
                                                                    const char *identity_id,
                                                                    uint32_t limit,
                                                                    uint32_t offset,
                                                                    bool order_ascending);

// Fetches contested resources
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `contract_id` - Base58-encoded contract identifier
// * `document_type_name` - Name of the document type
// * `index_name` - Name of the index
// * `start_index_values_json` - JSON array of hex-encoded start index values
// * `end_index_values_json` - JSON array of hex-encoded end index values
// * `count` - Maximum number of resources to return
// * `order_ascending` - Whether to order results in ascending order
//
// # Returns
// * JSON array of contested resources or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_contested_resource_get_resources(const struct SDKHandle *sdk_handle,
                                                               const char *contract_id,
                                                               const char *document_type_name,
                                                               const char *index_name,
                                                               const char *start_index_values_json,
                                                               const char *end_index_values_json,
                                                               uint32_t count,
                                                               bool order_ascending);

// Fetches contested resource vote state
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `contract_id` - Base58-encoded contract identifier
// * `document_type_name` - Name of the document type
// * `index_name` - Name of the index
// * `index_values_json` - JSON array of hex-encoded index values
// * `result_type` - Result type (0=DOCUMENTS, 1=VOTE_TALLY, 2=DOCUMENTS_AND_VOTE_TALLY)
// * `allow_include_locked_and_abstaining_vote_tally` - Whether to include locked and abstaining votes
// * `count` - Maximum number of results to return
//
// # Returns
// * JSON array of contenders or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_contested_resource_get_vote_state(const struct SDKHandle *sdk_handle,
                                                                const char *contract_id,
                                                                const char *document_type_name,
                                                                const char *index_name,
                                                                const char *index_values_json,
                                                                uint8_t result_type,
                                                                bool allow_include_locked_and_abstaining_vote_tally,
                                                                uint32_t count);

// Fetches voters for a contested resource identity
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `contract_id` - Base58-encoded contract identifier
// * `document_type_name` - Name of the document type
// * `index_name` - Name of the index
// * `index_values_json` - JSON array of hex-encoded index values
// * `contestant_id` - Base58-encoded contestant identifier
// * `count` - Maximum number of voters to return
// * `order_ascending` - Whether to order results in ascending order
//
// # Returns
// * JSON array of voters or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_contested_resource_get_voters_for_identity(const struct SDKHandle *sdk_handle,
                                                                         const char *contract_id,
                                                                         const char *document_type_name,
                                                                         const char *index_name,
                                                                         const char *index_values_json,
                                                                         const char *contestant_id,
                                                                         uint32_t count,
                                                                         bool order_ascending);

// Create a context provider from a Core SDK handle (DEPRECATED)
//
// This function is deprecated. Use dash_sdk_context_provider_from_callbacks instead.
//
// # Safety
// - `core_handle` must be a valid Core SDK handle
// - String parameters must be valid UTF-8 C strings or null
struct ContextProviderHandle *dash_sdk_context_provider_from_core(struct CoreSDKHandle *core_handle,
                                                                  const char *_core_rpc_url,
                                                                  const char *_core_rpc_user,
                                                                  const char *_core_rpc_password);

// Create a context provider from callbacks
//
// # Safety
// - `callbacks` must contain valid function pointers
struct ContextProviderHandle *dash_sdk_context_provider_from_callbacks(const struct ContextProviderCallbacks *callbacks);

// Destroy a context provider handle
//
// # Safety
// - `handle` must be a valid context provider handle or null
void dash_sdk_context_provider_destroy(struct ContextProviderHandle *handle);

// Initialize the Core SDK
// Returns 0 on success, error code on failure
int32_t dash_core_sdk_init(void);

// Create a Core SDK client with testnet config
//
// # Safety
// - Returns null on failure
struct FFIDashSpvClient *dash_core_sdk_create_client_testnet(void);

// Create a Core SDK client with mainnet config
//
// # Safety
// - Returns null on failure
struct FFIDashSpvClient *dash_core_sdk_create_client_mainnet(void);

// Create a Core SDK client with custom config
//
// # Safety
// - `config` must be a valid CoreSDKConfig pointer
// - Returns null on failure
struct FFIDashSpvClient *dash_core_sdk_create_client(const FFIClientConfig *config);

// Destroy a Core SDK client
//
// # Safety
// - `client` must be a valid Core SDK client handle or null
void dash_core_sdk_destroy_client(struct FFIDashSpvClient *client);

// Start the Core SDK client (begin sync)
//
// # Safety
// - `client` must be a valid Core SDK client handle
int32_t dash_core_sdk_start(struct FFIDashSpvClient *client);

// Stop the Core SDK client
//
// # Safety
// - `client` must be a valid Core SDK client handle
int32_t dash_core_sdk_stop(struct FFIDashSpvClient *client);

// Sync Core SDK client to tip
//
// # Safety
// - `client` must be a valid Core SDK client handle
int32_t dash_core_sdk_sync_to_tip(struct FFIDashSpvClient *client);

// Get the current sync progress
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - Returns pointer to FFISyncProgress structure (caller must free it)
FFISyncProgress *dash_core_sdk_get_sync_progress(struct FFIDashSpvClient *client);

// Get Core SDK statistics
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - Returns pointer to FFISpvStats structure (caller must free it)
FFISpvStats *dash_core_sdk_get_stats(struct FFIDashSpvClient *client);

// Get the current block height
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - `height` must point to a valid u32
int32_t dash_core_sdk_get_block_height(struct FFIDashSpvClient *client, uint32_t *height);

// Add an address to watch
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - `address` must be a valid null-terminated C string
int32_t dash_core_sdk_watch_address(struct FFIDashSpvClient *client, const char *address);

// Remove an address from watching
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - `address` must be a valid null-terminated C string
int32_t dash_core_sdk_unwatch_address(struct FFIDashSpvClient *client, const char *address);

// Get balance for all watched addresses
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - Returns pointer to FFIBalance structure (caller must free it)
FFIBalance *dash_core_sdk_get_total_balance(struct FFIDashSpvClient *client);

// Get platform activation height
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - `height` must point to a valid u32
int32_t dash_core_sdk_get_platform_activation_height(struct FFIDashSpvClient *client,
                                                     uint32_t *height);

// Get quorum public key
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - `quorum_hash` must point to a valid 32-byte buffer
// - `public_key` must point to a valid 48-byte buffer
int32_t dash_core_sdk_get_quorum_public_key(struct FFIDashSpvClient *client,
                                            uint32_t quorum_type,
                                            const uint8_t *quorum_hash,
                                            uint32_t core_chain_locked_height,
                                            uint8_t *public_key,
                                            uintptr_t public_key_size);

// Get Core SDK handle for platform integration
//
// # Safety
// - `client` must be a valid Core SDK client handle
void *dash_core_sdk_get_core_handle(struct FFIDashSpvClient *client);

// Broadcast a transaction
//
// # Safety
// - `client` must be a valid Core SDK client handle
// - `transaction_hex` must be a valid null-terminated C string
int32_t dash_core_sdk_broadcast_transaction(struct FFIDashSpvClient *client,
                                            const char *transaction_hex);

// Check if Core SDK feature is enabled at runtime
bool dash_core_sdk_is_enabled(void);

// Get Core SDK version
const char *dash_core_sdk_version(void);

// Create a new data contract
struct DashSDKResult dash_sdk_data_contract_create(struct SDKHandle *sdk_handle,
                                                   const struct IdentityHandle *owner_identity_handle,
                                                   const char *documents_schema_json);

// Destroy a data contract handle
void dash_sdk_data_contract_destroy(struct DataContractHandle *handle);

// Put data contract to platform (broadcast state transition)
struct DashSDKResult dash_sdk_data_contract_put_to_platform(struct SDKHandle *sdk_handle,
                                                            const struct DataContractHandle *data_contract_handle,
                                                            const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                            const struct SignerHandle *signer_handle);

// Put data contract to platform and wait for confirmation (broadcast state transition and wait for response)
struct DashSDKResult dash_sdk_data_contract_put_to_platform_and_wait(struct SDKHandle *sdk_handle,
                                                                     const struct DataContractHandle *data_contract_handle,
                                                                     const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                                     const struct SignerHandle *signer_handle);

// Fetch a data contract by ID
struct DashSDKResult dash_sdk_data_contract_fetch(const struct SDKHandle *sdk_handle,
                                                  const char *contract_id);

// Fetch a data contract by ID and return as JSON
struct DashSDKResult dash_sdk_data_contract_fetch_json(const struct SDKHandle *sdk_handle,
                                                       const char *contract_id);

// Fetch multiple data contracts by their IDs
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `contract_ids`: Comma-separated list of Base58-encoded contract IDs
//
// # Returns
// JSON string containing contract IDs mapped to their data contracts
struct DashSDKResult dash_sdk_data_contracts_fetch_many(const struct SDKHandle *sdk_handle,
                                                        const char *contract_ids);

// Fetch data contract history
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `contract_id`: Base58-encoded contract ID
// - `limit`: Maximum number of history entries to return (0 for default)
// - `offset`: Number of entries to skip (for pagination)
// - `start_at_ms`: Start timestamp in milliseconds (0 for beginning)
//
// # Returns
// JSON string containing the data contract history
struct DashSDKResult dash_sdk_data_contract_fetch_history(const struct SDKHandle *sdk_handle,
                                                          const char *contract_id,
                                                          unsigned int limit,
                                                          unsigned int offset,
                                                          uint64_t start_at_ms);

// Get schema for a specific document type
char *dash_sdk_data_contract_get_schema(const struct DataContractHandle *contract_handle,
                                        const char *document_type);

// Create a new document
struct DashSDKResult dash_sdk_document_create(struct SDKHandle *sdk_handle,
                                              const struct DashSDKDocumentCreateParams *params);

// Delete a document from the platform
struct DashSDKResult dash_sdk_document_delete(struct SDKHandle *sdk_handle,
                                              const struct DocumentHandle *document_handle,
                                              const struct DataContractHandle *data_contract_handle,
                                              const char *document_type_name,
                                              const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                              const struct SignerHandle *signer_handle,
                                              const struct DashSDKTokenPaymentInfo *token_payment_info,
                                              const struct DashSDKPutSettings *put_settings,
                                              const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Delete a document from the platform and wait for confirmation
struct DashSDKResult dash_sdk_document_delete_and_wait(struct SDKHandle *sdk_handle,
                                                       const struct DocumentHandle *document_handle,
                                                       const struct DataContractHandle *data_contract_handle,
                                                       const char *document_type_name,
                                                       const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                       const struct SignerHandle *signer_handle,
                                                       const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                       const struct DashSDKPutSettings *put_settings,
                                                       const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Update document price (broadcast state transition)
struct DashSDKResult dash_sdk_document_update_price_of_document(struct SDKHandle *sdk_handle,
                                                                const struct DocumentHandle *document_handle,
                                                                const struct DataContractHandle *data_contract_handle,
                                                                const char *document_type_name,
                                                                uint64_t price,
                                                                const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                                const struct SignerHandle *signer_handle,
                                                                const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                                const struct DashSDKPutSettings *put_settings,
                                                                const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Update document price and wait for confirmation (broadcast state transition and wait for response)
struct DashSDKResult dash_sdk_document_update_price_of_document_and_wait(struct SDKHandle *sdk_handle,
                                                                         const struct DocumentHandle *document_handle,
                                                                         const struct DataContractHandle *data_contract_handle,
                                                                         const char *document_type_name,
                                                                         uint64_t price,
                                                                         const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                                         const struct SignerHandle *signer_handle,
                                                                         const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                                         const struct DashSDKPutSettings *put_settings,
                                                                         const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Purchase document (broadcast state transition)
struct DashSDKResult dash_sdk_document_purchase(struct SDKHandle *sdk_handle,
                                                const struct DocumentHandle *document_handle,
                                                const struct DataContractHandle *data_contract_handle,
                                                const char *document_type_name,
                                                uint64_t price,
                                                const char *purchaser_id,
                                                const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                const struct SignerHandle *signer_handle,
                                                const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                const struct DashSDKPutSettings *put_settings,
                                                const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Purchase document and wait for confirmation (broadcast state transition and wait for response)
struct DashSDKResult dash_sdk_document_purchase_and_wait(struct SDKHandle *sdk_handle,
                                                         const struct DocumentHandle *document_handle,
                                                         const struct DataContractHandle *data_contract_handle,
                                                         const char *document_type_name,
                                                         uint64_t price,
                                                         const char *purchaser_id,
                                                         const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                         const struct SignerHandle *signer_handle,
                                                         const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                         const struct DashSDKPutSettings *put_settings,
                                                         const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Put document to platform (broadcast state transition)
struct DashSDKResult dash_sdk_document_put_to_platform(struct SDKHandle *sdk_handle,
                                                       const struct DocumentHandle *document_handle,
                                                       const struct DataContractHandle *data_contract_handle,
                                                       const char *document_type_name,
                                                       const uint8_t (*entropy)[32],
                                                       const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                       const struct SignerHandle *signer_handle,
                                                       const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                       const struct DashSDKPutSettings *put_settings,
                                                       const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Put document to platform and wait for confirmation (broadcast state transition and wait for response)
struct DashSDKResult dash_sdk_document_put_to_platform_and_wait(struct SDKHandle *sdk_handle,
                                                                const struct DocumentHandle *document_handle,
                                                                const struct DataContractHandle *data_contract_handle,
                                                                const char *document_type_name,
                                                                const uint8_t (*entropy)[32],
                                                                const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                                const struct SignerHandle *signer_handle,
                                                                const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                                const struct DashSDKPutSettings *put_settings,
                                                                const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Fetch a document by ID
struct DashSDKResult dash_sdk_document_fetch(const struct SDKHandle *sdk_handle,
                                             const struct DataContractHandle *data_contract_handle,
                                             const char *document_type,
                                             const char *document_id);

// Get document information
struct DashSDKDocumentInfo *dash_sdk_document_get_info(const struct DocumentHandle *document_handle);

// Search for documents
struct DashSDKResult dash_sdk_document_search(const struct SDKHandle *sdk_handle,
                                              const struct DashSDKDocumentSearchParams *params);

// Replace document on platform (broadcast state transition)
struct DashSDKResult dash_sdk_document_replace_on_platform(struct SDKHandle *sdk_handle,
                                                           const struct DocumentHandle *document_handle,
                                                           const struct DataContractHandle *data_contract_handle,
                                                           const char *document_type_name,
                                                           const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                           const struct SignerHandle *signer_handle,
                                                           const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                           const struct DashSDKPutSettings *put_settings,
                                                           const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Replace document on platform and wait for confirmation (broadcast state transition and wait for response)
struct DashSDKResult dash_sdk_document_replace_on_platform_and_wait(struct SDKHandle *sdk_handle,
                                                                    const struct DocumentHandle *document_handle,
                                                                    const struct DataContractHandle *data_contract_handle,
                                                                    const char *document_type_name,
                                                                    const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                                    const struct SignerHandle *signer_handle,
                                                                    const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                                    const struct DashSDKPutSettings *put_settings,
                                                                    const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Transfer document to another identity
//
// # Parameters
// - `document_handle`: Handle to the document to transfer
// - `recipient_id`: Base58-encoded ID of the recipient identity
// - `data_contract_handle`: Handle to the data contract
// - `document_type_name`: Name of the document type
// - `identity_public_key_handle`: Public key for signing
// - `signer_handle`: Cryptographic signer
// - `token_payment_info`: Optional token payment information (can be null for defaults)
// - `put_settings`: Optional settings for the operation (can be null for defaults)
//
// # Returns
// Serialized state transition on success
struct DashSDKResult dash_sdk_document_transfer_to_identity(struct SDKHandle *sdk_handle,
                                                            const struct DocumentHandle *document_handle,
                                                            const char *recipient_id,
                                                            const struct DataContractHandle *data_contract_handle,
                                                            const char *document_type_name,
                                                            const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                            const struct SignerHandle *signer_handle,
                                                            const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                            const struct DashSDKPutSettings *put_settings,
                                                            const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Transfer document to another identity and wait for confirmation
//
// # Parameters
// - `document_handle`: Handle to the document to transfer
// - `recipient_id`: Base58-encoded ID of the recipient identity
// - `data_contract_handle`: Handle to the data contract
// - `document_type_name`: Name of the document type
// - `identity_public_key_handle`: Public key for signing
// - `signer_handle`: Cryptographic signer
// - `token_payment_info`: Optional token payment information (can be null for defaults)
// - `put_settings`: Optional settings for the operation (can be null for defaults)
//
// # Returns
// Handle to the transferred document on success
struct DashSDKResult dash_sdk_document_transfer_to_identity_and_wait(struct SDKHandle *sdk_handle,
                                                                     const struct DocumentHandle *document_handle,
                                                                     const char *recipient_id,
                                                                     const struct DataContractHandle *data_contract_handle,
                                                                     const char *document_type_name,
                                                                     const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                                     const struct SignerHandle *signer_handle,
                                                                     const struct DashSDKTokenPaymentInfo *token_payment_info,
                                                                     const struct DashSDKPutSettings *put_settings,
                                                                     const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Destroy a document
struct DashSDKError *dash_sdk_document_destroy(struct SDKHandle *sdk_handle,
                                               struct DocumentHandle *document_handle);

// Destroy a document handle
void dash_sdk_document_handle_destroy(struct DocumentHandle *handle);

// Get DPNS usernames owned by an identity
//
// This function returns all DPNS usernames associated with a given identity ID.
// It checks for domains where the identity is:
// - The owner of the domain document
// - Listed in records.dashUniqueIdentityId
// - Listed in records.dashAliasIdentityId
//
// # Arguments
// * `sdk_handle` - Handle to the SDK instance
// * `identity_id` - The identity ID to search for (base58 string)
// * `limit` - Maximum number of results to return (0 for default of 10)
//
// # Returns
// * On success: A JSON array of username objects
// * On error: An error result
struct DashSDKResult dash_sdk_dpns_get_usernames(const struct SDKHandle *sdk_handle,
                                                 const char *identity_id,
                                                 uint32_t limit);

// Check if a DPNS username is available
//
// This function checks if a given username is available for registration.
// It also validates the username format and checks if it's contested.
//
// # Arguments
// * `sdk_handle` - Handle to the SDK instance
// * `label` - The username label to check (e.g., "alice")
//
// # Returns
// * On success: A JSON object with availability information
// * On error: An error result
struct DashSDKResult dash_sdk_dpns_check_availability(const struct SDKHandle *sdk_handle,
                                                      const char *label);

// Search for DPNS names that start with a given prefix
//
// This function searches for DPNS usernames that start with the given prefix.
//
// # Arguments
// * `sdk_handle` - Handle to the SDK instance
// * `prefix` - The prefix to search for (e.g., "ali" to find "alice", "alicia", etc.)
// * `limit` - Maximum number of results to return (0 for default of 10)
//
// # Returns
// * On success: A JSON array of username objects
// * On error: An error result
struct DashSDKResult dash_sdk_dpns_search(const struct SDKHandle *sdk_handle,
                                          const char *prefix,
                                          uint32_t limit);

// Resolve a DPNS name to an identity ID
//
// This function resolves a DPNS username to its associated identity ID.
// The name can be either:
// - A full domain name (e.g., "alice.dash")
// - Just the label (e.g., "alice")
//
// # Arguments
// * `sdk_handle` - Handle to the SDK instance
// * `name` - The DPNS name to resolve
//
// # Returns
// * On success: A JSON object with the identity ID, or null if not found
// * On error: An error result
struct DashSDKResult dash_sdk_dpns_resolve(const struct SDKHandle *sdk_handle, const char *name);

// Free an error message
void dash_sdk_error_free(struct DashSDKError *error);

// Fetches proposed epoch blocks by evonode IDs
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `epoch` - Epoch number (optional, 0 for current epoch)
// * `ids_json` - JSON array of hex-encoded evonode pro_tx_hash IDs
//
// # Returns
// * JSON array of evonode proposed block counts or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_evonode_get_proposed_epoch_blocks_by_ids(const struct SDKHandle *sdk_handle,
                                                                       uint32_t epoch,
                                                                       const char *ids_json);

// Fetches proposed epoch blocks by range
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `epoch` - Epoch number (optional, 0 for current epoch)
// * `limit` - Maximum number of results to return (optional, 0 for no limit)
// * `start_after` - Start after this pro_tx_hash (hex-encoded, optional)
// * `start_at` - Start at this pro_tx_hash (hex-encoded, optional)
//
// # Returns
// * JSON array of evonode proposed block counts or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_evonode_get_proposed_epoch_blocks_by_range(const struct SDKHandle *sdk_handle,
                                                                         uint32_t epoch,
                                                                         uint32_t limit,
                                                                         const char *start_after,
                                                                         const char *start_at);

// Fetches group action signers
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `contract_id` - Base58-encoded contract identifier
// * `group_contract_position` - Position of the group in the contract
// * `status` - Action status (0=Pending, 1=Completed, 2=Expired)
// * `action_id` - Base58-encoded action identifier
//
// # Returns
// * JSON array of signers or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_group_get_action_signers(const struct SDKHandle *sdk_handle,
                                                       const char *contract_id,
                                                       uint16_t group_contract_position,
                                                       uint8_t status,
                                                       const char *action_id);

// Fetches group actions
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `contract_id` - Base58-encoded contract identifier
// * `group_contract_position` - Position of the group in the contract
// * `status` - Action status (0=Pending, 1=Completed, 2=Expired)
// * `start_at_action_id` - Optional starting action ID (Base58-encoded)
// * `limit` - Maximum number of actions to return
//
// # Returns
// * JSON array of group actions or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_group_get_actions(const struct SDKHandle *sdk_handle,
                                                const char *contract_id,
                                                uint16_t group_contract_position,
                                                uint8_t status,
                                                const char *start_at_action_id,
                                                uint16_t limit);

// Fetches information about a group
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `contract_id` - Base58-encoded contract identifier
// * `group_contract_position` - Position of the group in the contract
//
// # Returns
// * JSON string with group information or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_group_get_info(const struct SDKHandle *sdk_handle,
                                             const char *contract_id,
                                             uint16_t group_contract_position);

// Fetches information about multiple groups
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `start_at_position` - Starting position (optional, null for beginning)
// * `limit` - Maximum number of groups to return
//
// # Returns
// * JSON array of group information or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_group_get_infos(const struct SDKHandle *sdk_handle,
                                              const char *start_at_position,
                                              uint32_t limit);

// Create a new identity
struct DashSDKResult dash_sdk_identity_create(struct SDKHandle *sdk_handle);

// Create an identity handle from components
//
// This function creates an identity handle from basic components without
// requiring JSON serialization/deserialization.
//
// # Parameters
// - `identity_id`: 32-byte identity ID
// - `public_keys`: Array of public key data
// - `public_keys_count`: Number of public keys in the array
// - `balance`: Identity balance in credits
// - `revision`: Identity revision number
//
// # Returns
// - Handle to the created identity on success
// - Error if creation fails
struct DashSDKResult dash_sdk_identity_create_from_components(const uint8_t *identity_id,
                                                              const struct DashSDKPublicKeyData *public_keys,
                                                              uintptr_t public_keys_count,
                                                              uint64_t balance,
                                                              uint64_t revision);

// Get identity information
struct DashSDKIdentityInfo *dash_sdk_identity_get_info(const struct IdentityHandle *identity_handle);

// Destroy an identity handle
void dash_sdk_identity_destroy(struct IdentityHandle *handle);

// Get the appropriate signing key for a state transition
//
// This function finds a key that meets the purpose and security level requirements
// for the specified state transition type.
//
// # Parameters
// - `identity_handle`: Handle to the identity
// - `transition_type`: Type of state transition to be signed
//
// # Returns
// - Handle to the identity public key on success
// - Error if no suitable key is found
struct DashSDKResult dash_sdk_identity_get_signing_key_for_transition(const struct IdentityHandle *identity_handle,
                                                                      enum StateTransitionType transition_type);

// Get the private key data for a transfer key
//
// This function retrieves the private key data that corresponds to the
// lowest security level transfer key. In a real implementation, this would
// interface with a secure key storage system.
//
// # Parameters
// - `identity_handle`: Handle to the identity
// - `key_index`: The key index from the identity public key
//
// # Returns
// - 32-byte private key data on success
// - Error if key not found or not accessible
struct DashSDKResult dash_sdk_identity_get_transfer_private_key(const struct IdentityHandle *identity_handle,
                                                                uint32_t key_index);

// Get the key ID from an identity public key
uint32_t dash_sdk_identity_public_key_get_id(const struct IdentityPublicKeyHandle *key_handle);

// Free an identity public key handle
void dash_sdk_identity_public_key_destroy(struct IdentityPublicKeyHandle *handle);

// Register a name for an identity
struct DashSDKError *dash_sdk_identity_register_name(struct SDKHandle *_sdk_handle,
                                                     const struct IdentityHandle *_identity_handle,
                                                     const char *_name);

// Parse an identity from JSON string to handle
//
// This function takes a JSON string representation of an identity
// (as returned by dash_sdk_identity_fetch) and converts it to an
// identity handle that can be used with other FFI functions.
//
// # Parameters
// - `json_str`: JSON string containing the identity data
//
// # Returns
// - Handle to the parsed identity on success
// - Error if JSON parsing fails
struct DashSDKResult dash_sdk_identity_parse_json(const char *json_str);

// Put identity to platform with instant lock proof
//
// # Parameters
// - `instant_lock_bytes`: Serialized InstantLock data
// - `transaction_bytes`: Serialized Transaction data
// - `output_index`: Index of the output in the transaction payload
// - `private_key`: 32-byte private key associated with the asset lock
// - `put_settings`: Optional settings for the operation (can be null for defaults)
struct DashSDKResult dash_sdk_identity_put_to_platform_with_instant_lock(struct SDKHandle *sdk_handle,
                                                                         const struct IdentityHandle *identity_handle,
                                                                         const uint8_t *instant_lock_bytes,
                                                                         uintptr_t instant_lock_len,
                                                                         const uint8_t *transaction_bytes,
                                                                         uintptr_t transaction_len,
                                                                         uint32_t output_index,
                                                                         const uint8_t (*private_key)[32],
                                                                         const struct SignerHandle *signer_handle,
                                                                         const struct DashSDKPutSettings *put_settings);

// Put identity to platform with instant lock proof and wait for confirmation
//
// # Parameters
// - `instant_lock_bytes`: Serialized InstantLock data
// - `transaction_bytes`: Serialized Transaction data
// - `output_index`: Index of the output in the transaction payload
// - `private_key`: 32-byte private key associated with the asset lock
// - `put_settings`: Optional settings for the operation (can be null for defaults)
//
// # Returns
// Handle to the confirmed identity on success
struct DashSDKResult dash_sdk_identity_put_to_platform_with_instant_lock_and_wait(struct SDKHandle *sdk_handle,
                                                                                  const struct IdentityHandle *identity_handle,
                                                                                  const uint8_t *instant_lock_bytes,
                                                                                  uintptr_t instant_lock_len,
                                                                                  const uint8_t *transaction_bytes,
                                                                                  uintptr_t transaction_len,
                                                                                  uint32_t output_index,
                                                                                  const uint8_t (*private_key)[32],
                                                                                  const struct SignerHandle *signer_handle,
                                                                                  const struct DashSDKPutSettings *put_settings);

// Put identity to platform with chain lock proof
//
// # Parameters
// - `core_chain_locked_height`: Core height at which the transaction was chain locked
// - `out_point`: 36-byte OutPoint (32-byte txid + 4-byte vout)
// - `private_key`: 32-byte private key associated with the asset lock
// - `put_settings`: Optional settings for the operation (can be null for defaults)
struct DashSDKResult dash_sdk_identity_put_to_platform_with_chain_lock(struct SDKHandle *sdk_handle,
                                                                       const struct IdentityHandle *identity_handle,
                                                                       uint32_t core_chain_locked_height,
                                                                       const uint8_t (*out_point)[36],
                                                                       const uint8_t (*private_key)[32],
                                                                       const struct SignerHandle *signer_handle,
                                                                       const struct DashSDKPutSettings *put_settings);

// Put identity to platform with chain lock proof and wait for confirmation
//
// # Parameters
// - `core_chain_locked_height`: Core height at which the transaction was chain locked
// - `out_point`: 36-byte OutPoint (32-byte txid + 4-byte vout)
// - `private_key`: 32-byte private key associated with the asset lock
// - `put_settings`: Optional settings for the operation (can be null for defaults)
//
// # Returns
// Handle to the confirmed identity on success
struct DashSDKResult dash_sdk_identity_put_to_platform_with_chain_lock_and_wait(struct SDKHandle *sdk_handle,
                                                                                const struct IdentityHandle *identity_handle,
                                                                                uint32_t core_chain_locked_height,
                                                                                const uint8_t (*out_point)[36],
                                                                                const uint8_t (*private_key)[32],
                                                                                const struct SignerHandle *signer_handle,
                                                                                const struct DashSDKPutSettings *put_settings);

// Fetch identity balance
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
//
// # Returns
// The balance of the identity as a string
struct DashSDKResult dash_sdk_identity_fetch_balance(const struct SDKHandle *sdk_handle,
                                                     const char *identity_id);

// Fetch identity balance and revision
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
//
// # Returns
// JSON string containing the balance and revision information
struct DashSDKResult dash_sdk_identity_fetch_balance_and_revision(const struct SDKHandle *sdk_handle,
                                                                  const char *identity_id);

// Fetch identity by non-unique public key hash with optional pagination
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `public_key_hash`: Hex-encoded 20-byte public key hash
// - `start_after`: Optional Base58-encoded identity ID to start after (for pagination)
//
// # Returns
// JSON string containing the identity information, or null if not found
struct DashSDKResult dash_sdk_identity_fetch_by_non_unique_public_key_hash(const struct SDKHandle *sdk_handle,
                                                                           const char *public_key_hash,
                                                                           const char *start_after);

// Fetch identity by public key hash
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `public_key_hash`: Hex-encoded 20-byte public key hash
//
// # Returns
// JSON string containing the identity information, or null if not found
struct DashSDKResult dash_sdk_identity_fetch_by_public_key_hash(const struct SDKHandle *sdk_handle,
                                                                const char *public_key_hash);

// Fetch identity contract nonce
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
// - `contract_id`: Base58-encoded contract ID
//
// # Returns
// The contract nonce of the identity as a string
struct DashSDKResult dash_sdk_identity_fetch_contract_nonce(const struct SDKHandle *sdk_handle,
                                                            const char *identity_id,
                                                            const char *contract_id);

// Fetch an identity by ID
struct DashSDKResult dash_sdk_identity_fetch(const struct SDKHandle *sdk_handle,
                                             const char *identity_id);

// Fetch balances for multiple identities
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_ids`: Array of identity IDs (32-byte arrays)
// - `identity_ids_len`: Number of identity IDs in the array
//
// # Returns
// DashSDKResult with data_type = IdentityBalanceMap containing identity IDs mapped to their balances
struct DashSDKResult dash_sdk_identities_fetch_balances(const struct SDKHandle *sdk_handle,
                                                        const uint8_t (*identity_ids)[32],
                                                        uintptr_t identity_ids_len);

// Fetch contract keys for multiple identities
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_ids`: Comma-separated list of Base58-encoded identity IDs
// - `contract_id`: Base58-encoded contract ID
// - `document_type_name`: Optional document type name (pass NULL if not needed)
// - `purposes`: Comma-separated list of key purposes (0=Authentication, 1=Encryption, 2=Decryption, 3=Withdraw)
//
// # Returns
// JSON string containing identity IDs mapped to their contract keys by purpose
struct DashSDKResult dash_sdk_identities_fetch_contract_keys(const struct SDKHandle *sdk_handle,
                                                             const char *identity_ids,
                                                             const char *contract_id,
                                                             const char *document_type_name,
                                                             const char *purposes);

// Fetch identity nonce
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
//
// # Returns
// The nonce of the identity as a string
struct DashSDKResult dash_sdk_identity_fetch_nonce(const struct SDKHandle *sdk_handle,
                                                   const char *identity_id);

// Fetch identity public keys
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
//
// # Returns
// A JSON string containing the identity's public keys
struct DashSDKResult dash_sdk_identity_fetch_public_keys(const struct SDKHandle *sdk_handle,
                                                         const char *identity_id);

// Resolve a name to an identity
//
// This function takes a name in the format "label.parentdomain" (e.g., "alice.dash")
// or just "label" for top-level domains, and returns the associated identity ID.
//
// # Arguments
// * `sdk_handle` - Handle to the SDK instance
// * `name` - C string containing the name to resolve
//
// # Returns
// * On success: A result containing the resolved identity ID
// * On error: An error result
struct DashSDKResult dash_sdk_identity_resolve_name(const struct SDKHandle *sdk_handle,
                                                    const char *name);

// Top up an identity with credits using instant lock proof
struct DashSDKResult dash_sdk_identity_topup_with_instant_lock(struct SDKHandle *sdk_handle,
                                                               const struct IdentityHandle *identity_handle,
                                                               const uint8_t *instant_lock_bytes,
                                                               uintptr_t instant_lock_len,
                                                               const uint8_t *transaction_bytes,
                                                               uintptr_t transaction_len,
                                                               uint32_t output_index,
                                                               const uint8_t (*private_key)[32],
                                                               const struct DashSDKPutSettings *put_settings);

// Top up an identity with credits using instant lock proof and wait for confirmation
struct DashSDKResult dash_sdk_identity_topup_with_instant_lock_and_wait(struct SDKHandle *sdk_handle,
                                                                        const struct IdentityHandle *identity_handle,
                                                                        const uint8_t *instant_lock_bytes,
                                                                        uintptr_t instant_lock_len,
                                                                        const uint8_t *transaction_bytes,
                                                                        uintptr_t transaction_len,
                                                                        uint32_t output_index,
                                                                        const uint8_t (*private_key)[32],
                                                                        const struct DashSDKPutSettings *put_settings);

// Transfer credits from one identity to another
//
// # Parameters
// - `from_identity_handle`: Identity to transfer credits from
// - `to_identity_id`: Base58-encoded ID of the identity to transfer credits to
// - `amount`: Amount of credits to transfer
// - `identity_public_key_handle`: Public key for signing (optional, pass null to auto-select TRANSFER key)
// - `signer_handle`: Cryptographic signer
// - `put_settings`: Optional settings for the operation (can be null for defaults)
//
// # Returns
// DashSDKTransferCreditsResult with sender and receiver final balances on success
struct DashSDKResult dash_sdk_identity_transfer_credits(struct SDKHandle *sdk_handle,
                                                        const struct IdentityHandle *from_identity_handle,
                                                        const char *to_identity_id,
                                                        uint64_t amount,
                                                        const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                        const struct SignerHandle *signer_handle,
                                                        const struct DashSDKPutSettings *put_settings);

// Free a transfer credits result structure
void dash_sdk_transfer_credits_result_free(struct DashSDKTransferCreditsResult *result);

// Withdraw credits from identity to a Dash address
//
// # Parameters
// - `identity_handle`: Identity to withdraw credits from
// - `address`: Base58-encoded Dash address to withdraw to
// - `amount`: Amount of credits to withdraw
// - `core_fee_per_byte`: Core fee per byte (optional, pass 0 for default)
// - `identity_public_key_handle`: Public key for signing (optional, pass null to auto-select)
// - `signer_handle`: Cryptographic signer
// - `put_settings`: Optional settings for the operation (can be null for defaults)
//
// # Returns
// The new balance of the identity after withdrawal
struct DashSDKResult dash_sdk_identity_withdraw(struct SDKHandle *sdk_handle,
                                                const struct IdentityHandle *identity_handle,
                                                const char *address,
                                                uint64_t amount,
                                                uint32_t core_fee_per_byte,
                                                const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                const struct SignerHandle *signer_handle,
                                                const struct DashSDKPutSettings *put_settings);

// Generate a new BIP39 mnemonic
//
// # Parameters
// - `word_count`: Number of words (12, 15, 18, 21, or 24)
//
// # Returns
// - Pointer to FFIMnemonic on success
// - NULL on error (check dash_get_last_error)
struct FFIMnemonic *dash_key_mnemonic_generate(uint8_t word_count);

// Create a mnemonic from a phrase
//
// # Parameters
// - `phrase`: The mnemonic phrase as a C string
//
// # Returns
// - Pointer to FFIMnemonic on success
// - NULL on error
struct FFIMnemonic *dash_key_mnemonic_from_phrase(const char *phrase);

// Get the phrase from a mnemonic
//
// # Parameters
// - `mnemonic`: The mnemonic handle
//
// # Returns
// - C string containing the phrase (caller must free with dash_string_free)
// - NULL on error
char *dash_key_mnemonic_phrase(const struct FFIMnemonic *mnemonic);

// Convert mnemonic to seed
//
// # Parameters
// - `mnemonic`: The mnemonic handle
// - `passphrase`: Optional passphrase (can be NULL)
// - `seed_out`: Buffer to write seed (must be 64 bytes)
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_key_mnemonic_to_seed(const struct FFIMnemonic *mnemonic,
                                  const char *passphrase,
                                  uint8_t *seed_out);

// Destroy a mnemonic
void dash_key_mnemonic_destroy(struct FFIMnemonic *mnemonic);

// Create an extended private key from seed
//
// # Parameters
// - `seed`: The seed bytes (must be 64 bytes)
// - `network`: The network type
//
// # Returns
// - Pointer to FFIExtendedPrivKey on success
// - NULL on error
struct FFIExtendedPrivKey *dash_key_xprv_from_seed(const uint8_t *seed, enum FFIKeyNetwork network);

// Derive a child key from extended private key
//
// # Parameters
// - `xprv`: The parent extended private key
// - `index`: The child index
// - `hardened`: Whether to use hardened derivation
//
// # Returns
// - Pointer to derived FFIExtendedPrivKey on success
// - NULL on error
struct FFIExtendedPrivKey *dash_key_xprv_derive_child(const struct FFIExtendedPrivKey *xprv,
                                                      uint32_t index,
                                                      bool hardened);

// Derive key at BIP32 path
//
// # Parameters
// - `xprv`: The root extended private key
// - `path`: The derivation path (e.g., "m/44'/5'/0'/0/0")
//
// # Returns
// - Pointer to derived FFIExtendedPrivKey on success
// - NULL on error
struct FFIExtendedPrivKey *dash_key_xprv_derive_path(const struct FFIExtendedPrivKey *xprv,
                                                     const char *path);

// Get extended public key from extended private key
//
// # Parameters
// - `xprv`: The extended private key
//
// # Returns
// - Pointer to FFIExtendedPubKey on success
// - NULL on error
struct FFIExtendedPubKey *dash_key_xprv_to_xpub(const struct FFIExtendedPrivKey *xprv);

// Get private key bytes
//
// # Parameters
// - `xprv`: The extended private key
// - `key_out`: Buffer to write key (must be 32 bytes)
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_key_xprv_private_key(const struct FFIExtendedPrivKey *xprv, uint8_t *key_out);

// Destroy an extended private key
void dash_key_xprv_destroy(struct FFIExtendedPrivKey *xprv);

// Get public key bytes from extended public key
//
// # Parameters
// - `xpub`: The extended public key
// - `key_out`: Buffer to write key (must be 33 bytes for compressed)
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_key_xpub_public_key(const struct FFIExtendedPubKey *xpub, uint8_t *key_out);

// Destroy an extended public key
void dash_key_xpub_destroy(struct FFIExtendedPubKey *xpub);

// Generate a P2PKH address from public key
//
// # Parameters
// - `pubkey`: The public key bytes (33 bytes compressed)
// - `network`: The network type
//
// # Returns
// - C string containing the address (caller must free)
// - NULL on error
char *dash_key_address_from_pubkey(const uint8_t *pubkey, enum FFIKeyNetwork network);

// Validate an address string
//
// # Parameters
// - `address`: The address string
// - `network`: The expected network
//
// # Returns
// - 1 if valid
// - 0 if invalid
int32_t dash_key_address_validate(const char *address, enum FFIKeyNetwork network);

// Fetches protocol version upgrade state
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
//
// # Returns
// * JSON array of protocol version upgrade information
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_protocol_version_get_upgrade_state(const struct SDKHandle *sdk_handle);

// Fetches protocol version upgrade vote status
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `start_pro_tx_hash` - Starting masternode pro_tx_hash (hex-encoded, optional)
// * `count` - Number of vote entries to retrieve
//
// # Returns
// * JSON array of masternode protocol version votes or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_protocol_version_get_upgrade_vote_status(const struct SDKHandle *sdk_handle,
                                                                       const char *start_pro_tx_hash,
                                                                       uint32_t count);

// Create a new SDK instance
struct DashSDKResult dash_sdk_create(const struct DashSDKConfig *config);

// Create a new SDK instance with extended configuration including context provider
struct DashSDKResult dash_sdk_create_extended(const struct DashSDKConfigExtended *config);

// Create a new SDK instance with trusted setup
//
// This creates an SDK with a trusted context provider that fetches quorum keys and
// data contracts from trusted endpoints instead of requiring proof verification.
//
// # Safety
// - `config` must be a valid pointer to a DashSDKConfig structure
struct DashSDKResult dash_sdk_create_trusted(const struct DashSDKConfig *config);

// Destroy an SDK instance
void dash_sdk_destroy(struct SDKHandle *handle);

// Register global context provider callbacks
//
// This must be called before creating an SDK instance that needs Core SDK functionality.
// The callbacks will be used by all SDK instances created after registration.
//
// # Safety
// - `callbacks` must contain valid function pointers that remain valid for the lifetime of the SDK
int32_t dash_sdk_register_context_callbacks(const struct ContextProviderCallbacks *callbacks);

// Create a new SDK instance with explicit context callbacks
//
// This is an alternative to registering global callbacks. The callbacks are used only for this SDK instance.
//
// # Safety
// - `config` must be a valid pointer to a DashSDKConfig structure
// - `callbacks` must contain valid function pointers that remain valid for the lifetime of the SDK
struct DashSDKResult dash_sdk_create_with_callbacks(const struct DashSDKConfig *config,
                                                    const struct ContextProviderCallbacks *callbacks);

// Get the current network the SDK is connected to
enum DashSDKNetwork dash_sdk_get_network(const struct SDKHandle *handle);

// Create a mock SDK instance with a dump directory (for offline testing)
struct SDKHandle *dash_sdk_create_handle_with_mock(const char *dump_dir);

// Create a new iOS signer
struct SignerHandle *dash_sdk_signer_create(IOSSignCallback sign_callback,
                                            IOSCanSignCallback can_sign_callback);

// Destroy an iOS signer
void dash_sdk_signer_destroy(struct SignerHandle *handle);

// Free bytes allocated by iOS callbacks
void dash_sdk_bytes_free(uint8_t *bytes);

// Create a signer from a private key
struct DashSDKResult dash_sdk_signer_create_from_private_key(const uint8_t *private_key,
                                                             uintptr_t private_key_len);

// Fetches information about current quorums
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
//
// # Returns
// * JSON string with current quorums information
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_system_get_current_quorums_info(const struct SDKHandle *sdk_handle);

// Fetches information about multiple epochs
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `start_epoch` - Starting epoch index (optional, null for default)
// * `count` - Number of epochs to retrieve
// * `ascending` - Whether to return epochs in ascending order
//
// # Returns
// * JSON array of epoch information or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_system_get_epochs_info(const struct SDKHandle *sdk_handle,
                                                     const char *start_epoch,
                                                     uint32_t count,
                                                     bool ascending);

// Fetches path elements
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `path_json` - JSON array of path elements (hex-encoded byte arrays)
// * `keys_json` - JSON array of keys (hex-encoded byte arrays)
//
// # Returns
// * JSON array of elements or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_system_get_path_elements(const struct SDKHandle *sdk_handle,
                                                       const char *path_json,
                                                       const char *keys_json);

// Get platform status including block heights
struct DashSDKResult dash_sdk_get_platform_status(const struct SDKHandle *sdk_handle);

// Fetches a prefunded specialized balance
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `id` - Base58-encoded identifier
//
// # Returns
// * JSON string with balance or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_system_get_prefunded_specialized_balance(const struct SDKHandle *sdk_handle,
                                                                       const char *id);

// Fetches the total credits in the platform
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
//
// # Returns
// * JSON string with total credits
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_system_get_total_credits_in_platform(const struct SDKHandle *sdk_handle);

// Get SDK status including mode and quorum count
struct DashSDKResult dash_sdk_get_status(const struct SDKHandle *sdk_handle);

// Burn tokens from an identity and wait for confirmation
struct DashSDKResult dash_sdk_token_burn(struct SDKHandle *sdk_handle,
                                         const uint8_t *transition_owner_id,
                                         const struct DashSDKTokenBurnParams *params,
                                         const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                         const struct SignerHandle *signer_handle,
                                         const struct DashSDKPutSettings *put_settings,
                                         const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Claim tokens from a distribution and wait for confirmation
struct DashSDKResult dash_sdk_token_claim(struct SDKHandle *sdk_handle,
                                          const uint8_t *transition_owner_id,
                                          const struct DashSDKTokenClaimParams *params,
                                          const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                          const struct SignerHandle *signer_handle,
                                          const struct DashSDKPutSettings *put_settings,
                                          const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Mint tokens to an identity and wait for confirmation
struct DashSDKResult dash_sdk_token_mint(struct SDKHandle *sdk_handle,
                                         const uint8_t *transition_owner_id,
                                         const struct DashSDKTokenMintParams *params,
                                         const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                         const struct SignerHandle *signer_handle,
                                         const struct DashSDKPutSettings *put_settings,
                                         const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Token transfer to another identity and wait for confirmation
struct DashSDKResult dash_sdk_token_transfer(struct SDKHandle *sdk_handle,
                                             const uint8_t *transition_owner_id,
                                             const struct DashSDKTokenTransferParams *params,
                                             const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                             const struct SignerHandle *signer_handle,
                                             const struct DashSDKPutSettings *put_settings,
                                             const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Update token configuration and wait for confirmation
struct DashSDKResult dash_sdk_token_update_contract_token_configuration(struct SDKHandle *sdk_handle,
                                                                        const uint8_t *transition_owner_id,
                                                                        const struct DashSDKTokenConfigUpdateParams *params,
                                                                        const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                                        const struct SignerHandle *signer_handle,
                                                                        const struct DashSDKPutSettings *put_settings,
                                                                        const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Destroy frozen token funds and wait for confirmation
struct DashSDKResult dash_sdk_token_destroy_frozen_funds(struct SDKHandle *sdk_handle,
                                                         const uint8_t *transition_owner_id,
                                                         const struct DashSDKTokenDestroyFrozenFundsParams *params,
                                                         const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                         const struct SignerHandle *signer_handle,
                                                         const struct DashSDKPutSettings *put_settings,
                                                         const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Perform emergency action on token and wait for confirmation
struct DashSDKResult dash_sdk_token_emergency_action(struct SDKHandle *sdk_handle,
                                                     const uint8_t *transition_owner_id,
                                                     const struct DashSDKTokenEmergencyActionParams *params,
                                                     const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                                     const struct SignerHandle *signer_handle,
                                                     const struct DashSDKPutSettings *put_settings,
                                                     const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Freeze a token for an identity and wait for confirmation
struct DashSDKResult dash_sdk_token_freeze(struct SDKHandle *sdk_handle,
                                           const uint8_t *transition_owner_id,
                                           const struct DashSDKTokenFreezeParams *params,
                                           const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                           const struct SignerHandle *signer_handle,
                                           const struct DashSDKPutSettings *put_settings,
                                           const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Unfreeze a token for an identity and wait for confirmation
struct DashSDKResult dash_sdk_token_unfreeze(struct SDKHandle *sdk_handle,
                                             const uint8_t *transition_owner_id,
                                             const struct DashSDKTokenFreezeParams *params,
                                             const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                             const struct SignerHandle *signer_handle,
                                             const struct DashSDKPutSettings *put_settings,
                                             const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Purchase tokens directly and wait for confirmation
struct DashSDKResult dash_sdk_token_purchase(struct SDKHandle *sdk_handle,
                                             const uint8_t *transition_owner_id,
                                             const struct DashSDKTokenPurchaseParams *params,
                                             const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                             const struct SignerHandle *signer_handle,
                                             const struct DashSDKPutSettings *put_settings,
                                             const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Set token price for direct purchase and wait for confirmation
struct DashSDKResult dash_sdk_token_set_price(struct SDKHandle *sdk_handle,
                                              const uint8_t *transition_owner_id,
                                              const struct DashSDKTokenSetPriceParams *params,
                                              const struct IdentityPublicKeyHandle *identity_public_key_handle,
                                              const struct SignerHandle *signer_handle,
                                              const struct DashSDKPutSettings *put_settings,
                                              const struct DashSDKStateTransitionCreationOptions *state_transition_creation_options);

// Get identity token balances
//
// This is an alias for dash_sdk_identity_fetch_token_balances for backward compatibility
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
// - `token_ids`: Comma-separated list of Base58-encoded token IDs
//
// # Returns
// JSON string containing token IDs mapped to their balances
struct DashSDKResult dash_sdk_token_get_identity_balances(const struct SDKHandle *sdk_handle,
                                                          const char *identity_id,
                                                          const char *token_ids);

// Get token contract info
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `token_id`: Base58-encoded token ID
//
// # Returns
// JSON string containing the contract ID and token position, or null if not found
struct DashSDKResult dash_sdk_token_get_contract_info(const struct SDKHandle *sdk_handle,
                                                      const char *token_id);

// Get token direct purchase prices
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `token_ids`: Comma-separated list of Base58-encoded token IDs
//
// # Returns
// JSON string containing token IDs mapped to their pricing information
struct DashSDKResult dash_sdk_token_get_direct_purchase_prices(const struct SDKHandle *sdk_handle,
                                                               const char *token_ids);

// Fetch token balances for multiple identities for a specific token
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_ids`: Comma-separated list of Base58-encoded identity IDs
// - `token_id`: Base58-encoded token ID
//
// # Returns
// JSON string containing identity IDs mapped to their token balances
struct DashSDKResult dash_sdk_identities_fetch_token_balances(const struct SDKHandle *sdk_handle,
                                                              const char *identity_ids,
                                                              const char *token_id);

// Fetch token information for multiple identities for a specific token
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_ids`: Comma-separated list of Base58-encoded identity IDs
// - `token_id`: Base58-encoded token ID
//
// # Returns
// JSON string containing identity IDs mapped to their token information
struct DashSDKResult dash_sdk_identities_fetch_token_infos(const struct SDKHandle *sdk_handle,
                                                           const char *identity_ids,
                                                           const char *token_id);

// Fetch token balances for a specific identity
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
// - `token_ids`: Comma-separated list of Base58-encoded token IDs
//
// # Returns
// JSON string containing token IDs mapped to their balances
struct DashSDKResult dash_sdk_identity_fetch_token_balances(const struct SDKHandle *sdk_handle,
                                                            const char *identity_id,
                                                            const char *token_ids);

// Fetch token information for a specific identity
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
// - `token_ids`: Comma-separated list of Base58-encoded token IDs
//
// # Returns
// JSON string containing token IDs mapped to their information
struct DashSDKResult dash_sdk_identity_fetch_token_infos(const struct SDKHandle *sdk_handle,
                                                         const char *identity_id,
                                                         const char *token_ids);

// Get identity token information
//
// This is an alias for dash_sdk_identity_fetch_token_infos for backward compatibility
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `identity_id`: Base58-encoded identity ID
// - `token_ids`: Comma-separated list of Base58-encoded token IDs
//
// # Returns
// JSON string containing token IDs mapped to their information
struct DashSDKResult dash_sdk_token_get_identity_infos(const struct SDKHandle *sdk_handle,
                                                       const char *identity_id,
                                                       const char *token_ids);

// Get token perpetual distribution last claim
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `token_id`: Base58-encoded token ID
// - `identity_id`: Base58-encoded identity ID
//
// # Returns
// JSON string containing the last claim information
struct DashSDKResult dash_sdk_token_get_perpetual_distribution_last_claim(const struct SDKHandle *sdk_handle,
                                                                          const char *token_id,
                                                                          const char *identity_id);

// Get token statuses
//
// # Parameters
// - `sdk_handle`: SDK handle
// - `token_ids`: Comma-separated list of Base58-encoded token IDs
//
// # Returns
// JSON string containing token IDs mapped to their status information
struct DashSDKResult dash_sdk_token_get_statuses(const struct SDKHandle *sdk_handle,
                                                 const char *token_ids);

// Fetches the total supply of a token
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `token_id` - Base58-encoded token identifier
//
// # Returns
// * JSON string with token supply info or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_token_get_total_supply(const struct SDKHandle *sdk_handle,
                                                     const char *token_id);

// Create a new empty transaction
//
// # Returns
// - Pointer to FFITransaction on success
// - NULL on error
struct FFITransaction *dash_tx_create(void);

// Add an input to a transaction
//
// # Parameters
// - `tx`: The transaction
// - `input`: The input to add
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_tx_add_input(struct FFITransaction *tx, const struct FFITxIn *input);

// Add an output to a transaction
//
// # Parameters
// - `tx`: The transaction
// - `output`: The output to add
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_tx_add_output(struct FFITransaction *tx, const struct FFITxOut *output);

// Get the transaction ID
//
// # Parameters
// - `tx`: The transaction
// - `txid_out`: Buffer to write txid (must be 32 bytes)
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_tx_get_txid(const struct FFITransaction *tx, uint8_t *txid_out);

// Serialize a transaction
//
// # Parameters
// - `tx`: The transaction
// - `out_buf`: Buffer to write serialized data (can be NULL to get size)
// - `out_len`: In/out parameter for buffer size
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_tx_serialize(const struct FFITransaction *tx, uint8_t *out_buf, uint32_t *out_len);

// Deserialize a transaction
//
// # Parameters
// - `data`: The serialized transaction data
// - `len`: Length of the data
//
// # Returns
// - Pointer to FFITransaction on success
// - NULL on error
struct FFITransaction *dash_tx_deserialize(const uint8_t *data, uint32_t len);

// Destroy a transaction
void dash_tx_destroy(struct FFITransaction *tx);

// Calculate signature hash for an input
//
// # Parameters
// - `tx`: The transaction
// - `input_index`: Which input to sign
// - `script_pubkey`: The script pubkey of the output being spent
// - `script_pubkey_len`: Length of script pubkey
// - `sighash_type`: Signature hash type (usually 0x01 for SIGHASH_ALL)
// - `hash_out`: Buffer to write hash (must be 32 bytes)
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_tx_sighash(const struct FFITransaction *tx,
                        uint32_t input_index,
                        const uint8_t *script_pubkey,
                        uint32_t script_pubkey_len,
                        uint32_t sighash_type,
                        uint8_t *hash_out);

// Sign a transaction input
//
// # Parameters
// - `tx`: The transaction
// - `input_index`: Which input to sign
// - `private_key`: The private key (32 bytes)
// - `script_pubkey`: The script pubkey of the output being spent
// - `script_pubkey_len`: Length of script pubkey
// - `sighash_type`: Signature hash type
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_tx_sign_input(struct FFITransaction *tx,
                           uint32_t input_index,
                           const uint8_t *private_key,
                           const uint8_t *script_pubkey,
                           uint32_t script_pubkey_len,
                           uint32_t sighash_type);

// Create a P2PKH script pubkey
//
// # Parameters
// - `pubkey_hash`: The public key hash (20 bytes)
// - `out_buf`: Buffer to write script (can be NULL to get size)
// - `out_len`: In/out parameter for buffer size
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_script_p2pkh(const uint8_t *pubkey_hash, uint8_t *out_buf, uint32_t *out_len);

// Extract public key hash from P2PKH address
//
// # Parameters
// - `address`: The address string
// - `network`: The expected network
// - `hash_out`: Buffer to write hash (must be 20 bytes)
//
// # Returns
// - 0 on success
// - -1 on error
int32_t dash_address_to_pubkey_hash(const char *address,
                                    enum FFIKeyNetwork network,
                                    uint8_t *hash_out);

// Free a string allocated by the FFI
void dash_sdk_string_free(char *s);

// Free binary data allocated by the FFI
void dash_sdk_binary_data_free(struct DashSDKBinaryData *binary_data);

// Free an identity info structure
void dash_sdk_identity_info_free(struct DashSDKIdentityInfo *info);

// Free a document info structure
void dash_sdk_document_info_free(struct DashSDKDocumentInfo *info);

// Free an identity balance map
void dash_sdk_identity_balance_map_free(struct DashSDKIdentityBalanceMap *map);

// Initialize the unified SDK system
// This initializes both Core SDK (if enabled) and Platform SDK
int32_t dash_unified_sdk_init(void);

// Create a unified SDK handle with both Core and Platform SDKs
//
// # Safety
// - `config` must point to a valid UnifiedSDKConfig structure
struct UnifiedSDKHandle *dash_unified_sdk_create(const struct UnifiedSDKConfig *config);

// Destroy a unified SDK handle
//
// # Safety
// - `handle` must be a valid unified SDK handle or null
void dash_unified_sdk_destroy(struct UnifiedSDKHandle *handle);

// Start both Core and Platform SDKs
//
// # Safety
// - `handle` must be a valid unified SDK handle
int32_t dash_unified_sdk_start(struct UnifiedSDKHandle *handle);

// Stop both Core and Platform SDKs
//
// # Safety
// - `handle` must be a valid unified SDK handle
int32_t dash_unified_sdk_stop(struct UnifiedSDKHandle *handle);

// Get the Core SDK client from a unified handle
//
// # Safety
// - `handle` must be a valid unified SDK handle
struct FFIDashSpvClient *dash_unified_sdk_get_core_client(struct UnifiedSDKHandle *handle);

// Get the Platform SDK from a unified handle
//
// # Safety
// - `handle` must be a valid unified SDK handle
struct SDKHandle *dash_unified_sdk_get_platform_sdk(struct UnifiedSDKHandle *handle);

// Check if integration is enabled for this unified SDK
//
// # Safety
// - `handle` must be a valid unified SDK handle
bool dash_unified_sdk_is_integration_enabled(struct UnifiedSDKHandle *handle);

// Check if Core SDK is available in this unified SDK
//
// # Safety
// - `handle` must be a valid unified SDK handle
bool dash_unified_sdk_has_core_sdk(struct UnifiedSDKHandle *handle);

// Register Core SDK with Platform SDK for context provider callbacks
// This enables Platform SDK to query Core SDK for blockchain state
//
// # Safety
// - `handle` must be a valid unified SDK handle
int32_t dash_unified_sdk_register_core_context(struct UnifiedSDKHandle *handle);

// Get combined status of both SDKs
//
// # Safety
// - `handle` must be a valid unified SDK handle
// - `core_height` must point to a valid u32 (set to 0 if core disabled)
// - `platform_ready` must point to a valid bool
int32_t dash_unified_sdk_get_status(struct UnifiedSDKHandle *handle,
                                    uint32_t *core_height,
                                    bool *platform_ready);

// Get unified SDK version information
const char *dash_unified_sdk_version(void);

// Check if unified SDK was compiled with core support
bool dash_unified_sdk_has_core_support(void);

// Convert a hex string to base58
//
// # Parameters
// - `hex_string`: Hex encoded string (must be 64 characters for identity IDs)
//
// # Returns
// - Base58 encoded string on success
// - Error if the hex string is invalid
struct DashSDKResult dash_sdk_utils_hex_to_base58(const char *hex_string);

// Convert a base58 string to hex
//
// # Parameters
// - `base58_string`: Base58 encoded string
//
// # Returns
// - Hex encoded string on success
// - Error if the base58 string is invalid
struct DashSDKResult dash_sdk_utils_base58_to_hex(const char *base58_string);

// Validate if a string is valid base58
//
// # Parameters
// - `string`: String to validate
//
// # Returns
// - 1 if valid base58, 0 if invalid
uint8_t dash_sdk_utils_is_valid_base58(const char *string);

// Fetches vote polls by end date
//
// # Parameters
// * `sdk_handle` - Handle to the SDK instance
// * `start_time_ms` - Start time in milliseconds (optional, 0 for no start time)
// * `start_time_included` - Whether to include the start time
// * `end_time_ms` - End time in milliseconds (optional, 0 for no end time)
// * `end_time_included` - Whether to include the end time
// * `limit` - Maximum number of results to return (optional, 0 for no limit)
// * `offset` - Number of results to skip (optional, 0 for no offset)
// * `ascending` - Whether to order results in ascending order
//
// # Returns
// * JSON array of vote polls grouped by timestamp or null if not found
// * Error message if operation fails
//
// # Safety
// This function is unsafe because it handles raw pointers from C
struct DashSDKResult dash_sdk_voting_get_vote_polls_by_end_date(const struct SDKHandle *sdk_handle,
                                                                uint64_t start_time_ms,
                                                                bool start_time_included,
                                                                uint64_t end_time_ms,
                                                                bool end_time_included,
                                                                uint32_t limit,
                                                                uint32_t offset,
                                                                bool ascending);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus


// ============================================================================
// Type Compatibility Aliases
// ============================================================================

// Note: Both DashSDKNetwork and FFINetwork enums are preserved separately
// FFINetwork enum values have been renamed to avoid conflicts (FFITestnet, FFIDevnet, etc.)
// CoreSDKHandle from SPV header is removed to avoid conflicts with SDK version


#endif /* DASH_UNIFIED_FFI_H */
